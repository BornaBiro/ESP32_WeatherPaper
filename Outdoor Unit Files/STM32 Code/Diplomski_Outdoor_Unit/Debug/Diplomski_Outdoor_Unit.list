
Diplomski_Outdoor_Unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a234  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a7ac  0800a7ac  0001a7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a7b4  0800a7b4  0001a7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a7b8  0800a7b8  0001a7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000288  20000000  0800a7bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000390  20000288  0800aa44  00020288  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000618  0800aa44  00020618  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002392d  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000467c  00000000  00000000  00043bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000101ec  00000000  00000000  00048259  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001500  00000000  00000000  00058448  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019e0  00000000  00000000  00059948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bd29  00000000  00000000  0005b328  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006a87  00000000  00000000  00067051  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006dad8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000050f8  00000000  00000000  0006db54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000288 	.word	0x20000288
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a2dc 	.word	0x0800a2dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000028c 	.word	0x2000028c
 8000104:	0800a2dc 	.word	0x0800a2dc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fdc1 	bl	8001fd8 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fd1b 	bl	8001e9c <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fdb3 	bl	8001fd8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fda9 	bl	8001fd8 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd3b 	bl	8001f10 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fd31 	bl	8001f10 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	1c08      	adds	r0, r1, #0
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fb41 	bl	8000b4c <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fad3 	bl	8000a80 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb33 	bl	8000b4c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb29 	bl	8000b4c <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fadf 	bl	8000acc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fad5 	bl	8000acc <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_uldivmod>:
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d10f      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000538:	2900      	cmp	r1, #0
 800053a:	d100      	bne.n	800053e <__aeabi_uldivmod+0xe>
 800053c:	2800      	cmp	r0, #0
 800053e:	d002      	beq.n	8000546 <__aeabi_uldivmod+0x16>
 8000540:	2100      	movs	r1, #0
 8000542:	43c9      	mvns	r1, r1
 8000544:	1c08      	adds	r0, r1, #0
 8000546:	b407      	push	{r0, r1, r2}
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <__aeabi_uldivmod+0x24>)
 800054a:	a102      	add	r1, pc, #8	; (adr r1, 8000554 <__aeabi_uldivmod+0x24>)
 800054c:	1840      	adds	r0, r0, r1
 800054e:	9002      	str	r0, [sp, #8]
 8000550:	bd03      	pop	{r0, r1, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	fffffee9 	.word	0xfffffee9
 8000558:	b403      	push	{r0, r1}
 800055a:	4668      	mov	r0, sp
 800055c:	b501      	push	{r0, lr}
 800055e:	9802      	ldr	r0, [sp, #8]
 8000560:	f000 f83c 	bl	80005dc <__udivmoddi4>
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	469e      	mov	lr, r3
 8000568:	b002      	add	sp, #8
 800056a:	bc0c      	pop	{r2, r3}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			; (mov r8, r8)

08000570 <__aeabi_f2uiz>:
 8000570:	219e      	movs	r1, #158	; 0x9e
 8000572:	b510      	push	{r4, lr}
 8000574:	05c9      	lsls	r1, r1, #23
 8000576:	1c04      	adds	r4, r0, #0
 8000578:	f7ff ffd0 	bl	800051c <__aeabi_fcmpge>
 800057c:	2800      	cmp	r0, #0
 800057e:	d103      	bne.n	8000588 <__aeabi_f2uiz+0x18>
 8000580:	1c20      	adds	r0, r4, #0
 8000582:	f000 fde1 	bl	8001148 <__aeabi_f2iz>
 8000586:	bd10      	pop	{r4, pc}
 8000588:	219e      	movs	r1, #158	; 0x9e
 800058a:	1c20      	adds	r0, r4, #0
 800058c:	05c9      	lsls	r1, r1, #23
 800058e:	f000 fc3f 	bl	8000e10 <__aeabi_fsub>
 8000592:	f000 fdd9 	bl	8001148 <__aeabi_f2iz>
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	061b      	lsls	r3, r3, #24
 800059a:	469c      	mov	ip, r3
 800059c:	4460      	add	r0, ip
 800059e:	e7f2      	b.n	8000586 <__aeabi_f2uiz+0x16>

080005a0 <__aeabi_d2uiz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <__aeabi_d2uiz+0x38>)
 80005a6:	0004      	movs	r4, r0
 80005a8:	000d      	movs	r5, r1
 80005aa:	f7ff ff7d 	bl	80004a8 <__aeabi_dcmpge>
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d104      	bne.n	80005bc <__aeabi_d2uiz+0x1c>
 80005b2:	0020      	movs	r0, r4
 80005b4:	0029      	movs	r1, r5
 80005b6:	f002 fb07 	bl	8002bc8 <__aeabi_d2iz>
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <__aeabi_d2uiz+0x38>)
 80005be:	2200      	movs	r2, #0
 80005c0:	0020      	movs	r0, r4
 80005c2:	0029      	movs	r1, r5
 80005c4:	f001 ffea 	bl	800259c <__aeabi_dsub>
 80005c8:	f002 fafe 	bl	8002bc8 <__aeabi_d2iz>
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	061b      	lsls	r3, r3, #24
 80005d0:	469c      	mov	ip, r3
 80005d2:	4460      	add	r0, ip
 80005d4:	e7f1      	b.n	80005ba <__aeabi_d2uiz+0x1a>
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	41e00000 	.word	0x41e00000

080005dc <__udivmoddi4>:
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	4657      	mov	r7, sl
 80005e0:	464e      	mov	r6, r9
 80005e2:	4645      	mov	r5, r8
 80005e4:	46de      	mov	lr, fp
 80005e6:	b5e0      	push	{r5, r6, r7, lr}
 80005e8:	0004      	movs	r4, r0
 80005ea:	b083      	sub	sp, #12
 80005ec:	000d      	movs	r5, r1
 80005ee:	4692      	mov	sl, r2
 80005f0:	4699      	mov	r9, r3
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d82f      	bhi.n	8000656 <__udivmoddi4+0x7a>
 80005f6:	d02c      	beq.n	8000652 <__udivmoddi4+0x76>
 80005f8:	4649      	mov	r1, r9
 80005fa:	4650      	mov	r0, sl
 80005fc:	f002 fc8c 	bl	8002f18 <__clzdi2>
 8000600:	0029      	movs	r1, r5
 8000602:	0006      	movs	r6, r0
 8000604:	0020      	movs	r0, r4
 8000606:	f002 fc87 	bl	8002f18 <__clzdi2>
 800060a:	1a33      	subs	r3, r6, r0
 800060c:	4698      	mov	r8, r3
 800060e:	3b20      	subs	r3, #32
 8000610:	469b      	mov	fp, r3
 8000612:	d500      	bpl.n	8000616 <__udivmoddi4+0x3a>
 8000614:	e074      	b.n	8000700 <__udivmoddi4+0x124>
 8000616:	4653      	mov	r3, sl
 8000618:	465a      	mov	r2, fp
 800061a:	4093      	lsls	r3, r2
 800061c:	001f      	movs	r7, r3
 800061e:	4653      	mov	r3, sl
 8000620:	4642      	mov	r2, r8
 8000622:	4093      	lsls	r3, r2
 8000624:	001e      	movs	r6, r3
 8000626:	42af      	cmp	r7, r5
 8000628:	d829      	bhi.n	800067e <__udivmoddi4+0xa2>
 800062a:	d026      	beq.n	800067a <__udivmoddi4+0x9e>
 800062c:	465b      	mov	r3, fp
 800062e:	1ba4      	subs	r4, r4, r6
 8000630:	41bd      	sbcs	r5, r7
 8000632:	2b00      	cmp	r3, #0
 8000634:	da00      	bge.n	8000638 <__udivmoddi4+0x5c>
 8000636:	e079      	b.n	800072c <__udivmoddi4+0x150>
 8000638:	2200      	movs	r2, #0
 800063a:	2300      	movs	r3, #0
 800063c:	9200      	str	r2, [sp, #0]
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	465a      	mov	r2, fp
 8000644:	4093      	lsls	r3, r2
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	2301      	movs	r3, #1
 800064a:	4642      	mov	r2, r8
 800064c:	4093      	lsls	r3, r2
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	e019      	b.n	8000686 <__udivmoddi4+0xaa>
 8000652:	4282      	cmp	r2, r0
 8000654:	d9d0      	bls.n	80005f8 <__udivmoddi4+0x1c>
 8000656:	2200      	movs	r2, #0
 8000658:	2300      	movs	r3, #0
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <__udivmoddi4+0x8c>
 8000664:	601c      	str	r4, [r3, #0]
 8000666:	605d      	str	r5, [r3, #4]
 8000668:	9800      	ldr	r0, [sp, #0]
 800066a:	9901      	ldr	r1, [sp, #4]
 800066c:	b003      	add	sp, #12
 800066e:	bc3c      	pop	{r2, r3, r4, r5}
 8000670:	4690      	mov	r8, r2
 8000672:	4699      	mov	r9, r3
 8000674:	46a2      	mov	sl, r4
 8000676:	46ab      	mov	fp, r5
 8000678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067a:	42a3      	cmp	r3, r4
 800067c:	d9d6      	bls.n	800062c <__udivmoddi4+0x50>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	4643      	mov	r3, r8
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0e8      	beq.n	800065e <__udivmoddi4+0x82>
 800068c:	07fb      	lsls	r3, r7, #31
 800068e:	0872      	lsrs	r2, r6, #1
 8000690:	431a      	orrs	r2, r3
 8000692:	4646      	mov	r6, r8
 8000694:	087b      	lsrs	r3, r7, #1
 8000696:	e00e      	b.n	80006b6 <__udivmoddi4+0xda>
 8000698:	42ab      	cmp	r3, r5
 800069a:	d101      	bne.n	80006a0 <__udivmoddi4+0xc4>
 800069c:	42a2      	cmp	r2, r4
 800069e:	d80c      	bhi.n	80006ba <__udivmoddi4+0xde>
 80006a0:	1aa4      	subs	r4, r4, r2
 80006a2:	419d      	sbcs	r5, r3
 80006a4:	2001      	movs	r0, #1
 80006a6:	1924      	adds	r4, r4, r4
 80006a8:	416d      	adcs	r5, r5
 80006aa:	2100      	movs	r1, #0
 80006ac:	3e01      	subs	r6, #1
 80006ae:	1824      	adds	r4, r4, r0
 80006b0:	414d      	adcs	r5, r1
 80006b2:	2e00      	cmp	r6, #0
 80006b4:	d006      	beq.n	80006c4 <__udivmoddi4+0xe8>
 80006b6:	42ab      	cmp	r3, r5
 80006b8:	d9ee      	bls.n	8000698 <__udivmoddi4+0xbc>
 80006ba:	3e01      	subs	r6, #1
 80006bc:	1924      	adds	r4, r4, r4
 80006be:	416d      	adcs	r5, r5
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d1f8      	bne.n	80006b6 <__udivmoddi4+0xda>
 80006c4:	465b      	mov	r3, fp
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	1900      	adds	r0, r0, r4
 80006cc:	4169      	adcs	r1, r5
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	db22      	blt.n	8000718 <__udivmoddi4+0x13c>
 80006d2:	002b      	movs	r3, r5
 80006d4:	465a      	mov	r2, fp
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	4644      	mov	r4, r8
 80006dc:	40e2      	lsrs	r2, r4
 80006de:	001c      	movs	r4, r3
 80006e0:	465b      	mov	r3, fp
 80006e2:	0015      	movs	r5, r2
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db2c      	blt.n	8000742 <__udivmoddi4+0x166>
 80006e8:	0026      	movs	r6, r4
 80006ea:	409e      	lsls	r6, r3
 80006ec:	0033      	movs	r3, r6
 80006ee:	0026      	movs	r6, r4
 80006f0:	4647      	mov	r7, r8
 80006f2:	40be      	lsls	r6, r7
 80006f4:	0032      	movs	r2, r6
 80006f6:	1a80      	subs	r0, r0, r2
 80006f8:	4199      	sbcs	r1, r3
 80006fa:	9000      	str	r0, [sp, #0]
 80006fc:	9101      	str	r1, [sp, #4]
 80006fe:	e7ae      	b.n	800065e <__udivmoddi4+0x82>
 8000700:	4642      	mov	r2, r8
 8000702:	2320      	movs	r3, #32
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	4652      	mov	r2, sl
 8000708:	40da      	lsrs	r2, r3
 800070a:	4641      	mov	r1, r8
 800070c:	0013      	movs	r3, r2
 800070e:	464a      	mov	r2, r9
 8000710:	408a      	lsls	r2, r1
 8000712:	0017      	movs	r7, r2
 8000714:	431f      	orrs	r7, r3
 8000716:	e782      	b.n	800061e <__udivmoddi4+0x42>
 8000718:	4642      	mov	r2, r8
 800071a:	2320      	movs	r3, #32
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	002a      	movs	r2, r5
 8000720:	4646      	mov	r6, r8
 8000722:	409a      	lsls	r2, r3
 8000724:	0023      	movs	r3, r4
 8000726:	40f3      	lsrs	r3, r6
 8000728:	4313      	orrs	r3, r2
 800072a:	e7d5      	b.n	80006d8 <__udivmoddi4+0xfc>
 800072c:	4642      	mov	r2, r8
 800072e:	2320      	movs	r3, #32
 8000730:	2100      	movs	r1, #0
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	2200      	movs	r2, #0
 8000736:	9100      	str	r1, [sp, #0]
 8000738:	9201      	str	r2, [sp, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	40da      	lsrs	r2, r3
 800073e:	9201      	str	r2, [sp, #4]
 8000740:	e782      	b.n	8000648 <__udivmoddi4+0x6c>
 8000742:	4642      	mov	r2, r8
 8000744:	2320      	movs	r3, #32
 8000746:	0026      	movs	r6, r4
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	40de      	lsrs	r6, r3
 800074c:	002f      	movs	r7, r5
 800074e:	46b4      	mov	ip, r6
 8000750:	4097      	lsls	r7, r2
 8000752:	4666      	mov	r6, ip
 8000754:	003b      	movs	r3, r7
 8000756:	4333      	orrs	r3, r6
 8000758:	e7c9      	b.n	80006ee <__udivmoddi4+0x112>
 800075a:	46c0      	nop			; (mov r8, r8)

0800075c <__aeabi_fadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	46c6      	mov	lr, r8
 8000760:	024e      	lsls	r6, r1, #9
 8000762:	0247      	lsls	r7, r0, #9
 8000764:	0a76      	lsrs	r6, r6, #9
 8000766:	0a7b      	lsrs	r3, r7, #9
 8000768:	0044      	lsls	r4, r0, #1
 800076a:	0fc5      	lsrs	r5, r0, #31
 800076c:	00f7      	lsls	r7, r6, #3
 800076e:	0048      	lsls	r0, r1, #1
 8000770:	4698      	mov	r8, r3
 8000772:	b500      	push	{lr}
 8000774:	0e24      	lsrs	r4, r4, #24
 8000776:	002a      	movs	r2, r5
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	0e00      	lsrs	r0, r0, #24
 800077c:	0fc9      	lsrs	r1, r1, #31
 800077e:	46bc      	mov	ip, r7
 8000780:	428d      	cmp	r5, r1
 8000782:	d067      	beq.n	8000854 <__aeabi_fadd+0xf8>
 8000784:	1a22      	subs	r2, r4, r0
 8000786:	2a00      	cmp	r2, #0
 8000788:	dc00      	bgt.n	800078c <__aeabi_fadd+0x30>
 800078a:	e0a5      	b.n	80008d8 <__aeabi_fadd+0x17c>
 800078c:	2800      	cmp	r0, #0
 800078e:	d13a      	bne.n	8000806 <__aeabi_fadd+0xaa>
 8000790:	2f00      	cmp	r7, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x3a>
 8000794:	e093      	b.n	80008be <__aeabi_fadd+0x162>
 8000796:	1e51      	subs	r1, r2, #1
 8000798:	2900      	cmp	r1, #0
 800079a:	d000      	beq.n	800079e <__aeabi_fadd+0x42>
 800079c:	e0bc      	b.n	8000918 <__aeabi_fadd+0x1bc>
 800079e:	2401      	movs	r4, #1
 80007a0:	1bdb      	subs	r3, r3, r7
 80007a2:	015a      	lsls	r2, r3, #5
 80007a4:	d546      	bpl.n	8000834 <__aeabi_fadd+0xd8>
 80007a6:	019b      	lsls	r3, r3, #6
 80007a8:	099e      	lsrs	r6, r3, #6
 80007aa:	0030      	movs	r0, r6
 80007ac:	f002 fb96 	bl	8002edc <__clzsi2>
 80007b0:	3805      	subs	r0, #5
 80007b2:	4086      	lsls	r6, r0
 80007b4:	4284      	cmp	r4, r0
 80007b6:	dd00      	ble.n	80007ba <__aeabi_fadd+0x5e>
 80007b8:	e09d      	b.n	80008f6 <__aeabi_fadd+0x19a>
 80007ba:	1b04      	subs	r4, r0, r4
 80007bc:	0032      	movs	r2, r6
 80007be:	2020      	movs	r0, #32
 80007c0:	3401      	adds	r4, #1
 80007c2:	40e2      	lsrs	r2, r4
 80007c4:	1b04      	subs	r4, r0, r4
 80007c6:	40a6      	lsls	r6, r4
 80007c8:	0033      	movs	r3, r6
 80007ca:	1e5e      	subs	r6, r3, #1
 80007cc:	41b3      	sbcs	r3, r6
 80007ce:	2400      	movs	r4, #0
 80007d0:	4313      	orrs	r3, r2
 80007d2:	075a      	lsls	r2, r3, #29
 80007d4:	d004      	beq.n	80007e0 <__aeabi_fadd+0x84>
 80007d6:	220f      	movs	r2, #15
 80007d8:	401a      	ands	r2, r3
 80007da:	2a04      	cmp	r2, #4
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fadd+0x84>
 80007de:	3304      	adds	r3, #4
 80007e0:	015a      	lsls	r2, r3, #5
 80007e2:	d529      	bpl.n	8000838 <__aeabi_fadd+0xdc>
 80007e4:	3401      	adds	r4, #1
 80007e6:	2cff      	cmp	r4, #255	; 0xff
 80007e8:	d100      	bne.n	80007ec <__aeabi_fadd+0x90>
 80007ea:	e081      	b.n	80008f0 <__aeabi_fadd+0x194>
 80007ec:	002a      	movs	r2, r5
 80007ee:	019b      	lsls	r3, r3, #6
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	b2e4      	uxtb	r4, r4
 80007f4:	025b      	lsls	r3, r3, #9
 80007f6:	05e4      	lsls	r4, r4, #23
 80007f8:	0a58      	lsrs	r0, r3, #9
 80007fa:	07d2      	lsls	r2, r2, #31
 80007fc:	4320      	orrs	r0, r4
 80007fe:	4310      	orrs	r0, r2
 8000800:	bc04      	pop	{r2}
 8000802:	4690      	mov	r8, r2
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000806:	2cff      	cmp	r4, #255	; 0xff
 8000808:	d0e3      	beq.n	80007d2 <__aeabi_fadd+0x76>
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0038      	movs	r0, r7
 800080e:	04c9      	lsls	r1, r1, #19
 8000810:	4308      	orrs	r0, r1
 8000812:	4684      	mov	ip, r0
 8000814:	2a1b      	cmp	r2, #27
 8000816:	dd00      	ble.n	800081a <__aeabi_fadd+0xbe>
 8000818:	e082      	b.n	8000920 <__aeabi_fadd+0x1c4>
 800081a:	2020      	movs	r0, #32
 800081c:	4661      	mov	r1, ip
 800081e:	40d1      	lsrs	r1, r2
 8000820:	1a82      	subs	r2, r0, r2
 8000822:	4660      	mov	r0, ip
 8000824:	4090      	lsls	r0, r2
 8000826:	0002      	movs	r2, r0
 8000828:	1e50      	subs	r0, r2, #1
 800082a:	4182      	sbcs	r2, r0
 800082c:	430a      	orrs	r2, r1
 800082e:	1a9b      	subs	r3, r3, r2
 8000830:	015a      	lsls	r2, r3, #5
 8000832:	d4b8      	bmi.n	80007a6 <__aeabi_fadd+0x4a>
 8000834:	075a      	lsls	r2, r3, #29
 8000836:	d1ce      	bne.n	80007d6 <__aeabi_fadd+0x7a>
 8000838:	08de      	lsrs	r6, r3, #3
 800083a:	002a      	movs	r2, r5
 800083c:	2cff      	cmp	r4, #255	; 0xff
 800083e:	d13a      	bne.n	80008b6 <__aeabi_fadd+0x15a>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_fadd+0xea>
 8000844:	e0ae      	b.n	80009a4 <__aeabi_fadd+0x248>
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	03db      	lsls	r3, r3, #15
 800084a:	4333      	orrs	r3, r6
 800084c:	025b      	lsls	r3, r3, #9
 800084e:	0a5b      	lsrs	r3, r3, #9
 8000850:	24ff      	movs	r4, #255	; 0xff
 8000852:	e7cf      	b.n	80007f4 <__aeabi_fadd+0x98>
 8000854:	1a21      	subs	r1, r4, r0
 8000856:	2900      	cmp	r1, #0
 8000858:	dd52      	ble.n	8000900 <__aeabi_fadd+0x1a4>
 800085a:	2800      	cmp	r0, #0
 800085c:	d031      	beq.n	80008c2 <__aeabi_fadd+0x166>
 800085e:	2cff      	cmp	r4, #255	; 0xff
 8000860:	d0b7      	beq.n	80007d2 <__aeabi_fadd+0x76>
 8000862:	2080      	movs	r0, #128	; 0x80
 8000864:	003e      	movs	r6, r7
 8000866:	04c0      	lsls	r0, r0, #19
 8000868:	4306      	orrs	r6, r0
 800086a:	46b4      	mov	ip, r6
 800086c:	291b      	cmp	r1, #27
 800086e:	dd00      	ble.n	8000872 <__aeabi_fadd+0x116>
 8000870:	e0aa      	b.n	80009c8 <__aeabi_fadd+0x26c>
 8000872:	2620      	movs	r6, #32
 8000874:	4660      	mov	r0, ip
 8000876:	40c8      	lsrs	r0, r1
 8000878:	1a71      	subs	r1, r6, r1
 800087a:	4666      	mov	r6, ip
 800087c:	408e      	lsls	r6, r1
 800087e:	0031      	movs	r1, r6
 8000880:	1e4e      	subs	r6, r1, #1
 8000882:	41b1      	sbcs	r1, r6
 8000884:	4301      	orrs	r1, r0
 8000886:	185b      	adds	r3, r3, r1
 8000888:	0159      	lsls	r1, r3, #5
 800088a:	d5d3      	bpl.n	8000834 <__aeabi_fadd+0xd8>
 800088c:	3401      	adds	r4, #1
 800088e:	2cff      	cmp	r4, #255	; 0xff
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x138>
 8000892:	e087      	b.n	80009a4 <__aeabi_fadd+0x248>
 8000894:	2201      	movs	r2, #1
 8000896:	4978      	ldr	r1, [pc, #480]	; (8000a78 <__aeabi_fadd+0x31c>)
 8000898:	401a      	ands	r2, r3
 800089a:	085b      	lsrs	r3, r3, #1
 800089c:	400b      	ands	r3, r1
 800089e:	4313      	orrs	r3, r2
 80008a0:	e797      	b.n	80007d2 <__aeabi_fadd+0x76>
 80008a2:	2c00      	cmp	r4, #0
 80008a4:	d000      	beq.n	80008a8 <__aeabi_fadd+0x14c>
 80008a6:	e0a7      	b.n	80009f8 <__aeabi_fadd+0x29c>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d000      	beq.n	80008ae <__aeabi_fadd+0x152>
 80008ac:	e0b6      	b.n	8000a1c <__aeabi_fadd+0x2c0>
 80008ae:	1e3b      	subs	r3, r7, #0
 80008b0:	d162      	bne.n	8000978 <__aeabi_fadd+0x21c>
 80008b2:	2600      	movs	r6, #0
 80008b4:	2200      	movs	r2, #0
 80008b6:	0273      	lsls	r3, r6, #9
 80008b8:	0a5b      	lsrs	r3, r3, #9
 80008ba:	b2e4      	uxtb	r4, r4
 80008bc:	e79a      	b.n	80007f4 <__aeabi_fadd+0x98>
 80008be:	0014      	movs	r4, r2
 80008c0:	e787      	b.n	80007d2 <__aeabi_fadd+0x76>
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d04d      	beq.n	8000962 <__aeabi_fadd+0x206>
 80008c6:	1e48      	subs	r0, r1, #1
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d157      	bne.n	800097c <__aeabi_fadd+0x220>
 80008cc:	4463      	add	r3, ip
 80008ce:	2401      	movs	r4, #1
 80008d0:	015a      	lsls	r2, r3, #5
 80008d2:	d5af      	bpl.n	8000834 <__aeabi_fadd+0xd8>
 80008d4:	2402      	movs	r4, #2
 80008d6:	e7dd      	b.n	8000894 <__aeabi_fadd+0x138>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d124      	bne.n	8000926 <__aeabi_fadd+0x1ca>
 80008dc:	1c62      	adds	r2, r4, #1
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	2a01      	cmp	r2, #1
 80008e2:	ddde      	ble.n	80008a2 <__aeabi_fadd+0x146>
 80008e4:	1bde      	subs	r6, r3, r7
 80008e6:	0172      	lsls	r2, r6, #5
 80008e8:	d535      	bpl.n	8000956 <__aeabi_fadd+0x1fa>
 80008ea:	1afe      	subs	r6, r7, r3
 80008ec:	000d      	movs	r5, r1
 80008ee:	e75c      	b.n	80007aa <__aeabi_fadd+0x4e>
 80008f0:	002a      	movs	r2, r5
 80008f2:	2300      	movs	r3, #0
 80008f4:	e77e      	b.n	80007f4 <__aeabi_fadd+0x98>
 80008f6:	0033      	movs	r3, r6
 80008f8:	4a60      	ldr	r2, [pc, #384]	; (8000a7c <__aeabi_fadd+0x320>)
 80008fa:	1a24      	subs	r4, r4, r0
 80008fc:	4013      	ands	r3, r2
 80008fe:	e768      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000900:	2900      	cmp	r1, #0
 8000902:	d163      	bne.n	80009cc <__aeabi_fadd+0x270>
 8000904:	1c61      	adds	r1, r4, #1
 8000906:	b2c8      	uxtb	r0, r1
 8000908:	2801      	cmp	r0, #1
 800090a:	dd4e      	ble.n	80009aa <__aeabi_fadd+0x24e>
 800090c:	29ff      	cmp	r1, #255	; 0xff
 800090e:	d049      	beq.n	80009a4 <__aeabi_fadd+0x248>
 8000910:	4463      	add	r3, ip
 8000912:	085b      	lsrs	r3, r3, #1
 8000914:	000c      	movs	r4, r1
 8000916:	e75c      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000918:	2aff      	cmp	r2, #255	; 0xff
 800091a:	d041      	beq.n	80009a0 <__aeabi_fadd+0x244>
 800091c:	000a      	movs	r2, r1
 800091e:	e779      	b.n	8000814 <__aeabi_fadd+0xb8>
 8000920:	2201      	movs	r2, #1
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	e784      	b.n	8000830 <__aeabi_fadd+0xd4>
 8000926:	2c00      	cmp	r4, #0
 8000928:	d01d      	beq.n	8000966 <__aeabi_fadd+0x20a>
 800092a:	28ff      	cmp	r0, #255	; 0xff
 800092c:	d022      	beq.n	8000974 <__aeabi_fadd+0x218>
 800092e:	2480      	movs	r4, #128	; 0x80
 8000930:	04e4      	lsls	r4, r4, #19
 8000932:	4252      	negs	r2, r2
 8000934:	4323      	orrs	r3, r4
 8000936:	2a1b      	cmp	r2, #27
 8000938:	dd00      	ble.n	800093c <__aeabi_fadd+0x1e0>
 800093a:	e08a      	b.n	8000a52 <__aeabi_fadd+0x2f6>
 800093c:	001c      	movs	r4, r3
 800093e:	2520      	movs	r5, #32
 8000940:	40d4      	lsrs	r4, r2
 8000942:	1aaa      	subs	r2, r5, r2
 8000944:	4093      	lsls	r3, r2
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	4193      	sbcs	r3, r2
 800094a:	4323      	orrs	r3, r4
 800094c:	4662      	mov	r2, ip
 800094e:	0004      	movs	r4, r0
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	000d      	movs	r5, r1
 8000954:	e725      	b.n	80007a2 <__aeabi_fadd+0x46>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d000      	beq.n	800095c <__aeabi_fadd+0x200>
 800095a:	e726      	b.n	80007aa <__aeabi_fadd+0x4e>
 800095c:	2200      	movs	r2, #0
 800095e:	2400      	movs	r4, #0
 8000960:	e7a9      	b.n	80008b6 <__aeabi_fadd+0x15a>
 8000962:	000c      	movs	r4, r1
 8000964:	e735      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d04d      	beq.n	8000a06 <__aeabi_fadd+0x2aa>
 800096a:	43d2      	mvns	r2, r2
 800096c:	2a00      	cmp	r2, #0
 800096e:	d0ed      	beq.n	800094c <__aeabi_fadd+0x1f0>
 8000970:	28ff      	cmp	r0, #255	; 0xff
 8000972:	d1e0      	bne.n	8000936 <__aeabi_fadd+0x1da>
 8000974:	4663      	mov	r3, ip
 8000976:	24ff      	movs	r4, #255	; 0xff
 8000978:	000d      	movs	r5, r1
 800097a:	e72a      	b.n	80007d2 <__aeabi_fadd+0x76>
 800097c:	29ff      	cmp	r1, #255	; 0xff
 800097e:	d00f      	beq.n	80009a0 <__aeabi_fadd+0x244>
 8000980:	0001      	movs	r1, r0
 8000982:	e773      	b.n	800086c <__aeabi_fadd+0x110>
 8000984:	2b00      	cmp	r3, #0
 8000986:	d061      	beq.n	8000a4c <__aeabi_fadd+0x2f0>
 8000988:	24ff      	movs	r4, #255	; 0xff
 800098a:	2f00      	cmp	r7, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fadd+0x234>
 800098e:	e720      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	4641      	mov	r1, r8
 8000994:	03d2      	lsls	r2, r2, #15
 8000996:	4211      	tst	r1, r2
 8000998:	d002      	beq.n	80009a0 <__aeabi_fadd+0x244>
 800099a:	4216      	tst	r6, r2
 800099c:	d100      	bne.n	80009a0 <__aeabi_fadd+0x244>
 800099e:	003b      	movs	r3, r7
 80009a0:	24ff      	movs	r4, #255	; 0xff
 80009a2:	e716      	b.n	80007d2 <__aeabi_fadd+0x76>
 80009a4:	24ff      	movs	r4, #255	; 0xff
 80009a6:	2300      	movs	r3, #0
 80009a8:	e724      	b.n	80007f4 <__aeabi_fadd+0x98>
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d1ea      	bne.n	8000984 <__aeabi_fadd+0x228>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d058      	beq.n	8000a64 <__aeabi_fadd+0x308>
 80009b2:	2f00      	cmp	r7, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x25c>
 80009b6:	e70c      	b.n	80007d2 <__aeabi_fadd+0x76>
 80009b8:	4463      	add	r3, ip
 80009ba:	015a      	lsls	r2, r3, #5
 80009bc:	d400      	bmi.n	80009c0 <__aeabi_fadd+0x264>
 80009be:	e739      	b.n	8000834 <__aeabi_fadd+0xd8>
 80009c0:	4a2e      	ldr	r2, [pc, #184]	; (8000a7c <__aeabi_fadd+0x320>)
 80009c2:	000c      	movs	r4, r1
 80009c4:	4013      	ands	r3, r2
 80009c6:	e704      	b.n	80007d2 <__aeabi_fadd+0x76>
 80009c8:	2101      	movs	r1, #1
 80009ca:	e75c      	b.n	8000886 <__aeabi_fadd+0x12a>
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	d11e      	bne.n	8000a0e <__aeabi_fadd+0x2b2>
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d040      	beq.n	8000a56 <__aeabi_fadd+0x2fa>
 80009d4:	43c9      	mvns	r1, r1
 80009d6:	2900      	cmp	r1, #0
 80009d8:	d00b      	beq.n	80009f2 <__aeabi_fadd+0x296>
 80009da:	28ff      	cmp	r0, #255	; 0xff
 80009dc:	d036      	beq.n	8000a4c <__aeabi_fadd+0x2f0>
 80009de:	291b      	cmp	r1, #27
 80009e0:	dc47      	bgt.n	8000a72 <__aeabi_fadd+0x316>
 80009e2:	001c      	movs	r4, r3
 80009e4:	2620      	movs	r6, #32
 80009e6:	40cc      	lsrs	r4, r1
 80009e8:	1a71      	subs	r1, r6, r1
 80009ea:	408b      	lsls	r3, r1
 80009ec:	1e59      	subs	r1, r3, #1
 80009ee:	418b      	sbcs	r3, r1
 80009f0:	4323      	orrs	r3, r4
 80009f2:	4463      	add	r3, ip
 80009f4:	0004      	movs	r4, r0
 80009f6:	e747      	b.n	8000888 <__aeabi_fadd+0x12c>
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d118      	bne.n	8000a2e <__aeabi_fadd+0x2d2>
 80009fc:	1e3b      	subs	r3, r7, #0
 80009fe:	d02d      	beq.n	8000a5c <__aeabi_fadd+0x300>
 8000a00:	000d      	movs	r5, r1
 8000a02:	24ff      	movs	r4, #255	; 0xff
 8000a04:	e6e5      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a06:	003b      	movs	r3, r7
 8000a08:	0004      	movs	r4, r0
 8000a0a:	000d      	movs	r5, r1
 8000a0c:	e6e1      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a0e:	28ff      	cmp	r0, #255	; 0xff
 8000a10:	d01c      	beq.n	8000a4c <__aeabi_fadd+0x2f0>
 8000a12:	2480      	movs	r4, #128	; 0x80
 8000a14:	04e4      	lsls	r4, r4, #19
 8000a16:	4249      	negs	r1, r1
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	e7e0      	b.n	80009de <__aeabi_fadd+0x282>
 8000a1c:	2f00      	cmp	r7, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_fadd+0x2c6>
 8000a20:	e6d7      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a22:	1bde      	subs	r6, r3, r7
 8000a24:	0172      	lsls	r2, r6, #5
 8000a26:	d51f      	bpl.n	8000a68 <__aeabi_fadd+0x30c>
 8000a28:	1afb      	subs	r3, r7, r3
 8000a2a:	000d      	movs	r5, r1
 8000a2c:	e6d1      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a2e:	24ff      	movs	r4, #255	; 0xff
 8000a30:	2f00      	cmp	r7, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fadd+0x2da>
 8000a34:	e6cd      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	4640      	mov	r0, r8
 8000a3a:	03d2      	lsls	r2, r2, #15
 8000a3c:	4210      	tst	r0, r2
 8000a3e:	d0af      	beq.n	80009a0 <__aeabi_fadd+0x244>
 8000a40:	4216      	tst	r6, r2
 8000a42:	d1ad      	bne.n	80009a0 <__aeabi_fadd+0x244>
 8000a44:	003b      	movs	r3, r7
 8000a46:	000d      	movs	r5, r1
 8000a48:	24ff      	movs	r4, #255	; 0xff
 8000a4a:	e6c2      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a4c:	4663      	mov	r3, ip
 8000a4e:	24ff      	movs	r4, #255	; 0xff
 8000a50:	e6bf      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e77a      	b.n	800094c <__aeabi_fadd+0x1f0>
 8000a56:	003b      	movs	r3, r7
 8000a58:	0004      	movs	r4, r0
 8000a5a:	e6ba      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a5c:	2680      	movs	r6, #128	; 0x80
 8000a5e:	2200      	movs	r2, #0
 8000a60:	03f6      	lsls	r6, r6, #15
 8000a62:	e6f0      	b.n	8000846 <__aeabi_fadd+0xea>
 8000a64:	003b      	movs	r3, r7
 8000a66:	e6b4      	b.n	80007d2 <__aeabi_fadd+0x76>
 8000a68:	1e33      	subs	r3, r6, #0
 8000a6a:	d000      	beq.n	8000a6e <__aeabi_fadd+0x312>
 8000a6c:	e6e2      	b.n	8000834 <__aeabi_fadd+0xd8>
 8000a6e:	2200      	movs	r2, #0
 8000a70:	e721      	b.n	80008b6 <__aeabi_fadd+0x15a>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e7bd      	b.n	80009f2 <__aeabi_fadd+0x296>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	7dffffff 	.word	0x7dffffff
 8000a7c:	fbffffff 	.word	0xfbffffff

08000a80 <__eqsf2>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	0042      	lsls	r2, r0, #1
 8000a84:	0245      	lsls	r5, r0, #9
 8000a86:	024e      	lsls	r6, r1, #9
 8000a88:	004c      	lsls	r4, r1, #1
 8000a8a:	0fc3      	lsrs	r3, r0, #31
 8000a8c:	0a6d      	lsrs	r5, r5, #9
 8000a8e:	0e12      	lsrs	r2, r2, #24
 8000a90:	0a76      	lsrs	r6, r6, #9
 8000a92:	0e24      	lsrs	r4, r4, #24
 8000a94:	0fc9      	lsrs	r1, r1, #31
 8000a96:	2001      	movs	r0, #1
 8000a98:	2aff      	cmp	r2, #255	; 0xff
 8000a9a:	d006      	beq.n	8000aaa <__eqsf2+0x2a>
 8000a9c:	2cff      	cmp	r4, #255	; 0xff
 8000a9e:	d003      	beq.n	8000aa8 <__eqsf2+0x28>
 8000aa0:	42a2      	cmp	r2, r4
 8000aa2:	d101      	bne.n	8000aa8 <__eqsf2+0x28>
 8000aa4:	42b5      	cmp	r5, r6
 8000aa6:	d006      	beq.n	8000ab6 <__eqsf2+0x36>
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	d1fc      	bne.n	8000aa8 <__eqsf2+0x28>
 8000aae:	2cff      	cmp	r4, #255	; 0xff
 8000ab0:	d1fa      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d1f8      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d006      	beq.n	8000ac8 <__eqsf2+0x48>
 8000aba:	2001      	movs	r0, #1
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d1f3      	bne.n	8000aa8 <__eqsf2+0x28>
 8000ac0:	0028      	movs	r0, r5
 8000ac2:	1e45      	subs	r5, r0, #1
 8000ac4:	41a8      	sbcs	r0, r5
 8000ac6:	e7ef      	b.n	8000aa8 <__eqsf2+0x28>
 8000ac8:	2000      	movs	r0, #0
 8000aca:	e7ed      	b.n	8000aa8 <__eqsf2+0x28>

08000acc <__gesf2>:
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	0245      	lsls	r5, r0, #9
 8000ad2:	024c      	lsls	r4, r1, #9
 8000ad4:	0fc3      	lsrs	r3, r0, #31
 8000ad6:	0048      	lsls	r0, r1, #1
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	0e12      	lsrs	r2, r2, #24
 8000adc:	0a64      	lsrs	r4, r4, #9
 8000ade:	0e00      	lsrs	r0, r0, #24
 8000ae0:	0fc9      	lsrs	r1, r1, #31
 8000ae2:	2aff      	cmp	r2, #255	; 0xff
 8000ae4:	d01e      	beq.n	8000b24 <__gesf2+0x58>
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d021      	beq.n	8000b2e <__gesf2+0x62>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d10a      	bne.n	8000b04 <__gesf2+0x38>
 8000aee:	426e      	negs	r6, r5
 8000af0:	416e      	adcs	r6, r5
 8000af2:	b2f6      	uxtb	r6, r6
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d10f      	bne.n	8000b18 <__gesf2+0x4c>
 8000af8:	2c00      	cmp	r4, #0
 8000afa:	d10d      	bne.n	8000b18 <__gesf2+0x4c>
 8000afc:	2000      	movs	r0, #0
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d009      	beq.n	8000b16 <__gesf2+0x4a>
 8000b02:	e005      	b.n	8000b10 <__gesf2+0x44>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d101      	bne.n	8000b0c <__gesf2+0x40>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d001      	beq.n	8000b10 <__gesf2+0x44>
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d011      	beq.n	8000b34 <__gesf2+0x68>
 8000b10:	2101      	movs	r1, #1
 8000b12:	4258      	negs	r0, r3
 8000b14:	4308      	orrs	r0, r1
 8000b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b18:	2e00      	cmp	r6, #0
 8000b1a:	d0f7      	beq.n	8000b0c <__gesf2+0x40>
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	3901      	subs	r1, #1
 8000b20:	4308      	orrs	r0, r1
 8000b22:	e7f8      	b.n	8000b16 <__gesf2+0x4a>
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d0de      	beq.n	8000ae6 <__gesf2+0x1a>
 8000b28:	2002      	movs	r0, #2
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	e7f3      	b.n	8000b16 <__gesf2+0x4a>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d0db      	beq.n	8000aea <__gesf2+0x1e>
 8000b32:	e7f9      	b.n	8000b28 <__gesf2+0x5c>
 8000b34:	4282      	cmp	r2, r0
 8000b36:	dceb      	bgt.n	8000b10 <__gesf2+0x44>
 8000b38:	db04      	blt.n	8000b44 <__gesf2+0x78>
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	d8e8      	bhi.n	8000b10 <__gesf2+0x44>
 8000b3e:	2000      	movs	r0, #0
 8000b40:	42a5      	cmp	r5, r4
 8000b42:	d2e8      	bcs.n	8000b16 <__gesf2+0x4a>
 8000b44:	2101      	movs	r1, #1
 8000b46:	1e58      	subs	r0, r3, #1
 8000b48:	4308      	orrs	r0, r1
 8000b4a:	e7e4      	b.n	8000b16 <__gesf2+0x4a>

08000b4c <__lesf2>:
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	0042      	lsls	r2, r0, #1
 8000b50:	024d      	lsls	r5, r1, #9
 8000b52:	004c      	lsls	r4, r1, #1
 8000b54:	0246      	lsls	r6, r0, #9
 8000b56:	0a76      	lsrs	r6, r6, #9
 8000b58:	0e12      	lsrs	r2, r2, #24
 8000b5a:	0fc3      	lsrs	r3, r0, #31
 8000b5c:	0a6d      	lsrs	r5, r5, #9
 8000b5e:	0e24      	lsrs	r4, r4, #24
 8000b60:	0fc9      	lsrs	r1, r1, #31
 8000b62:	2aff      	cmp	r2, #255	; 0xff
 8000b64:	d016      	beq.n	8000b94 <__lesf2+0x48>
 8000b66:	2cff      	cmp	r4, #255	; 0xff
 8000b68:	d018      	beq.n	8000b9c <__lesf2+0x50>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d10a      	bne.n	8000b84 <__lesf2+0x38>
 8000b6e:	4270      	negs	r0, r6
 8000b70:	4170      	adcs	r0, r6
 8000b72:	b2c0      	uxtb	r0, r0
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d015      	beq.n	8000ba4 <__lesf2+0x58>
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d005      	beq.n	8000b88 <__lesf2+0x3c>
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	3901      	subs	r1, #1
 8000b80:	4308      	orrs	r0, r1
 8000b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b84:	2c00      	cmp	r4, #0
 8000b86:	d013      	beq.n	8000bb0 <__lesf2+0x64>
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d014      	beq.n	8000bb6 <__lesf2+0x6a>
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	425b      	negs	r3, r3
 8000b90:	4318      	orrs	r0, r3
 8000b92:	e7f6      	b.n	8000b82 <__lesf2+0x36>
 8000b94:	2002      	movs	r0, #2
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d1f3      	bne.n	8000b82 <__lesf2+0x36>
 8000b9a:	e7e4      	b.n	8000b66 <__lesf2+0x1a>
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d1ef      	bne.n	8000b82 <__lesf2+0x36>
 8000ba2:	e7e2      	b.n	8000b6a <__lesf2+0x1e>
 8000ba4:	2d00      	cmp	r5, #0
 8000ba6:	d1e7      	bne.n	8000b78 <__lesf2+0x2c>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d0e9      	beq.n	8000b82 <__lesf2+0x36>
 8000bae:	e7ed      	b.n	8000b8c <__lesf2+0x40>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d1e9      	bne.n	8000b88 <__lesf2+0x3c>
 8000bb4:	e7ea      	b.n	8000b8c <__lesf2+0x40>
 8000bb6:	42a2      	cmp	r2, r4
 8000bb8:	dc06      	bgt.n	8000bc8 <__lesf2+0x7c>
 8000bba:	dbdf      	blt.n	8000b7c <__lesf2+0x30>
 8000bbc:	42ae      	cmp	r6, r5
 8000bbe:	d803      	bhi.n	8000bc8 <__lesf2+0x7c>
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	42ae      	cmp	r6, r5
 8000bc4:	d3da      	bcc.n	8000b7c <__lesf2+0x30>
 8000bc6:	e7dc      	b.n	8000b82 <__lesf2+0x36>
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4249      	negs	r1, r1
 8000bcc:	4308      	orrs	r0, r1
 8000bce:	e7d8      	b.n	8000b82 <__lesf2+0x36>

08000bd0 <__aeabi_fmul>:
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	4657      	mov	r7, sl
 8000bd4:	464e      	mov	r6, r9
 8000bd6:	4645      	mov	r5, r8
 8000bd8:	46de      	mov	lr, fp
 8000bda:	b5e0      	push	{r5, r6, r7, lr}
 8000bdc:	0247      	lsls	r7, r0, #9
 8000bde:	0046      	lsls	r6, r0, #1
 8000be0:	4688      	mov	r8, r1
 8000be2:	0a7f      	lsrs	r7, r7, #9
 8000be4:	0e36      	lsrs	r6, r6, #24
 8000be6:	0fc4      	lsrs	r4, r0, #31
 8000be8:	2e00      	cmp	r6, #0
 8000bea:	d047      	beq.n	8000c7c <__aeabi_fmul+0xac>
 8000bec:	2eff      	cmp	r6, #255	; 0xff
 8000bee:	d024      	beq.n	8000c3a <__aeabi_fmul+0x6a>
 8000bf0:	00fb      	lsls	r3, r7, #3
 8000bf2:	2780      	movs	r7, #128	; 0x80
 8000bf4:	04ff      	lsls	r7, r7, #19
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	4699      	mov	r9, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	3e7f      	subs	r6, #127	; 0x7f
 8000c00:	4643      	mov	r3, r8
 8000c02:	025d      	lsls	r5, r3, #9
 8000c04:	0058      	lsls	r0, r3, #1
 8000c06:	0fdb      	lsrs	r3, r3, #31
 8000c08:	0a6d      	lsrs	r5, r5, #9
 8000c0a:	0e00      	lsrs	r0, r0, #24
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	d043      	beq.n	8000c98 <__aeabi_fmul+0xc8>
 8000c10:	28ff      	cmp	r0, #255	; 0xff
 8000c12:	d03b      	beq.n	8000c8c <__aeabi_fmul+0xbc>
 8000c14:	00eb      	lsls	r3, r5, #3
 8000c16:	2580      	movs	r5, #128	; 0x80
 8000c18:	2200      	movs	r2, #0
 8000c1a:	04ed      	lsls	r5, r5, #19
 8000c1c:	431d      	orrs	r5, r3
 8000c1e:	387f      	subs	r0, #127	; 0x7f
 8000c20:	1836      	adds	r6, r6, r0
 8000c22:	1c73      	adds	r3, r6, #1
 8000c24:	4641      	mov	r1, r8
 8000c26:	469b      	mov	fp, r3
 8000c28:	464b      	mov	r3, r9
 8000c2a:	4061      	eors	r1, r4
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	d864      	bhi.n	8000cfc <__aeabi_fmul+0x12c>
 8000c32:	4875      	ldr	r0, [pc, #468]	; (8000e08 <__aeabi_fmul+0x238>)
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	58c3      	ldr	r3, [r0, r3]
 8000c38:	469f      	mov	pc, r3
 8000c3a:	2f00      	cmp	r7, #0
 8000c3c:	d142      	bne.n	8000cc4 <__aeabi_fmul+0xf4>
 8000c3e:	2308      	movs	r3, #8
 8000c40:	4699      	mov	r9, r3
 8000c42:	3b06      	subs	r3, #6
 8000c44:	26ff      	movs	r6, #255	; 0xff
 8000c46:	469a      	mov	sl, r3
 8000c48:	e7da      	b.n	8000c00 <__aeabi_fmul+0x30>
 8000c4a:	4641      	mov	r1, r8
 8000c4c:	2a02      	cmp	r2, #2
 8000c4e:	d028      	beq.n	8000ca2 <__aeabi_fmul+0xd2>
 8000c50:	2a03      	cmp	r2, #3
 8000c52:	d100      	bne.n	8000c56 <__aeabi_fmul+0x86>
 8000c54:	e0ce      	b.n	8000df4 <__aeabi_fmul+0x224>
 8000c56:	2a01      	cmp	r2, #1
 8000c58:	d000      	beq.n	8000c5c <__aeabi_fmul+0x8c>
 8000c5a:	e0ac      	b.n	8000db6 <__aeabi_fmul+0x1e6>
 8000c5c:	4011      	ands	r1, r2
 8000c5e:	2000      	movs	r0, #0
 8000c60:	2200      	movs	r2, #0
 8000c62:	b2cc      	uxtb	r4, r1
 8000c64:	0240      	lsls	r0, r0, #9
 8000c66:	05d2      	lsls	r2, r2, #23
 8000c68:	0a40      	lsrs	r0, r0, #9
 8000c6a:	07e4      	lsls	r4, r4, #31
 8000c6c:	4310      	orrs	r0, r2
 8000c6e:	4320      	orrs	r0, r4
 8000c70:	bc3c      	pop	{r2, r3, r4, r5}
 8000c72:	4690      	mov	r8, r2
 8000c74:	4699      	mov	r9, r3
 8000c76:	46a2      	mov	sl, r4
 8000c78:	46ab      	mov	fp, r5
 8000c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c7c:	2f00      	cmp	r7, #0
 8000c7e:	d115      	bne.n	8000cac <__aeabi_fmul+0xdc>
 8000c80:	2304      	movs	r3, #4
 8000c82:	4699      	mov	r9, r3
 8000c84:	3b03      	subs	r3, #3
 8000c86:	2600      	movs	r6, #0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	e7b9      	b.n	8000c00 <__aeabi_fmul+0x30>
 8000c8c:	20ff      	movs	r0, #255	; 0xff
 8000c8e:	2202      	movs	r2, #2
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	d0c5      	beq.n	8000c20 <__aeabi_fmul+0x50>
 8000c94:	2203      	movs	r2, #3
 8000c96:	e7c3      	b.n	8000c20 <__aeabi_fmul+0x50>
 8000c98:	2d00      	cmp	r5, #0
 8000c9a:	d119      	bne.n	8000cd0 <__aeabi_fmul+0x100>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	e7be      	b.n	8000c20 <__aeabi_fmul+0x50>
 8000ca2:	2401      	movs	r4, #1
 8000ca4:	22ff      	movs	r2, #255	; 0xff
 8000ca6:	400c      	ands	r4, r1
 8000ca8:	2000      	movs	r0, #0
 8000caa:	e7db      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000cac:	0038      	movs	r0, r7
 8000cae:	f002 f915 	bl	8002edc <__clzsi2>
 8000cb2:	2676      	movs	r6, #118	; 0x76
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409f      	lsls	r7, r3
 8000cb8:	2300      	movs	r3, #0
 8000cba:	4276      	negs	r6, r6
 8000cbc:	1a36      	subs	r6, r6, r0
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	e79d      	b.n	8000c00 <__aeabi_fmul+0x30>
 8000cc4:	230c      	movs	r3, #12
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	3b09      	subs	r3, #9
 8000cca:	26ff      	movs	r6, #255	; 0xff
 8000ccc:	469a      	mov	sl, r3
 8000cce:	e797      	b.n	8000c00 <__aeabi_fmul+0x30>
 8000cd0:	0028      	movs	r0, r5
 8000cd2:	f002 f903 	bl	8002edc <__clzsi2>
 8000cd6:	1f43      	subs	r3, r0, #5
 8000cd8:	409d      	lsls	r5, r3
 8000cda:	2376      	movs	r3, #118	; 0x76
 8000cdc:	425b      	negs	r3, r3
 8000cde:	1a18      	subs	r0, r3, r0
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	e79d      	b.n	8000c20 <__aeabi_fmul+0x50>
 8000ce4:	2080      	movs	r0, #128	; 0x80
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	03c0      	lsls	r0, r0, #15
 8000cea:	22ff      	movs	r2, #255	; 0xff
 8000cec:	e7ba      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000cee:	003d      	movs	r5, r7
 8000cf0:	4652      	mov	r2, sl
 8000cf2:	e7ab      	b.n	8000c4c <__aeabi_fmul+0x7c>
 8000cf4:	003d      	movs	r5, r7
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	4652      	mov	r2, sl
 8000cfa:	e7a7      	b.n	8000c4c <__aeabi_fmul+0x7c>
 8000cfc:	0c3b      	lsrs	r3, r7, #16
 8000cfe:	469c      	mov	ip, r3
 8000d00:	042a      	lsls	r2, r5, #16
 8000d02:	0c12      	lsrs	r2, r2, #16
 8000d04:	0c2b      	lsrs	r3, r5, #16
 8000d06:	0014      	movs	r4, r2
 8000d08:	4660      	mov	r0, ip
 8000d0a:	4665      	mov	r5, ip
 8000d0c:	043f      	lsls	r7, r7, #16
 8000d0e:	0c3f      	lsrs	r7, r7, #16
 8000d10:	437c      	muls	r4, r7
 8000d12:	4342      	muls	r2, r0
 8000d14:	435d      	muls	r5, r3
 8000d16:	437b      	muls	r3, r7
 8000d18:	0c27      	lsrs	r7, r4, #16
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	18ff      	adds	r7, r7, r3
 8000d1e:	42ba      	cmp	r2, r7
 8000d20:	d903      	bls.n	8000d2a <__aeabi_fmul+0x15a>
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	025b      	lsls	r3, r3, #9
 8000d26:	469c      	mov	ip, r3
 8000d28:	4465      	add	r5, ip
 8000d2a:	0424      	lsls	r4, r4, #16
 8000d2c:	043a      	lsls	r2, r7, #16
 8000d2e:	0c24      	lsrs	r4, r4, #16
 8000d30:	1912      	adds	r2, r2, r4
 8000d32:	0193      	lsls	r3, r2, #6
 8000d34:	1e5c      	subs	r4, r3, #1
 8000d36:	41a3      	sbcs	r3, r4
 8000d38:	0c3f      	lsrs	r7, r7, #16
 8000d3a:	0e92      	lsrs	r2, r2, #26
 8000d3c:	197d      	adds	r5, r7, r5
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	01ad      	lsls	r5, r5, #6
 8000d42:	4315      	orrs	r5, r2
 8000d44:	012b      	lsls	r3, r5, #4
 8000d46:	d504      	bpl.n	8000d52 <__aeabi_fmul+0x182>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	465e      	mov	r6, fp
 8000d4c:	086a      	lsrs	r2, r5, #1
 8000d4e:	401d      	ands	r5, r3
 8000d50:	4315      	orrs	r5, r2
 8000d52:	0032      	movs	r2, r6
 8000d54:	327f      	adds	r2, #127	; 0x7f
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	dd25      	ble.n	8000da6 <__aeabi_fmul+0x1d6>
 8000d5a:	076b      	lsls	r3, r5, #29
 8000d5c:	d004      	beq.n	8000d68 <__aeabi_fmul+0x198>
 8000d5e:	230f      	movs	r3, #15
 8000d60:	402b      	ands	r3, r5
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d000      	beq.n	8000d68 <__aeabi_fmul+0x198>
 8000d66:	3504      	adds	r5, #4
 8000d68:	012b      	lsls	r3, r5, #4
 8000d6a:	d503      	bpl.n	8000d74 <__aeabi_fmul+0x1a4>
 8000d6c:	0032      	movs	r2, r6
 8000d6e:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <__aeabi_fmul+0x23c>)
 8000d70:	3280      	adds	r2, #128	; 0x80
 8000d72:	401d      	ands	r5, r3
 8000d74:	2afe      	cmp	r2, #254	; 0xfe
 8000d76:	dc94      	bgt.n	8000ca2 <__aeabi_fmul+0xd2>
 8000d78:	2401      	movs	r4, #1
 8000d7a:	01a8      	lsls	r0, r5, #6
 8000d7c:	0a40      	lsrs	r0, r0, #9
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	400c      	ands	r4, r1
 8000d82:	e76f      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000d84:	2080      	movs	r0, #128	; 0x80
 8000d86:	03c0      	lsls	r0, r0, #15
 8000d88:	4207      	tst	r7, r0
 8000d8a:	d007      	beq.n	8000d9c <__aeabi_fmul+0x1cc>
 8000d8c:	4205      	tst	r5, r0
 8000d8e:	d105      	bne.n	8000d9c <__aeabi_fmul+0x1cc>
 8000d90:	4328      	orrs	r0, r5
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	0a40      	lsrs	r0, r0, #9
 8000d96:	4644      	mov	r4, r8
 8000d98:	22ff      	movs	r2, #255	; 0xff
 8000d9a:	e763      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000d9c:	4338      	orrs	r0, r7
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	0a40      	lsrs	r0, r0, #9
 8000da2:	22ff      	movs	r2, #255	; 0xff
 8000da4:	e75e      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000da6:	2401      	movs	r4, #1
 8000da8:	1aa3      	subs	r3, r4, r2
 8000daa:	2b1b      	cmp	r3, #27
 8000dac:	dd05      	ble.n	8000dba <__aeabi_fmul+0x1ea>
 8000dae:	400c      	ands	r4, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	2000      	movs	r0, #0
 8000db4:	e756      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000db6:	465e      	mov	r6, fp
 8000db8:	e7cb      	b.n	8000d52 <__aeabi_fmul+0x182>
 8000dba:	002a      	movs	r2, r5
 8000dbc:	2020      	movs	r0, #32
 8000dbe:	40da      	lsrs	r2, r3
 8000dc0:	1ac3      	subs	r3, r0, r3
 8000dc2:	409d      	lsls	r5, r3
 8000dc4:	002b      	movs	r3, r5
 8000dc6:	1e5d      	subs	r5, r3, #1
 8000dc8:	41ab      	sbcs	r3, r5
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	075a      	lsls	r2, r3, #29
 8000dce:	d004      	beq.n	8000dda <__aeabi_fmul+0x20a>
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	2a04      	cmp	r2, #4
 8000dd6:	d000      	beq.n	8000dda <__aeabi_fmul+0x20a>
 8000dd8:	3304      	adds	r3, #4
 8000dda:	015a      	lsls	r2, r3, #5
 8000ddc:	d504      	bpl.n	8000de8 <__aeabi_fmul+0x218>
 8000dde:	2401      	movs	r4, #1
 8000de0:	2201      	movs	r2, #1
 8000de2:	400c      	ands	r4, r1
 8000de4:	2000      	movs	r0, #0
 8000de6:	e73d      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000de8:	2401      	movs	r4, #1
 8000dea:	019b      	lsls	r3, r3, #6
 8000dec:	0a58      	lsrs	r0, r3, #9
 8000dee:	400c      	ands	r4, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	e737      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000df4:	2080      	movs	r0, #128	; 0x80
 8000df6:	2401      	movs	r4, #1
 8000df8:	03c0      	lsls	r0, r0, #15
 8000dfa:	4328      	orrs	r0, r5
 8000dfc:	0240      	lsls	r0, r0, #9
 8000dfe:	0a40      	lsrs	r0, r0, #9
 8000e00:	400c      	ands	r4, r1
 8000e02:	22ff      	movs	r2, #255	; 0xff
 8000e04:	e72e      	b.n	8000c64 <__aeabi_fmul+0x94>
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	0800a300 	.word	0x0800a300
 8000e0c:	f7ffffff 	.word	0xf7ffffff

08000e10 <__aeabi_fsub>:
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	464f      	mov	r7, r9
 8000e14:	46d6      	mov	lr, sl
 8000e16:	4646      	mov	r6, r8
 8000e18:	0044      	lsls	r4, r0, #1
 8000e1a:	b5c0      	push	{r6, r7, lr}
 8000e1c:	0fc2      	lsrs	r2, r0, #31
 8000e1e:	0247      	lsls	r7, r0, #9
 8000e20:	0248      	lsls	r0, r1, #9
 8000e22:	0a40      	lsrs	r0, r0, #9
 8000e24:	4684      	mov	ip, r0
 8000e26:	4666      	mov	r6, ip
 8000e28:	0a7b      	lsrs	r3, r7, #9
 8000e2a:	0048      	lsls	r0, r1, #1
 8000e2c:	0fc9      	lsrs	r1, r1, #31
 8000e2e:	469a      	mov	sl, r3
 8000e30:	0e24      	lsrs	r4, r4, #24
 8000e32:	0015      	movs	r5, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	0e00      	lsrs	r0, r0, #24
 8000e38:	4689      	mov	r9, r1
 8000e3a:	00f6      	lsls	r6, r6, #3
 8000e3c:	28ff      	cmp	r0, #255	; 0xff
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_fsub+0x32>
 8000e40:	e08f      	b.n	8000f62 <__aeabi_fsub+0x152>
 8000e42:	2101      	movs	r1, #1
 8000e44:	464f      	mov	r7, r9
 8000e46:	404f      	eors	r7, r1
 8000e48:	0039      	movs	r1, r7
 8000e4a:	4291      	cmp	r1, r2
 8000e4c:	d066      	beq.n	8000f1c <__aeabi_fsub+0x10c>
 8000e4e:	1a22      	subs	r2, r4, r0
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	dc00      	bgt.n	8000e56 <__aeabi_fsub+0x46>
 8000e54:	e09d      	b.n	8000f92 <__aeabi_fsub+0x182>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d13d      	bne.n	8000ed6 <__aeabi_fsub+0xc6>
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_fsub+0x50>
 8000e5e:	e08b      	b.n	8000f78 <__aeabi_fsub+0x168>
 8000e60:	1e51      	subs	r1, r2, #1
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fsub+0x58>
 8000e66:	e0b5      	b.n	8000fd4 <__aeabi_fsub+0x1c4>
 8000e68:	2401      	movs	r4, #1
 8000e6a:	1b9b      	subs	r3, r3, r6
 8000e6c:	015a      	lsls	r2, r3, #5
 8000e6e:	d544      	bpl.n	8000efa <__aeabi_fsub+0xea>
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	099f      	lsrs	r7, r3, #6
 8000e74:	0038      	movs	r0, r7
 8000e76:	f002 f831 	bl	8002edc <__clzsi2>
 8000e7a:	3805      	subs	r0, #5
 8000e7c:	4087      	lsls	r7, r0
 8000e7e:	4284      	cmp	r4, r0
 8000e80:	dd00      	ble.n	8000e84 <__aeabi_fsub+0x74>
 8000e82:	e096      	b.n	8000fb2 <__aeabi_fsub+0x1a2>
 8000e84:	1b04      	subs	r4, r0, r4
 8000e86:	003a      	movs	r2, r7
 8000e88:	2020      	movs	r0, #32
 8000e8a:	3401      	adds	r4, #1
 8000e8c:	40e2      	lsrs	r2, r4
 8000e8e:	1b04      	subs	r4, r0, r4
 8000e90:	40a7      	lsls	r7, r4
 8000e92:	003b      	movs	r3, r7
 8000e94:	1e5f      	subs	r7, r3, #1
 8000e96:	41bb      	sbcs	r3, r7
 8000e98:	2400      	movs	r4, #0
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	075a      	lsls	r2, r3, #29
 8000e9e:	d004      	beq.n	8000eaa <__aeabi_fsub+0x9a>
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	2a04      	cmp	r2, #4
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0x9a>
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	015a      	lsls	r2, r3, #5
 8000eac:	d527      	bpl.n	8000efe <__aeabi_fsub+0xee>
 8000eae:	3401      	adds	r4, #1
 8000eb0:	2cff      	cmp	r4, #255	; 0xff
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0xa6>
 8000eb4:	e079      	b.n	8000faa <__aeabi_fsub+0x19a>
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	019b      	lsls	r3, r3, #6
 8000eba:	0a5b      	lsrs	r3, r3, #9
 8000ebc:	b2e4      	uxtb	r4, r4
 8000ebe:	402a      	ands	r2, r5
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	05e4      	lsls	r4, r4, #23
 8000ec4:	0a58      	lsrs	r0, r3, #9
 8000ec6:	07d2      	lsls	r2, r2, #31
 8000ec8:	4320      	orrs	r0, r4
 8000eca:	4310      	orrs	r0, r2
 8000ecc:	bc1c      	pop	{r2, r3, r4}
 8000ece:	4690      	mov	r8, r2
 8000ed0:	4699      	mov	r9, r3
 8000ed2:	46a2      	mov	sl, r4
 8000ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed6:	2cff      	cmp	r4, #255	; 0xff
 8000ed8:	d0e0      	beq.n	8000e9c <__aeabi_fsub+0x8c>
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	04c9      	lsls	r1, r1, #19
 8000ede:	430e      	orrs	r6, r1
 8000ee0:	2a1b      	cmp	r2, #27
 8000ee2:	dc7b      	bgt.n	8000fdc <__aeabi_fsub+0x1cc>
 8000ee4:	0031      	movs	r1, r6
 8000ee6:	2020      	movs	r0, #32
 8000ee8:	40d1      	lsrs	r1, r2
 8000eea:	1a82      	subs	r2, r0, r2
 8000eec:	4096      	lsls	r6, r2
 8000eee:	1e72      	subs	r2, r6, #1
 8000ef0:	4196      	sbcs	r6, r2
 8000ef2:	430e      	orrs	r6, r1
 8000ef4:	1b9b      	subs	r3, r3, r6
 8000ef6:	015a      	lsls	r2, r3, #5
 8000ef8:	d4ba      	bmi.n	8000e70 <__aeabi_fsub+0x60>
 8000efa:	075a      	lsls	r2, r3, #29
 8000efc:	d1d0      	bne.n	8000ea0 <__aeabi_fsub+0x90>
 8000efe:	2201      	movs	r2, #1
 8000f00:	08df      	lsrs	r7, r3, #3
 8000f02:	402a      	ands	r2, r5
 8000f04:	2cff      	cmp	r4, #255	; 0xff
 8000f06:	d133      	bne.n	8000f70 <__aeabi_fsub+0x160>
 8000f08:	2f00      	cmp	r7, #0
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_fsub+0xfe>
 8000f0c:	e0a8      	b.n	8001060 <__aeabi_fsub+0x250>
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	03db      	lsls	r3, r3, #15
 8000f12:	433b      	orrs	r3, r7
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	0a5b      	lsrs	r3, r3, #9
 8000f18:	24ff      	movs	r4, #255	; 0xff
 8000f1a:	e7d1      	b.n	8000ec0 <__aeabi_fsub+0xb0>
 8000f1c:	1a21      	subs	r1, r4, r0
 8000f1e:	2900      	cmp	r1, #0
 8000f20:	dd4c      	ble.n	8000fbc <__aeabi_fsub+0x1ac>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d02a      	beq.n	8000f7c <__aeabi_fsub+0x16c>
 8000f26:	2cff      	cmp	r4, #255	; 0xff
 8000f28:	d0b8      	beq.n	8000e9c <__aeabi_fsub+0x8c>
 8000f2a:	2080      	movs	r0, #128	; 0x80
 8000f2c:	04c0      	lsls	r0, r0, #19
 8000f2e:	4306      	orrs	r6, r0
 8000f30:	291b      	cmp	r1, #27
 8000f32:	dd00      	ble.n	8000f36 <__aeabi_fsub+0x126>
 8000f34:	e0af      	b.n	8001096 <__aeabi_fsub+0x286>
 8000f36:	0030      	movs	r0, r6
 8000f38:	2720      	movs	r7, #32
 8000f3a:	40c8      	lsrs	r0, r1
 8000f3c:	1a79      	subs	r1, r7, r1
 8000f3e:	408e      	lsls	r6, r1
 8000f40:	1e71      	subs	r1, r6, #1
 8000f42:	418e      	sbcs	r6, r1
 8000f44:	4306      	orrs	r6, r0
 8000f46:	199b      	adds	r3, r3, r6
 8000f48:	0159      	lsls	r1, r3, #5
 8000f4a:	d5d6      	bpl.n	8000efa <__aeabi_fsub+0xea>
 8000f4c:	3401      	adds	r4, #1
 8000f4e:	2cff      	cmp	r4, #255	; 0xff
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x144>
 8000f52:	e085      	b.n	8001060 <__aeabi_fsub+0x250>
 8000f54:	2201      	movs	r2, #1
 8000f56:	497a      	ldr	r1, [pc, #488]	; (8001140 <__aeabi_fsub+0x330>)
 8000f58:	401a      	ands	r2, r3
 8000f5a:	085b      	lsrs	r3, r3, #1
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	e79c      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d000      	beq.n	8000f68 <__aeabi_fsub+0x158>
 8000f66:	e770      	b.n	8000e4a <__aeabi_fsub+0x3a>
 8000f68:	e76b      	b.n	8000e42 <__aeabi_fsub+0x32>
 8000f6a:	1e3b      	subs	r3, r7, #0
 8000f6c:	d1c5      	bne.n	8000efa <__aeabi_fsub+0xea>
 8000f6e:	2200      	movs	r2, #0
 8000f70:	027b      	lsls	r3, r7, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	b2e4      	uxtb	r4, r4
 8000f76:	e7a3      	b.n	8000ec0 <__aeabi_fsub+0xb0>
 8000f78:	0014      	movs	r4, r2
 8000f7a:	e78f      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	d04d      	beq.n	800101c <__aeabi_fsub+0x20c>
 8000f80:	1e48      	subs	r0, r1, #1
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d157      	bne.n	8001036 <__aeabi_fsub+0x226>
 8000f86:	199b      	adds	r3, r3, r6
 8000f88:	2401      	movs	r4, #1
 8000f8a:	015a      	lsls	r2, r3, #5
 8000f8c:	d5b5      	bpl.n	8000efa <__aeabi_fsub+0xea>
 8000f8e:	2402      	movs	r4, #2
 8000f90:	e7e0      	b.n	8000f54 <__aeabi_fsub+0x144>
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	d125      	bne.n	8000fe2 <__aeabi_fsub+0x1d2>
 8000f96:	1c62      	adds	r2, r4, #1
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	2a01      	cmp	r2, #1
 8000f9c:	dd72      	ble.n	8001084 <__aeabi_fsub+0x274>
 8000f9e:	1b9f      	subs	r7, r3, r6
 8000fa0:	017a      	lsls	r2, r7, #5
 8000fa2:	d535      	bpl.n	8001010 <__aeabi_fsub+0x200>
 8000fa4:	1af7      	subs	r7, r6, r3
 8000fa6:	000d      	movs	r5, r1
 8000fa8:	e764      	b.n	8000e74 <__aeabi_fsub+0x64>
 8000faa:	2201      	movs	r2, #1
 8000fac:	2300      	movs	r3, #0
 8000fae:	402a      	ands	r2, r5
 8000fb0:	e786      	b.n	8000ec0 <__aeabi_fsub+0xb0>
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	4a63      	ldr	r2, [pc, #396]	; (8001144 <__aeabi_fsub+0x334>)
 8000fb6:	1a24      	subs	r4, r4, r0
 8000fb8:	4013      	ands	r3, r2
 8000fba:	e76f      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8000fbc:	2900      	cmp	r1, #0
 8000fbe:	d16c      	bne.n	800109a <__aeabi_fsub+0x28a>
 8000fc0:	1c61      	adds	r1, r4, #1
 8000fc2:	b2c8      	uxtb	r0, r1
 8000fc4:	2801      	cmp	r0, #1
 8000fc6:	dd4e      	ble.n	8001066 <__aeabi_fsub+0x256>
 8000fc8:	29ff      	cmp	r1, #255	; 0xff
 8000fca:	d049      	beq.n	8001060 <__aeabi_fsub+0x250>
 8000fcc:	199b      	adds	r3, r3, r6
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	000c      	movs	r4, r1
 8000fd2:	e763      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8000fd4:	2aff      	cmp	r2, #255	; 0xff
 8000fd6:	d041      	beq.n	800105c <__aeabi_fsub+0x24c>
 8000fd8:	000a      	movs	r2, r1
 8000fda:	e781      	b.n	8000ee0 <__aeabi_fsub+0xd0>
 8000fdc:	2601      	movs	r6, #1
 8000fde:	1b9b      	subs	r3, r3, r6
 8000fe0:	e789      	b.n	8000ef6 <__aeabi_fsub+0xe6>
 8000fe2:	2c00      	cmp	r4, #0
 8000fe4:	d01c      	beq.n	8001020 <__aeabi_fsub+0x210>
 8000fe6:	28ff      	cmp	r0, #255	; 0xff
 8000fe8:	d021      	beq.n	800102e <__aeabi_fsub+0x21e>
 8000fea:	2480      	movs	r4, #128	; 0x80
 8000fec:	04e4      	lsls	r4, r4, #19
 8000fee:	4252      	negs	r2, r2
 8000ff0:	4323      	orrs	r3, r4
 8000ff2:	2a1b      	cmp	r2, #27
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_fsub+0x1e8>
 8000ff6:	e096      	b.n	8001126 <__aeabi_fsub+0x316>
 8000ff8:	001c      	movs	r4, r3
 8000ffa:	2520      	movs	r5, #32
 8000ffc:	40d4      	lsrs	r4, r2
 8000ffe:	1aaa      	subs	r2, r5, r2
 8001000:	4093      	lsls	r3, r2
 8001002:	1e5a      	subs	r2, r3, #1
 8001004:	4193      	sbcs	r3, r2
 8001006:	4323      	orrs	r3, r4
 8001008:	1af3      	subs	r3, r6, r3
 800100a:	0004      	movs	r4, r0
 800100c:	000d      	movs	r5, r1
 800100e:	e72d      	b.n	8000e6c <__aeabi_fsub+0x5c>
 8001010:	2f00      	cmp	r7, #0
 8001012:	d000      	beq.n	8001016 <__aeabi_fsub+0x206>
 8001014:	e72e      	b.n	8000e74 <__aeabi_fsub+0x64>
 8001016:	2200      	movs	r2, #0
 8001018:	2400      	movs	r4, #0
 800101a:	e7a9      	b.n	8000f70 <__aeabi_fsub+0x160>
 800101c:	000c      	movs	r4, r1
 800101e:	e73d      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001020:	2b00      	cmp	r3, #0
 8001022:	d058      	beq.n	80010d6 <__aeabi_fsub+0x2c6>
 8001024:	43d2      	mvns	r2, r2
 8001026:	2a00      	cmp	r2, #0
 8001028:	d0ee      	beq.n	8001008 <__aeabi_fsub+0x1f8>
 800102a:	28ff      	cmp	r0, #255	; 0xff
 800102c:	d1e1      	bne.n	8000ff2 <__aeabi_fsub+0x1e2>
 800102e:	0033      	movs	r3, r6
 8001030:	24ff      	movs	r4, #255	; 0xff
 8001032:	000d      	movs	r5, r1
 8001034:	e732      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001036:	29ff      	cmp	r1, #255	; 0xff
 8001038:	d010      	beq.n	800105c <__aeabi_fsub+0x24c>
 800103a:	0001      	movs	r1, r0
 800103c:	e778      	b.n	8000f30 <__aeabi_fsub+0x120>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d06e      	beq.n	8001120 <__aeabi_fsub+0x310>
 8001042:	24ff      	movs	r4, #255	; 0xff
 8001044:	2e00      	cmp	r6, #0
 8001046:	d100      	bne.n	800104a <__aeabi_fsub+0x23a>
 8001048:	e728      	b.n	8000e9c <__aeabi_fsub+0x8c>
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	4651      	mov	r1, sl
 800104e:	03d2      	lsls	r2, r2, #15
 8001050:	4211      	tst	r1, r2
 8001052:	d003      	beq.n	800105c <__aeabi_fsub+0x24c>
 8001054:	4661      	mov	r1, ip
 8001056:	4211      	tst	r1, r2
 8001058:	d100      	bne.n	800105c <__aeabi_fsub+0x24c>
 800105a:	0033      	movs	r3, r6
 800105c:	24ff      	movs	r4, #255	; 0xff
 800105e:	e71d      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001060:	24ff      	movs	r4, #255	; 0xff
 8001062:	2300      	movs	r3, #0
 8001064:	e72c      	b.n	8000ec0 <__aeabi_fsub+0xb0>
 8001066:	2c00      	cmp	r4, #0
 8001068:	d1e9      	bne.n	800103e <__aeabi_fsub+0x22e>
 800106a:	2b00      	cmp	r3, #0
 800106c:	d063      	beq.n	8001136 <__aeabi_fsub+0x326>
 800106e:	2e00      	cmp	r6, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_fsub+0x264>
 8001072:	e713      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001074:	199b      	adds	r3, r3, r6
 8001076:	015a      	lsls	r2, r3, #5
 8001078:	d400      	bmi.n	800107c <__aeabi_fsub+0x26c>
 800107a:	e73e      	b.n	8000efa <__aeabi_fsub+0xea>
 800107c:	4a31      	ldr	r2, [pc, #196]	; (8001144 <__aeabi_fsub+0x334>)
 800107e:	000c      	movs	r4, r1
 8001080:	4013      	ands	r3, r2
 8001082:	e70b      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001084:	2c00      	cmp	r4, #0
 8001086:	d11e      	bne.n	80010c6 <__aeabi_fsub+0x2b6>
 8001088:	2b00      	cmp	r3, #0
 800108a:	d12f      	bne.n	80010ec <__aeabi_fsub+0x2dc>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d04f      	beq.n	8001130 <__aeabi_fsub+0x320>
 8001090:	0033      	movs	r3, r6
 8001092:	000d      	movs	r5, r1
 8001094:	e702      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001096:	2601      	movs	r6, #1
 8001098:	e755      	b.n	8000f46 <__aeabi_fsub+0x136>
 800109a:	2c00      	cmp	r4, #0
 800109c:	d11f      	bne.n	80010de <__aeabi_fsub+0x2ce>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d043      	beq.n	800112a <__aeabi_fsub+0x31a>
 80010a2:	43c9      	mvns	r1, r1
 80010a4:	2900      	cmp	r1, #0
 80010a6:	d00b      	beq.n	80010c0 <__aeabi_fsub+0x2b0>
 80010a8:	28ff      	cmp	r0, #255	; 0xff
 80010aa:	d039      	beq.n	8001120 <__aeabi_fsub+0x310>
 80010ac:	291b      	cmp	r1, #27
 80010ae:	dc44      	bgt.n	800113a <__aeabi_fsub+0x32a>
 80010b0:	001c      	movs	r4, r3
 80010b2:	2720      	movs	r7, #32
 80010b4:	40cc      	lsrs	r4, r1
 80010b6:	1a79      	subs	r1, r7, r1
 80010b8:	408b      	lsls	r3, r1
 80010ba:	1e59      	subs	r1, r3, #1
 80010bc:	418b      	sbcs	r3, r1
 80010be:	4323      	orrs	r3, r4
 80010c0:	199b      	adds	r3, r3, r6
 80010c2:	0004      	movs	r4, r0
 80010c4:	e740      	b.n	8000f48 <__aeabi_fsub+0x138>
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d11a      	bne.n	8001100 <__aeabi_fsub+0x2f0>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d124      	bne.n	8001118 <__aeabi_fsub+0x308>
 80010ce:	2780      	movs	r7, #128	; 0x80
 80010d0:	2200      	movs	r2, #0
 80010d2:	03ff      	lsls	r7, r7, #15
 80010d4:	e71b      	b.n	8000f0e <__aeabi_fsub+0xfe>
 80010d6:	0033      	movs	r3, r6
 80010d8:	0004      	movs	r4, r0
 80010da:	000d      	movs	r5, r1
 80010dc:	e6de      	b.n	8000e9c <__aeabi_fsub+0x8c>
 80010de:	28ff      	cmp	r0, #255	; 0xff
 80010e0:	d01e      	beq.n	8001120 <__aeabi_fsub+0x310>
 80010e2:	2480      	movs	r4, #128	; 0x80
 80010e4:	04e4      	lsls	r4, r4, #19
 80010e6:	4249      	negs	r1, r1
 80010e8:	4323      	orrs	r3, r4
 80010ea:	e7df      	b.n	80010ac <__aeabi_fsub+0x29c>
 80010ec:	2e00      	cmp	r6, #0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_fsub+0x2e2>
 80010f0:	e6d4      	b.n	8000e9c <__aeabi_fsub+0x8c>
 80010f2:	1b9f      	subs	r7, r3, r6
 80010f4:	017a      	lsls	r2, r7, #5
 80010f6:	d400      	bmi.n	80010fa <__aeabi_fsub+0x2ea>
 80010f8:	e737      	b.n	8000f6a <__aeabi_fsub+0x15a>
 80010fa:	1af3      	subs	r3, r6, r3
 80010fc:	000d      	movs	r5, r1
 80010fe:	e6cd      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001100:	24ff      	movs	r4, #255	; 0xff
 8001102:	2e00      	cmp	r6, #0
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x2f8>
 8001106:	e6c9      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	4650      	mov	r0, sl
 800110c:	03d2      	lsls	r2, r2, #15
 800110e:	4210      	tst	r0, r2
 8001110:	d0a4      	beq.n	800105c <__aeabi_fsub+0x24c>
 8001112:	4660      	mov	r0, ip
 8001114:	4210      	tst	r0, r2
 8001116:	d1a1      	bne.n	800105c <__aeabi_fsub+0x24c>
 8001118:	0033      	movs	r3, r6
 800111a:	000d      	movs	r5, r1
 800111c:	24ff      	movs	r4, #255	; 0xff
 800111e:	e6bd      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001120:	0033      	movs	r3, r6
 8001122:	24ff      	movs	r4, #255	; 0xff
 8001124:	e6ba      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001126:	2301      	movs	r3, #1
 8001128:	e76e      	b.n	8001008 <__aeabi_fsub+0x1f8>
 800112a:	0033      	movs	r3, r6
 800112c:	0004      	movs	r4, r0
 800112e:	e6b5      	b.n	8000e9c <__aeabi_fsub+0x8c>
 8001130:	2700      	movs	r7, #0
 8001132:	2200      	movs	r2, #0
 8001134:	e71c      	b.n	8000f70 <__aeabi_fsub+0x160>
 8001136:	0033      	movs	r3, r6
 8001138:	e6b0      	b.n	8000e9c <__aeabi_fsub+0x8c>
 800113a:	2301      	movs	r3, #1
 800113c:	e7c0      	b.n	80010c0 <__aeabi_fsub+0x2b0>
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	7dffffff 	.word	0x7dffffff
 8001144:	fbffffff 	.word	0xfbffffff

08001148 <__aeabi_f2iz>:
 8001148:	0241      	lsls	r1, r0, #9
 800114a:	0043      	lsls	r3, r0, #1
 800114c:	0fc2      	lsrs	r2, r0, #31
 800114e:	0a49      	lsrs	r1, r1, #9
 8001150:	0e1b      	lsrs	r3, r3, #24
 8001152:	2000      	movs	r0, #0
 8001154:	2b7e      	cmp	r3, #126	; 0x7e
 8001156:	dd0d      	ble.n	8001174 <__aeabi_f2iz+0x2c>
 8001158:	2b9d      	cmp	r3, #157	; 0x9d
 800115a:	dc0c      	bgt.n	8001176 <__aeabi_f2iz+0x2e>
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	0400      	lsls	r0, r0, #16
 8001160:	4301      	orrs	r1, r0
 8001162:	2b95      	cmp	r3, #149	; 0x95
 8001164:	dc0a      	bgt.n	800117c <__aeabi_f2iz+0x34>
 8001166:	2096      	movs	r0, #150	; 0x96
 8001168:	1ac3      	subs	r3, r0, r3
 800116a:	40d9      	lsrs	r1, r3
 800116c:	4248      	negs	r0, r1
 800116e:	2a00      	cmp	r2, #0
 8001170:	d100      	bne.n	8001174 <__aeabi_f2iz+0x2c>
 8001172:	0008      	movs	r0, r1
 8001174:	4770      	bx	lr
 8001176:	4b03      	ldr	r3, [pc, #12]	; (8001184 <__aeabi_f2iz+0x3c>)
 8001178:	18d0      	adds	r0, r2, r3
 800117a:	e7fb      	b.n	8001174 <__aeabi_f2iz+0x2c>
 800117c:	3b96      	subs	r3, #150	; 0x96
 800117e:	4099      	lsls	r1, r3
 8001180:	e7f4      	b.n	800116c <__aeabi_f2iz+0x24>
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	7fffffff 	.word	0x7fffffff

08001188 <__aeabi_ui2f>:
 8001188:	b510      	push	{r4, lr}
 800118a:	1e04      	subs	r4, r0, #0
 800118c:	d027      	beq.n	80011de <__aeabi_ui2f+0x56>
 800118e:	f001 fea5 	bl	8002edc <__clzsi2>
 8001192:	239e      	movs	r3, #158	; 0x9e
 8001194:	1a1b      	subs	r3, r3, r0
 8001196:	2b96      	cmp	r3, #150	; 0x96
 8001198:	dc0a      	bgt.n	80011b0 <__aeabi_ui2f+0x28>
 800119a:	2296      	movs	r2, #150	; 0x96
 800119c:	1ad2      	subs	r2, r2, r3
 800119e:	4094      	lsls	r4, r2
 80011a0:	0264      	lsls	r4, r4, #9
 80011a2:	0a64      	lsrs	r4, r4, #9
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	0264      	lsls	r4, r4, #9
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	0a60      	lsrs	r0, r4, #9
 80011ac:	4318      	orrs	r0, r3
 80011ae:	bd10      	pop	{r4, pc}
 80011b0:	2b99      	cmp	r3, #153	; 0x99
 80011b2:	dc17      	bgt.n	80011e4 <__aeabi_ui2f+0x5c>
 80011b4:	2299      	movs	r2, #153	; 0x99
 80011b6:	1ad2      	subs	r2, r2, r3
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	dd27      	ble.n	800120c <__aeabi_ui2f+0x84>
 80011bc:	4094      	lsls	r4, r2
 80011be:	0022      	movs	r2, r4
 80011c0:	4c13      	ldr	r4, [pc, #76]	; (8001210 <__aeabi_ui2f+0x88>)
 80011c2:	4014      	ands	r4, r2
 80011c4:	0751      	lsls	r1, r2, #29
 80011c6:	d004      	beq.n	80011d2 <__aeabi_ui2f+0x4a>
 80011c8:	210f      	movs	r1, #15
 80011ca:	400a      	ands	r2, r1
 80011cc:	2a04      	cmp	r2, #4
 80011ce:	d000      	beq.n	80011d2 <__aeabi_ui2f+0x4a>
 80011d0:	3404      	adds	r4, #4
 80011d2:	0162      	lsls	r2, r4, #5
 80011d4:	d412      	bmi.n	80011fc <__aeabi_ui2f+0x74>
 80011d6:	01a4      	lsls	r4, r4, #6
 80011d8:	0a64      	lsrs	r4, r4, #9
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	e7e3      	b.n	80011a6 <__aeabi_ui2f+0x1e>
 80011de:	2300      	movs	r3, #0
 80011e0:	2400      	movs	r4, #0
 80011e2:	e7e0      	b.n	80011a6 <__aeabi_ui2f+0x1e>
 80011e4:	22b9      	movs	r2, #185	; 0xb9
 80011e6:	0021      	movs	r1, r4
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	4091      	lsls	r1, r2
 80011ec:	000a      	movs	r2, r1
 80011ee:	1e51      	subs	r1, r2, #1
 80011f0:	418a      	sbcs	r2, r1
 80011f2:	2105      	movs	r1, #5
 80011f4:	1a09      	subs	r1, r1, r0
 80011f6:	40cc      	lsrs	r4, r1
 80011f8:	4314      	orrs	r4, r2
 80011fa:	e7db      	b.n	80011b4 <__aeabi_ui2f+0x2c>
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__aeabi_ui2f+0x88>)
 80011fe:	401c      	ands	r4, r3
 8001200:	239f      	movs	r3, #159	; 0x9f
 8001202:	01a4      	lsls	r4, r4, #6
 8001204:	1a1b      	subs	r3, r3, r0
 8001206:	0a64      	lsrs	r4, r4, #9
 8001208:	b2db      	uxtb	r3, r3
 800120a:	e7cc      	b.n	80011a6 <__aeabi_ui2f+0x1e>
 800120c:	0022      	movs	r2, r4
 800120e:	e7d7      	b.n	80011c0 <__aeabi_ui2f+0x38>
 8001210:	fbffffff 	.word	0xfbffffff

08001214 <__aeabi_dadd>:
 8001214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001216:	4645      	mov	r5, r8
 8001218:	46de      	mov	lr, fp
 800121a:	4657      	mov	r7, sl
 800121c:	464e      	mov	r6, r9
 800121e:	030c      	lsls	r4, r1, #12
 8001220:	b5e0      	push	{r5, r6, r7, lr}
 8001222:	004e      	lsls	r6, r1, #1
 8001224:	0fc9      	lsrs	r1, r1, #31
 8001226:	4688      	mov	r8, r1
 8001228:	000d      	movs	r5, r1
 800122a:	0a61      	lsrs	r1, r4, #9
 800122c:	0f44      	lsrs	r4, r0, #29
 800122e:	430c      	orrs	r4, r1
 8001230:	00c7      	lsls	r7, r0, #3
 8001232:	0319      	lsls	r1, r3, #12
 8001234:	0058      	lsls	r0, r3, #1
 8001236:	0fdb      	lsrs	r3, r3, #31
 8001238:	469b      	mov	fp, r3
 800123a:	0a4b      	lsrs	r3, r1, #9
 800123c:	0f51      	lsrs	r1, r2, #29
 800123e:	430b      	orrs	r3, r1
 8001240:	0d76      	lsrs	r6, r6, #21
 8001242:	0d40      	lsrs	r0, r0, #21
 8001244:	0019      	movs	r1, r3
 8001246:	00d2      	lsls	r2, r2, #3
 8001248:	45d8      	cmp	r8, fp
 800124a:	d100      	bne.n	800124e <__aeabi_dadd+0x3a>
 800124c:	e0ae      	b.n	80013ac <__aeabi_dadd+0x198>
 800124e:	1a35      	subs	r5, r6, r0
 8001250:	2d00      	cmp	r5, #0
 8001252:	dc00      	bgt.n	8001256 <__aeabi_dadd+0x42>
 8001254:	e0f6      	b.n	8001444 <__aeabi_dadd+0x230>
 8001256:	2800      	cmp	r0, #0
 8001258:	d10f      	bne.n	800127a <__aeabi_dadd+0x66>
 800125a:	4313      	orrs	r3, r2
 800125c:	d100      	bne.n	8001260 <__aeabi_dadd+0x4c>
 800125e:	e0db      	b.n	8001418 <__aeabi_dadd+0x204>
 8001260:	1e6b      	subs	r3, r5, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d000      	beq.n	8001268 <__aeabi_dadd+0x54>
 8001266:	e137      	b.n	80014d8 <__aeabi_dadd+0x2c4>
 8001268:	1aba      	subs	r2, r7, r2
 800126a:	4297      	cmp	r7, r2
 800126c:	41bf      	sbcs	r7, r7
 800126e:	1a64      	subs	r4, r4, r1
 8001270:	427f      	negs	r7, r7
 8001272:	1be4      	subs	r4, r4, r7
 8001274:	2601      	movs	r6, #1
 8001276:	0017      	movs	r7, r2
 8001278:	e024      	b.n	80012c4 <__aeabi_dadd+0xb0>
 800127a:	4bc6      	ldr	r3, [pc, #792]	; (8001594 <__aeabi_dadd+0x380>)
 800127c:	429e      	cmp	r6, r3
 800127e:	d04d      	beq.n	800131c <__aeabi_dadd+0x108>
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	4319      	orrs	r1, r3
 8001286:	2d38      	cmp	r5, #56	; 0x38
 8001288:	dd00      	ble.n	800128c <__aeabi_dadd+0x78>
 800128a:	e107      	b.n	800149c <__aeabi_dadd+0x288>
 800128c:	2d1f      	cmp	r5, #31
 800128e:	dd00      	ble.n	8001292 <__aeabi_dadd+0x7e>
 8001290:	e138      	b.n	8001504 <__aeabi_dadd+0x2f0>
 8001292:	2020      	movs	r0, #32
 8001294:	1b43      	subs	r3, r0, r5
 8001296:	469a      	mov	sl, r3
 8001298:	000b      	movs	r3, r1
 800129a:	4650      	mov	r0, sl
 800129c:	4083      	lsls	r3, r0
 800129e:	4699      	mov	r9, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	4648      	mov	r0, r9
 80012a4:	40eb      	lsrs	r3, r5
 80012a6:	4318      	orrs	r0, r3
 80012a8:	0003      	movs	r3, r0
 80012aa:	4650      	mov	r0, sl
 80012ac:	4082      	lsls	r2, r0
 80012ae:	1e50      	subs	r0, r2, #1
 80012b0:	4182      	sbcs	r2, r0
 80012b2:	40e9      	lsrs	r1, r5
 80012b4:	431a      	orrs	r2, r3
 80012b6:	1aba      	subs	r2, r7, r2
 80012b8:	1a61      	subs	r1, r4, r1
 80012ba:	4297      	cmp	r7, r2
 80012bc:	41a4      	sbcs	r4, r4
 80012be:	0017      	movs	r7, r2
 80012c0:	4264      	negs	r4, r4
 80012c2:	1b0c      	subs	r4, r1, r4
 80012c4:	0223      	lsls	r3, r4, #8
 80012c6:	d562      	bpl.n	800138e <__aeabi_dadd+0x17a>
 80012c8:	0264      	lsls	r4, r4, #9
 80012ca:	0a65      	lsrs	r5, r4, #9
 80012cc:	2d00      	cmp	r5, #0
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0xbe>
 80012d0:	e0df      	b.n	8001492 <__aeabi_dadd+0x27e>
 80012d2:	0028      	movs	r0, r5
 80012d4:	f001 fe02 	bl	8002edc <__clzsi2>
 80012d8:	0003      	movs	r3, r0
 80012da:	3b08      	subs	r3, #8
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	dd00      	ble.n	80012e2 <__aeabi_dadd+0xce>
 80012e0:	e0d2      	b.n	8001488 <__aeabi_dadd+0x274>
 80012e2:	2220      	movs	r2, #32
 80012e4:	003c      	movs	r4, r7
 80012e6:	1ad2      	subs	r2, r2, r3
 80012e8:	409d      	lsls	r5, r3
 80012ea:	40d4      	lsrs	r4, r2
 80012ec:	409f      	lsls	r7, r3
 80012ee:	4325      	orrs	r5, r4
 80012f0:	429e      	cmp	r6, r3
 80012f2:	dd00      	ble.n	80012f6 <__aeabi_dadd+0xe2>
 80012f4:	e0c4      	b.n	8001480 <__aeabi_dadd+0x26c>
 80012f6:	1b9e      	subs	r6, r3, r6
 80012f8:	1c73      	adds	r3, r6, #1
 80012fa:	2b1f      	cmp	r3, #31
 80012fc:	dd00      	ble.n	8001300 <__aeabi_dadd+0xec>
 80012fe:	e0f1      	b.n	80014e4 <__aeabi_dadd+0x2d0>
 8001300:	2220      	movs	r2, #32
 8001302:	0038      	movs	r0, r7
 8001304:	0029      	movs	r1, r5
 8001306:	1ad2      	subs	r2, r2, r3
 8001308:	40d8      	lsrs	r0, r3
 800130a:	4091      	lsls	r1, r2
 800130c:	4097      	lsls	r7, r2
 800130e:	002c      	movs	r4, r5
 8001310:	4301      	orrs	r1, r0
 8001312:	1e78      	subs	r0, r7, #1
 8001314:	4187      	sbcs	r7, r0
 8001316:	40dc      	lsrs	r4, r3
 8001318:	2600      	movs	r6, #0
 800131a:	430f      	orrs	r7, r1
 800131c:	077b      	lsls	r3, r7, #29
 800131e:	d009      	beq.n	8001334 <__aeabi_dadd+0x120>
 8001320:	230f      	movs	r3, #15
 8001322:	403b      	ands	r3, r7
 8001324:	2b04      	cmp	r3, #4
 8001326:	d005      	beq.n	8001334 <__aeabi_dadd+0x120>
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	42bb      	cmp	r3, r7
 800132c:	41bf      	sbcs	r7, r7
 800132e:	427f      	negs	r7, r7
 8001330:	19e4      	adds	r4, r4, r7
 8001332:	001f      	movs	r7, r3
 8001334:	0223      	lsls	r3, r4, #8
 8001336:	d52c      	bpl.n	8001392 <__aeabi_dadd+0x17e>
 8001338:	4b96      	ldr	r3, [pc, #600]	; (8001594 <__aeabi_dadd+0x380>)
 800133a:	3601      	adds	r6, #1
 800133c:	429e      	cmp	r6, r3
 800133e:	d100      	bne.n	8001342 <__aeabi_dadd+0x12e>
 8001340:	e09a      	b.n	8001478 <__aeabi_dadd+0x264>
 8001342:	4645      	mov	r5, r8
 8001344:	4b94      	ldr	r3, [pc, #592]	; (8001598 <__aeabi_dadd+0x384>)
 8001346:	08ff      	lsrs	r7, r7, #3
 8001348:	401c      	ands	r4, r3
 800134a:	0760      	lsls	r0, r4, #29
 800134c:	0576      	lsls	r6, r6, #21
 800134e:	0264      	lsls	r4, r4, #9
 8001350:	4307      	orrs	r7, r0
 8001352:	0b24      	lsrs	r4, r4, #12
 8001354:	0d76      	lsrs	r6, r6, #21
 8001356:	2100      	movs	r1, #0
 8001358:	0324      	lsls	r4, r4, #12
 800135a:	0b23      	lsrs	r3, r4, #12
 800135c:	0d0c      	lsrs	r4, r1, #20
 800135e:	4a8f      	ldr	r2, [pc, #572]	; (800159c <__aeabi_dadd+0x388>)
 8001360:	0524      	lsls	r4, r4, #20
 8001362:	431c      	orrs	r4, r3
 8001364:	4014      	ands	r4, r2
 8001366:	0533      	lsls	r3, r6, #20
 8001368:	4323      	orrs	r3, r4
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	07ed      	lsls	r5, r5, #31
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	432b      	orrs	r3, r5
 8001372:	0038      	movs	r0, r7
 8001374:	0019      	movs	r1, r3
 8001376:	bc3c      	pop	{r2, r3, r4, r5}
 8001378:	4690      	mov	r8, r2
 800137a:	4699      	mov	r9, r3
 800137c:	46a2      	mov	sl, r4
 800137e:	46ab      	mov	fp, r5
 8001380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001382:	4664      	mov	r4, ip
 8001384:	4304      	orrs	r4, r0
 8001386:	d100      	bne.n	800138a <__aeabi_dadd+0x176>
 8001388:	e211      	b.n	80017ae <__aeabi_dadd+0x59a>
 800138a:	0004      	movs	r4, r0
 800138c:	4667      	mov	r7, ip
 800138e:	077b      	lsls	r3, r7, #29
 8001390:	d1c6      	bne.n	8001320 <__aeabi_dadd+0x10c>
 8001392:	4645      	mov	r5, r8
 8001394:	0760      	lsls	r0, r4, #29
 8001396:	08ff      	lsrs	r7, r7, #3
 8001398:	4307      	orrs	r7, r0
 800139a:	08e4      	lsrs	r4, r4, #3
 800139c:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <__aeabi_dadd+0x380>)
 800139e:	429e      	cmp	r6, r3
 80013a0:	d030      	beq.n	8001404 <__aeabi_dadd+0x1f0>
 80013a2:	0324      	lsls	r4, r4, #12
 80013a4:	0576      	lsls	r6, r6, #21
 80013a6:	0b24      	lsrs	r4, r4, #12
 80013a8:	0d76      	lsrs	r6, r6, #21
 80013aa:	e7d4      	b.n	8001356 <__aeabi_dadd+0x142>
 80013ac:	1a33      	subs	r3, r6, r0
 80013ae:	469a      	mov	sl, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	dd78      	ble.n	80014a6 <__aeabi_dadd+0x292>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d031      	beq.n	800141c <__aeabi_dadd+0x208>
 80013b8:	4876      	ldr	r0, [pc, #472]	; (8001594 <__aeabi_dadd+0x380>)
 80013ba:	4286      	cmp	r6, r0
 80013bc:	d0ae      	beq.n	800131c <__aeabi_dadd+0x108>
 80013be:	2080      	movs	r0, #128	; 0x80
 80013c0:	0400      	lsls	r0, r0, #16
 80013c2:	4301      	orrs	r1, r0
 80013c4:	4653      	mov	r3, sl
 80013c6:	2b38      	cmp	r3, #56	; 0x38
 80013c8:	dc00      	bgt.n	80013cc <__aeabi_dadd+0x1b8>
 80013ca:	e0e9      	b.n	80015a0 <__aeabi_dadd+0x38c>
 80013cc:	430a      	orrs	r2, r1
 80013ce:	1e51      	subs	r1, r2, #1
 80013d0:	418a      	sbcs	r2, r1
 80013d2:	2100      	movs	r1, #0
 80013d4:	19d2      	adds	r2, r2, r7
 80013d6:	42ba      	cmp	r2, r7
 80013d8:	41bf      	sbcs	r7, r7
 80013da:	1909      	adds	r1, r1, r4
 80013dc:	427c      	negs	r4, r7
 80013de:	0017      	movs	r7, r2
 80013e0:	190c      	adds	r4, r1, r4
 80013e2:	0223      	lsls	r3, r4, #8
 80013e4:	d5d3      	bpl.n	800138e <__aeabi_dadd+0x17a>
 80013e6:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <__aeabi_dadd+0x380>)
 80013e8:	3601      	adds	r6, #1
 80013ea:	429e      	cmp	r6, r3
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x1dc>
 80013ee:	e13a      	b.n	8001666 <__aeabi_dadd+0x452>
 80013f0:	2001      	movs	r0, #1
 80013f2:	4b69      	ldr	r3, [pc, #420]	; (8001598 <__aeabi_dadd+0x384>)
 80013f4:	401c      	ands	r4, r3
 80013f6:	087b      	lsrs	r3, r7, #1
 80013f8:	4007      	ands	r7, r0
 80013fa:	431f      	orrs	r7, r3
 80013fc:	07e0      	lsls	r0, r4, #31
 80013fe:	4307      	orrs	r7, r0
 8001400:	0864      	lsrs	r4, r4, #1
 8001402:	e78b      	b.n	800131c <__aeabi_dadd+0x108>
 8001404:	0023      	movs	r3, r4
 8001406:	433b      	orrs	r3, r7
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x1f8>
 800140a:	e1cb      	b.n	80017a4 <__aeabi_dadd+0x590>
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	0312      	lsls	r2, r2, #12
 8001410:	4314      	orrs	r4, r2
 8001412:	0324      	lsls	r4, r4, #12
 8001414:	0b24      	lsrs	r4, r4, #12
 8001416:	e79e      	b.n	8001356 <__aeabi_dadd+0x142>
 8001418:	002e      	movs	r6, r5
 800141a:	e77f      	b.n	800131c <__aeabi_dadd+0x108>
 800141c:	0008      	movs	r0, r1
 800141e:	4310      	orrs	r0, r2
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x210>
 8001422:	e0b4      	b.n	800158e <__aeabi_dadd+0x37a>
 8001424:	1e58      	subs	r0, r3, #1
 8001426:	2800      	cmp	r0, #0
 8001428:	d000      	beq.n	800142c <__aeabi_dadd+0x218>
 800142a:	e0de      	b.n	80015ea <__aeabi_dadd+0x3d6>
 800142c:	18ba      	adds	r2, r7, r2
 800142e:	42ba      	cmp	r2, r7
 8001430:	419b      	sbcs	r3, r3
 8001432:	1864      	adds	r4, r4, r1
 8001434:	425b      	negs	r3, r3
 8001436:	18e4      	adds	r4, r4, r3
 8001438:	0017      	movs	r7, r2
 800143a:	2601      	movs	r6, #1
 800143c:	0223      	lsls	r3, r4, #8
 800143e:	d5a6      	bpl.n	800138e <__aeabi_dadd+0x17a>
 8001440:	2602      	movs	r6, #2
 8001442:	e7d5      	b.n	80013f0 <__aeabi_dadd+0x1dc>
 8001444:	2d00      	cmp	r5, #0
 8001446:	d16e      	bne.n	8001526 <__aeabi_dadd+0x312>
 8001448:	1c70      	adds	r0, r6, #1
 800144a:	0540      	lsls	r0, r0, #21
 800144c:	0d40      	lsrs	r0, r0, #21
 800144e:	2801      	cmp	r0, #1
 8001450:	dc00      	bgt.n	8001454 <__aeabi_dadd+0x240>
 8001452:	e0f9      	b.n	8001648 <__aeabi_dadd+0x434>
 8001454:	1ab8      	subs	r0, r7, r2
 8001456:	4684      	mov	ip, r0
 8001458:	4287      	cmp	r7, r0
 800145a:	4180      	sbcs	r0, r0
 800145c:	1ae5      	subs	r5, r4, r3
 800145e:	4240      	negs	r0, r0
 8001460:	1a2d      	subs	r5, r5, r0
 8001462:	0228      	lsls	r0, r5, #8
 8001464:	d400      	bmi.n	8001468 <__aeabi_dadd+0x254>
 8001466:	e089      	b.n	800157c <__aeabi_dadd+0x368>
 8001468:	1bd7      	subs	r7, r2, r7
 800146a:	42ba      	cmp	r2, r7
 800146c:	4192      	sbcs	r2, r2
 800146e:	1b1c      	subs	r4, r3, r4
 8001470:	4252      	negs	r2, r2
 8001472:	1aa5      	subs	r5, r4, r2
 8001474:	46d8      	mov	r8, fp
 8001476:	e729      	b.n	80012cc <__aeabi_dadd+0xb8>
 8001478:	4645      	mov	r5, r8
 800147a:	2400      	movs	r4, #0
 800147c:	2700      	movs	r7, #0
 800147e:	e76a      	b.n	8001356 <__aeabi_dadd+0x142>
 8001480:	4c45      	ldr	r4, [pc, #276]	; (8001598 <__aeabi_dadd+0x384>)
 8001482:	1af6      	subs	r6, r6, r3
 8001484:	402c      	ands	r4, r5
 8001486:	e749      	b.n	800131c <__aeabi_dadd+0x108>
 8001488:	003d      	movs	r5, r7
 800148a:	3828      	subs	r0, #40	; 0x28
 800148c:	4085      	lsls	r5, r0
 800148e:	2700      	movs	r7, #0
 8001490:	e72e      	b.n	80012f0 <__aeabi_dadd+0xdc>
 8001492:	0038      	movs	r0, r7
 8001494:	f001 fd22 	bl	8002edc <__clzsi2>
 8001498:	3020      	adds	r0, #32
 800149a:	e71d      	b.n	80012d8 <__aeabi_dadd+0xc4>
 800149c:	430a      	orrs	r2, r1
 800149e:	1e51      	subs	r1, r2, #1
 80014a0:	418a      	sbcs	r2, r1
 80014a2:	2100      	movs	r1, #0
 80014a4:	e707      	b.n	80012b6 <__aeabi_dadd+0xa2>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d000      	beq.n	80014ac <__aeabi_dadd+0x298>
 80014aa:	e0f3      	b.n	8001694 <__aeabi_dadd+0x480>
 80014ac:	1c70      	adds	r0, r6, #1
 80014ae:	0543      	lsls	r3, r0, #21
 80014b0:	0d5b      	lsrs	r3, r3, #21
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	dc00      	bgt.n	80014b8 <__aeabi_dadd+0x2a4>
 80014b6:	e0ad      	b.n	8001614 <__aeabi_dadd+0x400>
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <__aeabi_dadd+0x380>)
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dadd+0x2ac>
 80014be:	e0d1      	b.n	8001664 <__aeabi_dadd+0x450>
 80014c0:	18ba      	adds	r2, r7, r2
 80014c2:	42ba      	cmp	r2, r7
 80014c4:	41bf      	sbcs	r7, r7
 80014c6:	1864      	adds	r4, r4, r1
 80014c8:	427f      	negs	r7, r7
 80014ca:	19e4      	adds	r4, r4, r7
 80014cc:	07e7      	lsls	r7, r4, #31
 80014ce:	0852      	lsrs	r2, r2, #1
 80014d0:	4317      	orrs	r7, r2
 80014d2:	0864      	lsrs	r4, r4, #1
 80014d4:	0006      	movs	r6, r0
 80014d6:	e721      	b.n	800131c <__aeabi_dadd+0x108>
 80014d8:	482e      	ldr	r0, [pc, #184]	; (8001594 <__aeabi_dadd+0x380>)
 80014da:	4285      	cmp	r5, r0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dadd+0x2cc>
 80014de:	e093      	b.n	8001608 <__aeabi_dadd+0x3f4>
 80014e0:	001d      	movs	r5, r3
 80014e2:	e6d0      	b.n	8001286 <__aeabi_dadd+0x72>
 80014e4:	0029      	movs	r1, r5
 80014e6:	3e1f      	subs	r6, #31
 80014e8:	40f1      	lsrs	r1, r6
 80014ea:	2b20      	cmp	r3, #32
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dadd+0x2dc>
 80014ee:	e08d      	b.n	800160c <__aeabi_dadd+0x3f8>
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	409d      	lsls	r5, r3
 80014f6:	432f      	orrs	r7, r5
 80014f8:	1e7d      	subs	r5, r7, #1
 80014fa:	41af      	sbcs	r7, r5
 80014fc:	2400      	movs	r4, #0
 80014fe:	430f      	orrs	r7, r1
 8001500:	2600      	movs	r6, #0
 8001502:	e744      	b.n	800138e <__aeabi_dadd+0x17a>
 8001504:	002b      	movs	r3, r5
 8001506:	0008      	movs	r0, r1
 8001508:	3b20      	subs	r3, #32
 800150a:	40d8      	lsrs	r0, r3
 800150c:	0003      	movs	r3, r0
 800150e:	2d20      	cmp	r5, #32
 8001510:	d100      	bne.n	8001514 <__aeabi_dadd+0x300>
 8001512:	e07d      	b.n	8001610 <__aeabi_dadd+0x3fc>
 8001514:	2040      	movs	r0, #64	; 0x40
 8001516:	1b45      	subs	r5, r0, r5
 8001518:	40a9      	lsls	r1, r5
 800151a:	430a      	orrs	r2, r1
 800151c:	1e51      	subs	r1, r2, #1
 800151e:	418a      	sbcs	r2, r1
 8001520:	2100      	movs	r1, #0
 8001522:	431a      	orrs	r2, r3
 8001524:	e6c7      	b.n	80012b6 <__aeabi_dadd+0xa2>
 8001526:	2e00      	cmp	r6, #0
 8001528:	d050      	beq.n	80015cc <__aeabi_dadd+0x3b8>
 800152a:	4e1a      	ldr	r6, [pc, #104]	; (8001594 <__aeabi_dadd+0x380>)
 800152c:	42b0      	cmp	r0, r6
 800152e:	d057      	beq.n	80015e0 <__aeabi_dadd+0x3cc>
 8001530:	2680      	movs	r6, #128	; 0x80
 8001532:	426b      	negs	r3, r5
 8001534:	4699      	mov	r9, r3
 8001536:	0436      	lsls	r6, r6, #16
 8001538:	4334      	orrs	r4, r6
 800153a:	464b      	mov	r3, r9
 800153c:	2b38      	cmp	r3, #56	; 0x38
 800153e:	dd00      	ble.n	8001542 <__aeabi_dadd+0x32e>
 8001540:	e0d6      	b.n	80016f0 <__aeabi_dadd+0x4dc>
 8001542:	2b1f      	cmp	r3, #31
 8001544:	dd00      	ble.n	8001548 <__aeabi_dadd+0x334>
 8001546:	e135      	b.n	80017b4 <__aeabi_dadd+0x5a0>
 8001548:	2620      	movs	r6, #32
 800154a:	1af5      	subs	r5, r6, r3
 800154c:	0026      	movs	r6, r4
 800154e:	40ae      	lsls	r6, r5
 8001550:	46b2      	mov	sl, r6
 8001552:	003e      	movs	r6, r7
 8001554:	40de      	lsrs	r6, r3
 8001556:	46ac      	mov	ip, r5
 8001558:	0035      	movs	r5, r6
 800155a:	4656      	mov	r6, sl
 800155c:	432e      	orrs	r6, r5
 800155e:	4665      	mov	r5, ip
 8001560:	40af      	lsls	r7, r5
 8001562:	1e7d      	subs	r5, r7, #1
 8001564:	41af      	sbcs	r7, r5
 8001566:	40dc      	lsrs	r4, r3
 8001568:	4337      	orrs	r7, r6
 800156a:	1bd7      	subs	r7, r2, r7
 800156c:	42ba      	cmp	r2, r7
 800156e:	4192      	sbcs	r2, r2
 8001570:	1b0c      	subs	r4, r1, r4
 8001572:	4252      	negs	r2, r2
 8001574:	1aa4      	subs	r4, r4, r2
 8001576:	0006      	movs	r6, r0
 8001578:	46d8      	mov	r8, fp
 800157a:	e6a3      	b.n	80012c4 <__aeabi_dadd+0xb0>
 800157c:	4664      	mov	r4, ip
 800157e:	4667      	mov	r7, ip
 8001580:	432c      	orrs	r4, r5
 8001582:	d000      	beq.n	8001586 <__aeabi_dadd+0x372>
 8001584:	e6a2      	b.n	80012cc <__aeabi_dadd+0xb8>
 8001586:	2500      	movs	r5, #0
 8001588:	2600      	movs	r6, #0
 800158a:	2700      	movs	r7, #0
 800158c:	e706      	b.n	800139c <__aeabi_dadd+0x188>
 800158e:	001e      	movs	r6, r3
 8001590:	e6c4      	b.n	800131c <__aeabi_dadd+0x108>
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	000007ff 	.word	0x000007ff
 8001598:	ff7fffff 	.word	0xff7fffff
 800159c:	800fffff 	.word	0x800fffff
 80015a0:	2b1f      	cmp	r3, #31
 80015a2:	dc63      	bgt.n	800166c <__aeabi_dadd+0x458>
 80015a4:	2020      	movs	r0, #32
 80015a6:	1ac3      	subs	r3, r0, r3
 80015a8:	0008      	movs	r0, r1
 80015aa:	4098      	lsls	r0, r3
 80015ac:	469c      	mov	ip, r3
 80015ae:	4683      	mov	fp, r0
 80015b0:	4653      	mov	r3, sl
 80015b2:	0010      	movs	r0, r2
 80015b4:	40d8      	lsrs	r0, r3
 80015b6:	0003      	movs	r3, r0
 80015b8:	4658      	mov	r0, fp
 80015ba:	4318      	orrs	r0, r3
 80015bc:	4663      	mov	r3, ip
 80015be:	409a      	lsls	r2, r3
 80015c0:	1e53      	subs	r3, r2, #1
 80015c2:	419a      	sbcs	r2, r3
 80015c4:	4653      	mov	r3, sl
 80015c6:	4302      	orrs	r2, r0
 80015c8:	40d9      	lsrs	r1, r3
 80015ca:	e703      	b.n	80013d4 <__aeabi_dadd+0x1c0>
 80015cc:	0026      	movs	r6, r4
 80015ce:	433e      	orrs	r6, r7
 80015d0:	d006      	beq.n	80015e0 <__aeabi_dadd+0x3cc>
 80015d2:	43eb      	mvns	r3, r5
 80015d4:	4699      	mov	r9, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0c7      	beq.n	800156a <__aeabi_dadd+0x356>
 80015da:	4e94      	ldr	r6, [pc, #592]	; (800182c <__aeabi_dadd+0x618>)
 80015dc:	42b0      	cmp	r0, r6
 80015de:	d1ac      	bne.n	800153a <__aeabi_dadd+0x326>
 80015e0:	000c      	movs	r4, r1
 80015e2:	0017      	movs	r7, r2
 80015e4:	0006      	movs	r6, r0
 80015e6:	46d8      	mov	r8, fp
 80015e8:	e698      	b.n	800131c <__aeabi_dadd+0x108>
 80015ea:	4b90      	ldr	r3, [pc, #576]	; (800182c <__aeabi_dadd+0x618>)
 80015ec:	459a      	cmp	sl, r3
 80015ee:	d00b      	beq.n	8001608 <__aeabi_dadd+0x3f4>
 80015f0:	4682      	mov	sl, r0
 80015f2:	e6e7      	b.n	80013c4 <__aeabi_dadd+0x1b0>
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d000      	beq.n	80015fa <__aeabi_dadd+0x3e6>
 80015f8:	e09e      	b.n	8001738 <__aeabi_dadd+0x524>
 80015fa:	0018      	movs	r0, r3
 80015fc:	4310      	orrs	r0, r2
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x3ee>
 8001600:	e0e9      	b.n	80017d6 <__aeabi_dadd+0x5c2>
 8001602:	001c      	movs	r4, r3
 8001604:	0017      	movs	r7, r2
 8001606:	46d8      	mov	r8, fp
 8001608:	4e88      	ldr	r6, [pc, #544]	; (800182c <__aeabi_dadd+0x618>)
 800160a:	e687      	b.n	800131c <__aeabi_dadd+0x108>
 800160c:	2500      	movs	r5, #0
 800160e:	e772      	b.n	80014f6 <__aeabi_dadd+0x2e2>
 8001610:	2100      	movs	r1, #0
 8001612:	e782      	b.n	800151a <__aeabi_dadd+0x306>
 8001614:	0023      	movs	r3, r4
 8001616:	433b      	orrs	r3, r7
 8001618:	2e00      	cmp	r6, #0
 800161a:	d000      	beq.n	800161e <__aeabi_dadd+0x40a>
 800161c:	e0ab      	b.n	8001776 <__aeabi_dadd+0x562>
 800161e:	2b00      	cmp	r3, #0
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0x410>
 8001622:	e0e7      	b.n	80017f4 <__aeabi_dadd+0x5e0>
 8001624:	000b      	movs	r3, r1
 8001626:	4313      	orrs	r3, r2
 8001628:	d100      	bne.n	800162c <__aeabi_dadd+0x418>
 800162a:	e677      	b.n	800131c <__aeabi_dadd+0x108>
 800162c:	18ba      	adds	r2, r7, r2
 800162e:	42ba      	cmp	r2, r7
 8001630:	41bf      	sbcs	r7, r7
 8001632:	1864      	adds	r4, r4, r1
 8001634:	427f      	negs	r7, r7
 8001636:	19e4      	adds	r4, r4, r7
 8001638:	0223      	lsls	r3, r4, #8
 800163a:	d400      	bmi.n	800163e <__aeabi_dadd+0x42a>
 800163c:	e0f2      	b.n	8001824 <__aeabi_dadd+0x610>
 800163e:	4b7c      	ldr	r3, [pc, #496]	; (8001830 <__aeabi_dadd+0x61c>)
 8001640:	0017      	movs	r7, r2
 8001642:	401c      	ands	r4, r3
 8001644:	0006      	movs	r6, r0
 8001646:	e669      	b.n	800131c <__aeabi_dadd+0x108>
 8001648:	0020      	movs	r0, r4
 800164a:	4338      	orrs	r0, r7
 800164c:	2e00      	cmp	r6, #0
 800164e:	d1d1      	bne.n	80015f4 <__aeabi_dadd+0x3e0>
 8001650:	2800      	cmp	r0, #0
 8001652:	d15b      	bne.n	800170c <__aeabi_dadd+0x4f8>
 8001654:	001c      	movs	r4, r3
 8001656:	4314      	orrs	r4, r2
 8001658:	d100      	bne.n	800165c <__aeabi_dadd+0x448>
 800165a:	e0a8      	b.n	80017ae <__aeabi_dadd+0x59a>
 800165c:	001c      	movs	r4, r3
 800165e:	0017      	movs	r7, r2
 8001660:	46d8      	mov	r8, fp
 8001662:	e65b      	b.n	800131c <__aeabi_dadd+0x108>
 8001664:	0006      	movs	r6, r0
 8001666:	2400      	movs	r4, #0
 8001668:	2700      	movs	r7, #0
 800166a:	e697      	b.n	800139c <__aeabi_dadd+0x188>
 800166c:	4650      	mov	r0, sl
 800166e:	000b      	movs	r3, r1
 8001670:	3820      	subs	r0, #32
 8001672:	40c3      	lsrs	r3, r0
 8001674:	4699      	mov	r9, r3
 8001676:	4653      	mov	r3, sl
 8001678:	2b20      	cmp	r3, #32
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x46a>
 800167c:	e095      	b.n	80017aa <__aeabi_dadd+0x596>
 800167e:	2340      	movs	r3, #64	; 0x40
 8001680:	4650      	mov	r0, sl
 8001682:	1a1b      	subs	r3, r3, r0
 8001684:	4099      	lsls	r1, r3
 8001686:	430a      	orrs	r2, r1
 8001688:	1e51      	subs	r1, r2, #1
 800168a:	418a      	sbcs	r2, r1
 800168c:	464b      	mov	r3, r9
 800168e:	2100      	movs	r1, #0
 8001690:	431a      	orrs	r2, r3
 8001692:	e69f      	b.n	80013d4 <__aeabi_dadd+0x1c0>
 8001694:	2e00      	cmp	r6, #0
 8001696:	d130      	bne.n	80016fa <__aeabi_dadd+0x4e6>
 8001698:	0026      	movs	r6, r4
 800169a:	433e      	orrs	r6, r7
 800169c:	d067      	beq.n	800176e <__aeabi_dadd+0x55a>
 800169e:	43db      	mvns	r3, r3
 80016a0:	469a      	mov	sl, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01c      	beq.n	80016e0 <__aeabi_dadd+0x4cc>
 80016a6:	4e61      	ldr	r6, [pc, #388]	; (800182c <__aeabi_dadd+0x618>)
 80016a8:	42b0      	cmp	r0, r6
 80016aa:	d060      	beq.n	800176e <__aeabi_dadd+0x55a>
 80016ac:	4653      	mov	r3, sl
 80016ae:	2b38      	cmp	r3, #56	; 0x38
 80016b0:	dd00      	ble.n	80016b4 <__aeabi_dadd+0x4a0>
 80016b2:	e096      	b.n	80017e2 <__aeabi_dadd+0x5ce>
 80016b4:	2b1f      	cmp	r3, #31
 80016b6:	dd00      	ble.n	80016ba <__aeabi_dadd+0x4a6>
 80016b8:	e09f      	b.n	80017fa <__aeabi_dadd+0x5e6>
 80016ba:	2620      	movs	r6, #32
 80016bc:	1af3      	subs	r3, r6, r3
 80016be:	0026      	movs	r6, r4
 80016c0:	409e      	lsls	r6, r3
 80016c2:	469c      	mov	ip, r3
 80016c4:	46b3      	mov	fp, r6
 80016c6:	4653      	mov	r3, sl
 80016c8:	003e      	movs	r6, r7
 80016ca:	40de      	lsrs	r6, r3
 80016cc:	0033      	movs	r3, r6
 80016ce:	465e      	mov	r6, fp
 80016d0:	431e      	orrs	r6, r3
 80016d2:	4663      	mov	r3, ip
 80016d4:	409f      	lsls	r7, r3
 80016d6:	1e7b      	subs	r3, r7, #1
 80016d8:	419f      	sbcs	r7, r3
 80016da:	4653      	mov	r3, sl
 80016dc:	40dc      	lsrs	r4, r3
 80016de:	4337      	orrs	r7, r6
 80016e0:	18bf      	adds	r7, r7, r2
 80016e2:	4297      	cmp	r7, r2
 80016e4:	4192      	sbcs	r2, r2
 80016e6:	1864      	adds	r4, r4, r1
 80016e8:	4252      	negs	r2, r2
 80016ea:	18a4      	adds	r4, r4, r2
 80016ec:	0006      	movs	r6, r0
 80016ee:	e678      	b.n	80013e2 <__aeabi_dadd+0x1ce>
 80016f0:	4327      	orrs	r7, r4
 80016f2:	1e7c      	subs	r4, r7, #1
 80016f4:	41a7      	sbcs	r7, r4
 80016f6:	2400      	movs	r4, #0
 80016f8:	e737      	b.n	800156a <__aeabi_dadd+0x356>
 80016fa:	4e4c      	ldr	r6, [pc, #304]	; (800182c <__aeabi_dadd+0x618>)
 80016fc:	42b0      	cmp	r0, r6
 80016fe:	d036      	beq.n	800176e <__aeabi_dadd+0x55a>
 8001700:	2680      	movs	r6, #128	; 0x80
 8001702:	425b      	negs	r3, r3
 8001704:	0436      	lsls	r6, r6, #16
 8001706:	469a      	mov	sl, r3
 8001708:	4334      	orrs	r4, r6
 800170a:	e7cf      	b.n	80016ac <__aeabi_dadd+0x498>
 800170c:	0018      	movs	r0, r3
 800170e:	4310      	orrs	r0, r2
 8001710:	d100      	bne.n	8001714 <__aeabi_dadd+0x500>
 8001712:	e603      	b.n	800131c <__aeabi_dadd+0x108>
 8001714:	1ab8      	subs	r0, r7, r2
 8001716:	4684      	mov	ip, r0
 8001718:	4567      	cmp	r7, ip
 800171a:	41ad      	sbcs	r5, r5
 800171c:	1ae0      	subs	r0, r4, r3
 800171e:	426d      	negs	r5, r5
 8001720:	1b40      	subs	r0, r0, r5
 8001722:	0205      	lsls	r5, r0, #8
 8001724:	d400      	bmi.n	8001728 <__aeabi_dadd+0x514>
 8001726:	e62c      	b.n	8001382 <__aeabi_dadd+0x16e>
 8001728:	1bd7      	subs	r7, r2, r7
 800172a:	42ba      	cmp	r2, r7
 800172c:	4192      	sbcs	r2, r2
 800172e:	1b1c      	subs	r4, r3, r4
 8001730:	4252      	negs	r2, r2
 8001732:	1aa4      	subs	r4, r4, r2
 8001734:	46d8      	mov	r8, fp
 8001736:	e5f1      	b.n	800131c <__aeabi_dadd+0x108>
 8001738:	0018      	movs	r0, r3
 800173a:	4310      	orrs	r0, r2
 800173c:	d100      	bne.n	8001740 <__aeabi_dadd+0x52c>
 800173e:	e763      	b.n	8001608 <__aeabi_dadd+0x3f4>
 8001740:	08f8      	lsrs	r0, r7, #3
 8001742:	0767      	lsls	r7, r4, #29
 8001744:	4307      	orrs	r7, r0
 8001746:	2080      	movs	r0, #128	; 0x80
 8001748:	08e4      	lsrs	r4, r4, #3
 800174a:	0300      	lsls	r0, r0, #12
 800174c:	4204      	tst	r4, r0
 800174e:	d008      	beq.n	8001762 <__aeabi_dadd+0x54e>
 8001750:	08dd      	lsrs	r5, r3, #3
 8001752:	4205      	tst	r5, r0
 8001754:	d105      	bne.n	8001762 <__aeabi_dadd+0x54e>
 8001756:	08d2      	lsrs	r2, r2, #3
 8001758:	0759      	lsls	r1, r3, #29
 800175a:	4311      	orrs	r1, r2
 800175c:	000f      	movs	r7, r1
 800175e:	002c      	movs	r4, r5
 8001760:	46d8      	mov	r8, fp
 8001762:	0f7b      	lsrs	r3, r7, #29
 8001764:	00e4      	lsls	r4, r4, #3
 8001766:	431c      	orrs	r4, r3
 8001768:	00ff      	lsls	r7, r7, #3
 800176a:	4e30      	ldr	r6, [pc, #192]	; (800182c <__aeabi_dadd+0x618>)
 800176c:	e5d6      	b.n	800131c <__aeabi_dadd+0x108>
 800176e:	000c      	movs	r4, r1
 8001770:	0017      	movs	r7, r2
 8001772:	0006      	movs	r6, r0
 8001774:	e5d2      	b.n	800131c <__aeabi_dadd+0x108>
 8001776:	2b00      	cmp	r3, #0
 8001778:	d038      	beq.n	80017ec <__aeabi_dadd+0x5d8>
 800177a:	000b      	movs	r3, r1
 800177c:	4313      	orrs	r3, r2
 800177e:	d100      	bne.n	8001782 <__aeabi_dadd+0x56e>
 8001780:	e742      	b.n	8001608 <__aeabi_dadd+0x3f4>
 8001782:	08f8      	lsrs	r0, r7, #3
 8001784:	0767      	lsls	r7, r4, #29
 8001786:	4307      	orrs	r7, r0
 8001788:	2080      	movs	r0, #128	; 0x80
 800178a:	08e4      	lsrs	r4, r4, #3
 800178c:	0300      	lsls	r0, r0, #12
 800178e:	4204      	tst	r4, r0
 8001790:	d0e7      	beq.n	8001762 <__aeabi_dadd+0x54e>
 8001792:	08cb      	lsrs	r3, r1, #3
 8001794:	4203      	tst	r3, r0
 8001796:	d1e4      	bne.n	8001762 <__aeabi_dadd+0x54e>
 8001798:	08d2      	lsrs	r2, r2, #3
 800179a:	0749      	lsls	r1, r1, #29
 800179c:	4311      	orrs	r1, r2
 800179e:	000f      	movs	r7, r1
 80017a0:	001c      	movs	r4, r3
 80017a2:	e7de      	b.n	8001762 <__aeabi_dadd+0x54e>
 80017a4:	2700      	movs	r7, #0
 80017a6:	2400      	movs	r4, #0
 80017a8:	e5d5      	b.n	8001356 <__aeabi_dadd+0x142>
 80017aa:	2100      	movs	r1, #0
 80017ac:	e76b      	b.n	8001686 <__aeabi_dadd+0x472>
 80017ae:	2500      	movs	r5, #0
 80017b0:	2700      	movs	r7, #0
 80017b2:	e5f3      	b.n	800139c <__aeabi_dadd+0x188>
 80017b4:	464e      	mov	r6, r9
 80017b6:	0025      	movs	r5, r4
 80017b8:	3e20      	subs	r6, #32
 80017ba:	40f5      	lsrs	r5, r6
 80017bc:	464b      	mov	r3, r9
 80017be:	002e      	movs	r6, r5
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	d02d      	beq.n	8001820 <__aeabi_dadd+0x60c>
 80017c4:	2540      	movs	r5, #64	; 0x40
 80017c6:	1aed      	subs	r5, r5, r3
 80017c8:	40ac      	lsls	r4, r5
 80017ca:	4327      	orrs	r7, r4
 80017cc:	1e7c      	subs	r4, r7, #1
 80017ce:	41a7      	sbcs	r7, r4
 80017d0:	2400      	movs	r4, #0
 80017d2:	4337      	orrs	r7, r6
 80017d4:	e6c9      	b.n	800156a <__aeabi_dadd+0x356>
 80017d6:	2480      	movs	r4, #128	; 0x80
 80017d8:	2500      	movs	r5, #0
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	4e13      	ldr	r6, [pc, #76]	; (800182c <__aeabi_dadd+0x618>)
 80017de:	2700      	movs	r7, #0
 80017e0:	e5dc      	b.n	800139c <__aeabi_dadd+0x188>
 80017e2:	4327      	orrs	r7, r4
 80017e4:	1e7c      	subs	r4, r7, #1
 80017e6:	41a7      	sbcs	r7, r4
 80017e8:	2400      	movs	r4, #0
 80017ea:	e779      	b.n	80016e0 <__aeabi_dadd+0x4cc>
 80017ec:	000c      	movs	r4, r1
 80017ee:	0017      	movs	r7, r2
 80017f0:	4e0e      	ldr	r6, [pc, #56]	; (800182c <__aeabi_dadd+0x618>)
 80017f2:	e593      	b.n	800131c <__aeabi_dadd+0x108>
 80017f4:	000c      	movs	r4, r1
 80017f6:	0017      	movs	r7, r2
 80017f8:	e590      	b.n	800131c <__aeabi_dadd+0x108>
 80017fa:	4656      	mov	r6, sl
 80017fc:	0023      	movs	r3, r4
 80017fe:	3e20      	subs	r6, #32
 8001800:	40f3      	lsrs	r3, r6
 8001802:	4699      	mov	r9, r3
 8001804:	4653      	mov	r3, sl
 8001806:	2b20      	cmp	r3, #32
 8001808:	d00e      	beq.n	8001828 <__aeabi_dadd+0x614>
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	4656      	mov	r6, sl
 800180e:	1b9b      	subs	r3, r3, r6
 8001810:	409c      	lsls	r4, r3
 8001812:	4327      	orrs	r7, r4
 8001814:	1e7c      	subs	r4, r7, #1
 8001816:	41a7      	sbcs	r7, r4
 8001818:	464b      	mov	r3, r9
 800181a:	2400      	movs	r4, #0
 800181c:	431f      	orrs	r7, r3
 800181e:	e75f      	b.n	80016e0 <__aeabi_dadd+0x4cc>
 8001820:	2400      	movs	r4, #0
 8001822:	e7d2      	b.n	80017ca <__aeabi_dadd+0x5b6>
 8001824:	0017      	movs	r7, r2
 8001826:	e5b2      	b.n	800138e <__aeabi_dadd+0x17a>
 8001828:	2400      	movs	r4, #0
 800182a:	e7f2      	b.n	8001812 <__aeabi_dadd+0x5fe>
 800182c:	000007ff 	.word	0x000007ff
 8001830:	ff7fffff 	.word	0xff7fffff

08001834 <__aeabi_ddiv>:
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	4657      	mov	r7, sl
 8001838:	4645      	mov	r5, r8
 800183a:	46de      	mov	lr, fp
 800183c:	464e      	mov	r6, r9
 800183e:	b5e0      	push	{r5, r6, r7, lr}
 8001840:	004c      	lsls	r4, r1, #1
 8001842:	030e      	lsls	r6, r1, #12
 8001844:	b087      	sub	sp, #28
 8001846:	4683      	mov	fp, r0
 8001848:	4692      	mov	sl, r2
 800184a:	001d      	movs	r5, r3
 800184c:	4680      	mov	r8, r0
 800184e:	0b36      	lsrs	r6, r6, #12
 8001850:	0d64      	lsrs	r4, r4, #21
 8001852:	0fcf      	lsrs	r7, r1, #31
 8001854:	2c00      	cmp	r4, #0
 8001856:	d04f      	beq.n	80018f8 <__aeabi_ddiv+0xc4>
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <__aeabi_ddiv+0x1e4>)
 800185a:	429c      	cmp	r4, r3
 800185c:	d035      	beq.n	80018ca <__aeabi_ddiv+0x96>
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	0f42      	lsrs	r2, r0, #29
 8001862:	041b      	lsls	r3, r3, #16
 8001864:	00f6      	lsls	r6, r6, #3
 8001866:	4313      	orrs	r3, r2
 8001868:	4333      	orrs	r3, r6
 800186a:	4699      	mov	r9, r3
 800186c:	00c3      	lsls	r3, r0, #3
 800186e:	4698      	mov	r8, r3
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <__aeabi_ddiv+0x1e8>)
 8001872:	2600      	movs	r6, #0
 8001874:	469c      	mov	ip, r3
 8001876:	2300      	movs	r3, #0
 8001878:	4464      	add	r4, ip
 800187a:	9303      	str	r3, [sp, #12]
 800187c:	032b      	lsls	r3, r5, #12
 800187e:	0b1b      	lsrs	r3, r3, #12
 8001880:	469b      	mov	fp, r3
 8001882:	006b      	lsls	r3, r5, #1
 8001884:	0fed      	lsrs	r5, r5, #31
 8001886:	4650      	mov	r0, sl
 8001888:	0d5b      	lsrs	r3, r3, #21
 800188a:	9501      	str	r5, [sp, #4]
 800188c:	d05e      	beq.n	800194c <__aeabi_ddiv+0x118>
 800188e:	4a62      	ldr	r2, [pc, #392]	; (8001a18 <__aeabi_ddiv+0x1e4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d053      	beq.n	800193c <__aeabi_ddiv+0x108>
 8001894:	465a      	mov	r2, fp
 8001896:	00d1      	lsls	r1, r2, #3
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	0f40      	lsrs	r0, r0, #29
 800189c:	0412      	lsls	r2, r2, #16
 800189e:	4302      	orrs	r2, r0
 80018a0:	430a      	orrs	r2, r1
 80018a2:	4693      	mov	fp, r2
 80018a4:	4652      	mov	r2, sl
 80018a6:	00d1      	lsls	r1, r2, #3
 80018a8:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <__aeabi_ddiv+0x1e8>)
 80018aa:	4694      	mov	ip, r2
 80018ac:	2200      	movs	r2, #0
 80018ae:	4463      	add	r3, ip
 80018b0:	0038      	movs	r0, r7
 80018b2:	4068      	eors	r0, r5
 80018b4:	4684      	mov	ip, r0
 80018b6:	9002      	str	r0, [sp, #8]
 80018b8:	1ae4      	subs	r4, r4, r3
 80018ba:	4316      	orrs	r6, r2
 80018bc:	2e0f      	cmp	r6, #15
 80018be:	d900      	bls.n	80018c2 <__aeabi_ddiv+0x8e>
 80018c0:	e0b4      	b.n	8001a2c <__aeabi_ddiv+0x1f8>
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <__aeabi_ddiv+0x1ec>)
 80018c4:	00b6      	lsls	r6, r6, #2
 80018c6:	599b      	ldr	r3, [r3, r6]
 80018c8:	469f      	mov	pc, r3
 80018ca:	0003      	movs	r3, r0
 80018cc:	4333      	orrs	r3, r6
 80018ce:	4699      	mov	r9, r3
 80018d0:	d16c      	bne.n	80019ac <__aeabi_ddiv+0x178>
 80018d2:	2300      	movs	r3, #0
 80018d4:	4698      	mov	r8, r3
 80018d6:	3302      	adds	r3, #2
 80018d8:	2608      	movs	r6, #8
 80018da:	9303      	str	r3, [sp, #12]
 80018dc:	e7ce      	b.n	800187c <__aeabi_ddiv+0x48>
 80018de:	46cb      	mov	fp, r9
 80018e0:	4641      	mov	r1, r8
 80018e2:	9a03      	ldr	r2, [sp, #12]
 80018e4:	9701      	str	r7, [sp, #4]
 80018e6:	2a02      	cmp	r2, #2
 80018e8:	d165      	bne.n	80019b6 <__aeabi_ddiv+0x182>
 80018ea:	9b01      	ldr	r3, [sp, #4]
 80018ec:	4c4a      	ldr	r4, [pc, #296]	; (8001a18 <__aeabi_ddiv+0x1e4>)
 80018ee:	469c      	mov	ip, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	2200      	movs	r2, #0
 80018f4:	4698      	mov	r8, r3
 80018f6:	e06b      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 80018f8:	0003      	movs	r3, r0
 80018fa:	4333      	orrs	r3, r6
 80018fc:	4699      	mov	r9, r3
 80018fe:	d04e      	beq.n	800199e <__aeabi_ddiv+0x16a>
 8001900:	2e00      	cmp	r6, #0
 8001902:	d100      	bne.n	8001906 <__aeabi_ddiv+0xd2>
 8001904:	e1bc      	b.n	8001c80 <__aeabi_ddiv+0x44c>
 8001906:	0030      	movs	r0, r6
 8001908:	f001 fae8 	bl	8002edc <__clzsi2>
 800190c:	0003      	movs	r3, r0
 800190e:	3b0b      	subs	r3, #11
 8001910:	2b1c      	cmp	r3, #28
 8001912:	dd00      	ble.n	8001916 <__aeabi_ddiv+0xe2>
 8001914:	e1ac      	b.n	8001c70 <__aeabi_ddiv+0x43c>
 8001916:	221d      	movs	r2, #29
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	465a      	mov	r2, fp
 800191c:	0001      	movs	r1, r0
 800191e:	40da      	lsrs	r2, r3
 8001920:	3908      	subs	r1, #8
 8001922:	408e      	lsls	r6, r1
 8001924:	0013      	movs	r3, r2
 8001926:	4333      	orrs	r3, r6
 8001928:	4699      	mov	r9, r3
 800192a:	465b      	mov	r3, fp
 800192c:	408b      	lsls	r3, r1
 800192e:	4698      	mov	r8, r3
 8001930:	2300      	movs	r3, #0
 8001932:	4c3c      	ldr	r4, [pc, #240]	; (8001a24 <__aeabi_ddiv+0x1f0>)
 8001934:	2600      	movs	r6, #0
 8001936:	1a24      	subs	r4, r4, r0
 8001938:	9303      	str	r3, [sp, #12]
 800193a:	e79f      	b.n	800187c <__aeabi_ddiv+0x48>
 800193c:	4651      	mov	r1, sl
 800193e:	465a      	mov	r2, fp
 8001940:	4311      	orrs	r1, r2
 8001942:	d129      	bne.n	8001998 <__aeabi_ddiv+0x164>
 8001944:	2200      	movs	r2, #0
 8001946:	4693      	mov	fp, r2
 8001948:	3202      	adds	r2, #2
 800194a:	e7b1      	b.n	80018b0 <__aeabi_ddiv+0x7c>
 800194c:	4659      	mov	r1, fp
 800194e:	4301      	orrs	r1, r0
 8001950:	d01e      	beq.n	8001990 <__aeabi_ddiv+0x15c>
 8001952:	465b      	mov	r3, fp
 8001954:	2b00      	cmp	r3, #0
 8001956:	d100      	bne.n	800195a <__aeabi_ddiv+0x126>
 8001958:	e19e      	b.n	8001c98 <__aeabi_ddiv+0x464>
 800195a:	4658      	mov	r0, fp
 800195c:	f001 fabe 	bl	8002edc <__clzsi2>
 8001960:	0003      	movs	r3, r0
 8001962:	3b0b      	subs	r3, #11
 8001964:	2b1c      	cmp	r3, #28
 8001966:	dd00      	ble.n	800196a <__aeabi_ddiv+0x136>
 8001968:	e18f      	b.n	8001c8a <__aeabi_ddiv+0x456>
 800196a:	0002      	movs	r2, r0
 800196c:	4659      	mov	r1, fp
 800196e:	3a08      	subs	r2, #8
 8001970:	4091      	lsls	r1, r2
 8001972:	468b      	mov	fp, r1
 8001974:	211d      	movs	r1, #29
 8001976:	1acb      	subs	r3, r1, r3
 8001978:	4651      	mov	r1, sl
 800197a:	40d9      	lsrs	r1, r3
 800197c:	000b      	movs	r3, r1
 800197e:	4659      	mov	r1, fp
 8001980:	430b      	orrs	r3, r1
 8001982:	4651      	mov	r1, sl
 8001984:	469b      	mov	fp, r3
 8001986:	4091      	lsls	r1, r2
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <__aeabi_ddiv+0x1f0>)
 800198a:	2200      	movs	r2, #0
 800198c:	1a1b      	subs	r3, r3, r0
 800198e:	e78f      	b.n	80018b0 <__aeabi_ddiv+0x7c>
 8001990:	2300      	movs	r3, #0
 8001992:	2201      	movs	r2, #1
 8001994:	469b      	mov	fp, r3
 8001996:	e78b      	b.n	80018b0 <__aeabi_ddiv+0x7c>
 8001998:	4651      	mov	r1, sl
 800199a:	2203      	movs	r2, #3
 800199c:	e788      	b.n	80018b0 <__aeabi_ddiv+0x7c>
 800199e:	2300      	movs	r3, #0
 80019a0:	4698      	mov	r8, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	2604      	movs	r6, #4
 80019a6:	2400      	movs	r4, #0
 80019a8:	9303      	str	r3, [sp, #12]
 80019aa:	e767      	b.n	800187c <__aeabi_ddiv+0x48>
 80019ac:	2303      	movs	r3, #3
 80019ae:	46b1      	mov	r9, r6
 80019b0:	9303      	str	r3, [sp, #12]
 80019b2:	260c      	movs	r6, #12
 80019b4:	e762      	b.n	800187c <__aeabi_ddiv+0x48>
 80019b6:	2a03      	cmp	r2, #3
 80019b8:	d100      	bne.n	80019bc <__aeabi_ddiv+0x188>
 80019ba:	e25c      	b.n	8001e76 <__aeabi_ddiv+0x642>
 80019bc:	9b01      	ldr	r3, [sp, #4]
 80019be:	2a01      	cmp	r2, #1
 80019c0:	d000      	beq.n	80019c4 <__aeabi_ddiv+0x190>
 80019c2:	e1e4      	b.n	8001d8e <__aeabi_ddiv+0x55a>
 80019c4:	4013      	ands	r3, r2
 80019c6:	469c      	mov	ip, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	2400      	movs	r4, #0
 80019cc:	2200      	movs	r2, #0
 80019ce:	4698      	mov	r8, r3
 80019d0:	2100      	movs	r1, #0
 80019d2:	0312      	lsls	r2, r2, #12
 80019d4:	0b13      	lsrs	r3, r2, #12
 80019d6:	0d0a      	lsrs	r2, r1, #20
 80019d8:	0512      	lsls	r2, r2, #20
 80019da:	431a      	orrs	r2, r3
 80019dc:	0523      	lsls	r3, r4, #20
 80019de:	4c12      	ldr	r4, [pc, #72]	; (8001a28 <__aeabi_ddiv+0x1f4>)
 80019e0:	4640      	mov	r0, r8
 80019e2:	4022      	ands	r2, r4
 80019e4:	4313      	orrs	r3, r2
 80019e6:	4662      	mov	r2, ip
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	07d2      	lsls	r2, r2, #31
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	4313      	orrs	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	b007      	add	sp, #28
 80019f4:	bc3c      	pop	{r2, r3, r4, r5}
 80019f6:	4690      	mov	r8, r2
 80019f8:	4699      	mov	r9, r3
 80019fa:	46a2      	mov	sl, r4
 80019fc:	46ab      	mov	fp, r5
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a00:	2300      	movs	r3, #0
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	469c      	mov	ip, r3
 8001a06:	0312      	lsls	r2, r2, #12
 8001a08:	4698      	mov	r8, r3
 8001a0a:	4c03      	ldr	r4, [pc, #12]	; (8001a18 <__aeabi_ddiv+0x1e4>)
 8001a0c:	e7e0      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	4c01      	ldr	r4, [pc, #4]	; (8001a18 <__aeabi_ddiv+0x1e4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	4698      	mov	r8, r3
 8001a16:	e7db      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001a18:	000007ff 	.word	0x000007ff
 8001a1c:	fffffc01 	.word	0xfffffc01
 8001a20:	0800a340 	.word	0x0800a340
 8001a24:	fffffc0d 	.word	0xfffffc0d
 8001a28:	800fffff 	.word	0x800fffff
 8001a2c:	45d9      	cmp	r9, fp
 8001a2e:	d900      	bls.n	8001a32 <__aeabi_ddiv+0x1fe>
 8001a30:	e139      	b.n	8001ca6 <__aeabi_ddiv+0x472>
 8001a32:	d100      	bne.n	8001a36 <__aeabi_ddiv+0x202>
 8001a34:	e134      	b.n	8001ca0 <__aeabi_ddiv+0x46c>
 8001a36:	2300      	movs	r3, #0
 8001a38:	4646      	mov	r6, r8
 8001a3a:	464d      	mov	r5, r9
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	3c01      	subs	r4, #1
 8001a40:	465b      	mov	r3, fp
 8001a42:	0e0a      	lsrs	r2, r1, #24
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	431a      	orrs	r2, r3
 8001a48:	020b      	lsls	r3, r1, #8
 8001a4a:	0c17      	lsrs	r7, r2, #16
 8001a4c:	9303      	str	r3, [sp, #12]
 8001a4e:	0413      	lsls	r3, r2, #16
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	0039      	movs	r1, r7
 8001a54:	0028      	movs	r0, r5
 8001a56:	4690      	mov	r8, r2
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	f7fe fb7b 	bl	8000154 <__udivsi3>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	4683      	mov	fp, r0
 8001a64:	435a      	muls	r2, r3
 8001a66:	0028      	movs	r0, r5
 8001a68:	0039      	movs	r1, r7
 8001a6a:	4691      	mov	r9, r2
 8001a6c:	f7fe fbf8 	bl	8000260 <__aeabi_uidivmod>
 8001a70:	0c35      	lsrs	r5, r6, #16
 8001a72:	0409      	lsls	r1, r1, #16
 8001a74:	430d      	orrs	r5, r1
 8001a76:	45a9      	cmp	r9, r5
 8001a78:	d90d      	bls.n	8001a96 <__aeabi_ddiv+0x262>
 8001a7a:	465b      	mov	r3, fp
 8001a7c:	4445      	add	r5, r8
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	45a8      	cmp	r8, r5
 8001a82:	d900      	bls.n	8001a86 <__aeabi_ddiv+0x252>
 8001a84:	e13a      	b.n	8001cfc <__aeabi_ddiv+0x4c8>
 8001a86:	45a9      	cmp	r9, r5
 8001a88:	d800      	bhi.n	8001a8c <__aeabi_ddiv+0x258>
 8001a8a:	e137      	b.n	8001cfc <__aeabi_ddiv+0x4c8>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	425b      	negs	r3, r3
 8001a90:	469c      	mov	ip, r3
 8001a92:	4445      	add	r5, r8
 8001a94:	44e3      	add	fp, ip
 8001a96:	464b      	mov	r3, r9
 8001a98:	1aeb      	subs	r3, r5, r3
 8001a9a:	0039      	movs	r1, r7
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	9304      	str	r3, [sp, #16]
 8001aa0:	f7fe fb58 	bl	8000154 <__udivsi3>
 8001aa4:	9b01      	ldr	r3, [sp, #4]
 8001aa6:	0005      	movs	r5, r0
 8001aa8:	4343      	muls	r3, r0
 8001aaa:	0039      	movs	r1, r7
 8001aac:	9804      	ldr	r0, [sp, #16]
 8001aae:	4699      	mov	r9, r3
 8001ab0:	f7fe fbd6 	bl	8000260 <__aeabi_uidivmod>
 8001ab4:	0433      	lsls	r3, r6, #16
 8001ab6:	0409      	lsls	r1, r1, #16
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	430b      	orrs	r3, r1
 8001abc:	4599      	cmp	r9, r3
 8001abe:	d909      	bls.n	8001ad4 <__aeabi_ddiv+0x2a0>
 8001ac0:	4443      	add	r3, r8
 8001ac2:	1e6a      	subs	r2, r5, #1
 8001ac4:	4598      	cmp	r8, r3
 8001ac6:	d900      	bls.n	8001aca <__aeabi_ddiv+0x296>
 8001ac8:	e11a      	b.n	8001d00 <__aeabi_ddiv+0x4cc>
 8001aca:	4599      	cmp	r9, r3
 8001acc:	d800      	bhi.n	8001ad0 <__aeabi_ddiv+0x29c>
 8001ace:	e117      	b.n	8001d00 <__aeabi_ddiv+0x4cc>
 8001ad0:	3d02      	subs	r5, #2
 8001ad2:	4443      	add	r3, r8
 8001ad4:	464a      	mov	r2, r9
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	465a      	mov	r2, fp
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	432a      	orrs	r2, r5
 8001ade:	9903      	ldr	r1, [sp, #12]
 8001ae0:	4693      	mov	fp, r2
 8001ae2:	0c10      	lsrs	r0, r2, #16
 8001ae4:	0c0a      	lsrs	r2, r1, #16
 8001ae6:	4691      	mov	r9, r2
 8001ae8:	0409      	lsls	r1, r1, #16
 8001aea:	465a      	mov	r2, fp
 8001aec:	0c09      	lsrs	r1, r1, #16
 8001aee:	464e      	mov	r6, r9
 8001af0:	000d      	movs	r5, r1
 8001af2:	0412      	lsls	r2, r2, #16
 8001af4:	0c12      	lsrs	r2, r2, #16
 8001af6:	4345      	muls	r5, r0
 8001af8:	9105      	str	r1, [sp, #20]
 8001afa:	4351      	muls	r1, r2
 8001afc:	4372      	muls	r2, r6
 8001afe:	4370      	muls	r0, r6
 8001b00:	1952      	adds	r2, r2, r5
 8001b02:	0c0e      	lsrs	r6, r1, #16
 8001b04:	18b2      	adds	r2, r6, r2
 8001b06:	4295      	cmp	r5, r2
 8001b08:	d903      	bls.n	8001b12 <__aeabi_ddiv+0x2de>
 8001b0a:	2580      	movs	r5, #128	; 0x80
 8001b0c:	026d      	lsls	r5, r5, #9
 8001b0e:	46ac      	mov	ip, r5
 8001b10:	4460      	add	r0, ip
 8001b12:	0c15      	lsrs	r5, r2, #16
 8001b14:	0409      	lsls	r1, r1, #16
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	0c09      	lsrs	r1, r1, #16
 8001b1a:	1828      	adds	r0, r5, r0
 8001b1c:	1852      	adds	r2, r2, r1
 8001b1e:	4283      	cmp	r3, r0
 8001b20:	d200      	bcs.n	8001b24 <__aeabi_ddiv+0x2f0>
 8001b22:	e0ce      	b.n	8001cc2 <__aeabi_ddiv+0x48e>
 8001b24:	d100      	bne.n	8001b28 <__aeabi_ddiv+0x2f4>
 8001b26:	e0c8      	b.n	8001cba <__aeabi_ddiv+0x486>
 8001b28:	1a1d      	subs	r5, r3, r0
 8001b2a:	4653      	mov	r3, sl
 8001b2c:	1a9e      	subs	r6, r3, r2
 8001b2e:	45b2      	cmp	sl, r6
 8001b30:	4192      	sbcs	r2, r2
 8001b32:	4252      	negs	r2, r2
 8001b34:	1aab      	subs	r3, r5, r2
 8001b36:	469a      	mov	sl, r3
 8001b38:	4598      	cmp	r8, r3
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_ddiv+0x30a>
 8001b3c:	e117      	b.n	8001d6e <__aeabi_ddiv+0x53a>
 8001b3e:	0039      	movs	r1, r7
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7fe fb07 	bl	8000154 <__udivsi3>
 8001b46:	9b01      	ldr	r3, [sp, #4]
 8001b48:	0005      	movs	r5, r0
 8001b4a:	4343      	muls	r3, r0
 8001b4c:	0039      	movs	r1, r7
 8001b4e:	4650      	mov	r0, sl
 8001b50:	9304      	str	r3, [sp, #16]
 8001b52:	f7fe fb85 	bl	8000260 <__aeabi_uidivmod>
 8001b56:	9804      	ldr	r0, [sp, #16]
 8001b58:	040b      	lsls	r3, r1, #16
 8001b5a:	0c31      	lsrs	r1, r6, #16
 8001b5c:	4319      	orrs	r1, r3
 8001b5e:	4288      	cmp	r0, r1
 8001b60:	d909      	bls.n	8001b76 <__aeabi_ddiv+0x342>
 8001b62:	4441      	add	r1, r8
 8001b64:	1e6b      	subs	r3, r5, #1
 8001b66:	4588      	cmp	r8, r1
 8001b68:	d900      	bls.n	8001b6c <__aeabi_ddiv+0x338>
 8001b6a:	e107      	b.n	8001d7c <__aeabi_ddiv+0x548>
 8001b6c:	4288      	cmp	r0, r1
 8001b6e:	d800      	bhi.n	8001b72 <__aeabi_ddiv+0x33e>
 8001b70:	e104      	b.n	8001d7c <__aeabi_ddiv+0x548>
 8001b72:	3d02      	subs	r5, #2
 8001b74:	4441      	add	r1, r8
 8001b76:	9b04      	ldr	r3, [sp, #16]
 8001b78:	1acb      	subs	r3, r1, r3
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	0039      	movs	r1, r7
 8001b7e:	9304      	str	r3, [sp, #16]
 8001b80:	f7fe fae8 	bl	8000154 <__udivsi3>
 8001b84:	9b01      	ldr	r3, [sp, #4]
 8001b86:	4682      	mov	sl, r0
 8001b88:	4343      	muls	r3, r0
 8001b8a:	0039      	movs	r1, r7
 8001b8c:	9804      	ldr	r0, [sp, #16]
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	f7fe fb66 	bl	8000260 <__aeabi_uidivmod>
 8001b94:	9801      	ldr	r0, [sp, #4]
 8001b96:	040b      	lsls	r3, r1, #16
 8001b98:	0431      	lsls	r1, r6, #16
 8001b9a:	0c09      	lsrs	r1, r1, #16
 8001b9c:	4319      	orrs	r1, r3
 8001b9e:	4288      	cmp	r0, r1
 8001ba0:	d90d      	bls.n	8001bbe <__aeabi_ddiv+0x38a>
 8001ba2:	4653      	mov	r3, sl
 8001ba4:	4441      	add	r1, r8
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	4588      	cmp	r8, r1
 8001baa:	d900      	bls.n	8001bae <__aeabi_ddiv+0x37a>
 8001bac:	e0e8      	b.n	8001d80 <__aeabi_ddiv+0x54c>
 8001bae:	4288      	cmp	r0, r1
 8001bb0:	d800      	bhi.n	8001bb4 <__aeabi_ddiv+0x380>
 8001bb2:	e0e5      	b.n	8001d80 <__aeabi_ddiv+0x54c>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	425b      	negs	r3, r3
 8001bb8:	469c      	mov	ip, r3
 8001bba:	4441      	add	r1, r8
 8001bbc:	44e2      	add	sl, ip
 8001bbe:	9b01      	ldr	r3, [sp, #4]
 8001bc0:	042d      	lsls	r5, r5, #16
 8001bc2:	1ace      	subs	r6, r1, r3
 8001bc4:	4651      	mov	r1, sl
 8001bc6:	4329      	orrs	r1, r5
 8001bc8:	9d05      	ldr	r5, [sp, #20]
 8001bca:	464f      	mov	r7, r9
 8001bcc:	002a      	movs	r2, r5
 8001bce:	040b      	lsls	r3, r1, #16
 8001bd0:	0c08      	lsrs	r0, r1, #16
 8001bd2:	0c1b      	lsrs	r3, r3, #16
 8001bd4:	435a      	muls	r2, r3
 8001bd6:	4345      	muls	r5, r0
 8001bd8:	437b      	muls	r3, r7
 8001bda:	4378      	muls	r0, r7
 8001bdc:	195b      	adds	r3, r3, r5
 8001bde:	0c17      	lsrs	r7, r2, #16
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	429d      	cmp	r5, r3
 8001be4:	d903      	bls.n	8001bee <__aeabi_ddiv+0x3ba>
 8001be6:	2580      	movs	r5, #128	; 0x80
 8001be8:	026d      	lsls	r5, r5, #9
 8001bea:	46ac      	mov	ip, r5
 8001bec:	4460      	add	r0, ip
 8001bee:	0c1d      	lsrs	r5, r3, #16
 8001bf0:	0412      	lsls	r2, r2, #16
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	0c12      	lsrs	r2, r2, #16
 8001bf6:	1828      	adds	r0, r5, r0
 8001bf8:	189b      	adds	r3, r3, r2
 8001bfa:	4286      	cmp	r6, r0
 8001bfc:	d200      	bcs.n	8001c00 <__aeabi_ddiv+0x3cc>
 8001bfe:	e093      	b.n	8001d28 <__aeabi_ddiv+0x4f4>
 8001c00:	d100      	bne.n	8001c04 <__aeabi_ddiv+0x3d0>
 8001c02:	e08e      	b.n	8001d22 <__aeabi_ddiv+0x4ee>
 8001c04:	2301      	movs	r3, #1
 8001c06:	4319      	orrs	r1, r3
 8001c08:	4ba0      	ldr	r3, [pc, #640]	; (8001e8c <__aeabi_ddiv+0x658>)
 8001c0a:	18e3      	adds	r3, r4, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	dc00      	bgt.n	8001c12 <__aeabi_ddiv+0x3de>
 8001c10:	e099      	b.n	8001d46 <__aeabi_ddiv+0x512>
 8001c12:	074a      	lsls	r2, r1, #29
 8001c14:	d000      	beq.n	8001c18 <__aeabi_ddiv+0x3e4>
 8001c16:	e09e      	b.n	8001d56 <__aeabi_ddiv+0x522>
 8001c18:	465a      	mov	r2, fp
 8001c1a:	01d2      	lsls	r2, r2, #7
 8001c1c:	d506      	bpl.n	8001c2c <__aeabi_ddiv+0x3f8>
 8001c1e:	465a      	mov	r2, fp
 8001c20:	4b9b      	ldr	r3, [pc, #620]	; (8001e90 <__aeabi_ddiv+0x65c>)
 8001c22:	401a      	ands	r2, r3
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	4693      	mov	fp, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	18e3      	adds	r3, r4, r3
 8001c2c:	4a99      	ldr	r2, [pc, #612]	; (8001e94 <__aeabi_ddiv+0x660>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	dd68      	ble.n	8001d04 <__aeabi_ddiv+0x4d0>
 8001c32:	2301      	movs	r3, #1
 8001c34:	9a02      	ldr	r2, [sp, #8]
 8001c36:	4c98      	ldr	r4, [pc, #608]	; (8001e98 <__aeabi_ddiv+0x664>)
 8001c38:	401a      	ands	r2, r3
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	4694      	mov	ip, r2
 8001c3e:	4698      	mov	r8, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	e6c5      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	464b      	mov	r3, r9
 8001c48:	0312      	lsls	r2, r2, #12
 8001c4a:	4213      	tst	r3, r2
 8001c4c:	d00a      	beq.n	8001c64 <__aeabi_ddiv+0x430>
 8001c4e:	465b      	mov	r3, fp
 8001c50:	4213      	tst	r3, r2
 8001c52:	d106      	bne.n	8001c62 <__aeabi_ddiv+0x42e>
 8001c54:	431a      	orrs	r2, r3
 8001c56:	0312      	lsls	r2, r2, #12
 8001c58:	0b12      	lsrs	r2, r2, #12
 8001c5a:	46ac      	mov	ip, r5
 8001c5c:	4688      	mov	r8, r1
 8001c5e:	4c8e      	ldr	r4, [pc, #568]	; (8001e98 <__aeabi_ddiv+0x664>)
 8001c60:	e6b6      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001c62:	464b      	mov	r3, r9
 8001c64:	431a      	orrs	r2, r3
 8001c66:	0312      	lsls	r2, r2, #12
 8001c68:	0b12      	lsrs	r2, r2, #12
 8001c6a:	46bc      	mov	ip, r7
 8001c6c:	4c8a      	ldr	r4, [pc, #552]	; (8001e98 <__aeabi_ddiv+0x664>)
 8001c6e:	e6af      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001c70:	0003      	movs	r3, r0
 8001c72:	465a      	mov	r2, fp
 8001c74:	3b28      	subs	r3, #40	; 0x28
 8001c76:	409a      	lsls	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4691      	mov	r9, r2
 8001c7c:	4698      	mov	r8, r3
 8001c7e:	e657      	b.n	8001930 <__aeabi_ddiv+0xfc>
 8001c80:	4658      	mov	r0, fp
 8001c82:	f001 f92b 	bl	8002edc <__clzsi2>
 8001c86:	3020      	adds	r0, #32
 8001c88:	e640      	b.n	800190c <__aeabi_ddiv+0xd8>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	4652      	mov	r2, sl
 8001c8e:	3b28      	subs	r3, #40	; 0x28
 8001c90:	409a      	lsls	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	4693      	mov	fp, r2
 8001c96:	e677      	b.n	8001988 <__aeabi_ddiv+0x154>
 8001c98:	f001 f920 	bl	8002edc <__clzsi2>
 8001c9c:	3020      	adds	r0, #32
 8001c9e:	e65f      	b.n	8001960 <__aeabi_ddiv+0x12c>
 8001ca0:	4588      	cmp	r8, r1
 8001ca2:	d200      	bcs.n	8001ca6 <__aeabi_ddiv+0x472>
 8001ca4:	e6c7      	b.n	8001a36 <__aeabi_ddiv+0x202>
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	07de      	lsls	r6, r3, #31
 8001caa:	085d      	lsrs	r5, r3, #1
 8001cac:	4643      	mov	r3, r8
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	431e      	orrs	r6, r3
 8001cb2:	4643      	mov	r3, r8
 8001cb4:	07db      	lsls	r3, r3, #31
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	e6c2      	b.n	8001a40 <__aeabi_ddiv+0x20c>
 8001cba:	2500      	movs	r5, #0
 8001cbc:	4592      	cmp	sl, r2
 8001cbe:	d300      	bcc.n	8001cc2 <__aeabi_ddiv+0x48e>
 8001cc0:	e733      	b.n	8001b2a <__aeabi_ddiv+0x2f6>
 8001cc2:	9e03      	ldr	r6, [sp, #12]
 8001cc4:	4659      	mov	r1, fp
 8001cc6:	46b4      	mov	ip, r6
 8001cc8:	44e2      	add	sl, ip
 8001cca:	45b2      	cmp	sl, r6
 8001ccc:	41ad      	sbcs	r5, r5
 8001cce:	426d      	negs	r5, r5
 8001cd0:	4445      	add	r5, r8
 8001cd2:	18eb      	adds	r3, r5, r3
 8001cd4:	3901      	subs	r1, #1
 8001cd6:	4598      	cmp	r8, r3
 8001cd8:	d207      	bcs.n	8001cea <__aeabi_ddiv+0x4b6>
 8001cda:	4298      	cmp	r0, r3
 8001cdc:	d900      	bls.n	8001ce0 <__aeabi_ddiv+0x4ac>
 8001cde:	e07f      	b.n	8001de0 <__aeabi_ddiv+0x5ac>
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_ddiv+0x4b0>
 8001ce2:	e0bc      	b.n	8001e5e <__aeabi_ddiv+0x62a>
 8001ce4:	1a1d      	subs	r5, r3, r0
 8001ce6:	468b      	mov	fp, r1
 8001ce8:	e71f      	b.n	8001b2a <__aeabi_ddiv+0x2f6>
 8001cea:	4598      	cmp	r8, r3
 8001cec:	d1fa      	bne.n	8001ce4 <__aeabi_ddiv+0x4b0>
 8001cee:	9d03      	ldr	r5, [sp, #12]
 8001cf0:	4555      	cmp	r5, sl
 8001cf2:	d9f2      	bls.n	8001cda <__aeabi_ddiv+0x4a6>
 8001cf4:	4643      	mov	r3, r8
 8001cf6:	468b      	mov	fp, r1
 8001cf8:	1a1d      	subs	r5, r3, r0
 8001cfa:	e716      	b.n	8001b2a <__aeabi_ddiv+0x2f6>
 8001cfc:	469b      	mov	fp, r3
 8001cfe:	e6ca      	b.n	8001a96 <__aeabi_ddiv+0x262>
 8001d00:	0015      	movs	r5, r2
 8001d02:	e6e7      	b.n	8001ad4 <__aeabi_ddiv+0x2a0>
 8001d04:	465a      	mov	r2, fp
 8001d06:	08c9      	lsrs	r1, r1, #3
 8001d08:	0752      	lsls	r2, r2, #29
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	055b      	lsls	r3, r3, #21
 8001d0e:	4690      	mov	r8, r2
 8001d10:	0d5c      	lsrs	r4, r3, #21
 8001d12:	465a      	mov	r2, fp
 8001d14:	2301      	movs	r3, #1
 8001d16:	9902      	ldr	r1, [sp, #8]
 8001d18:	0252      	lsls	r2, r2, #9
 8001d1a:	4019      	ands	r1, r3
 8001d1c:	0b12      	lsrs	r2, r2, #12
 8001d1e:	468c      	mov	ip, r1
 8001d20:	e656      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d100      	bne.n	8001d28 <__aeabi_ddiv+0x4f4>
 8001d26:	e76f      	b.n	8001c08 <__aeabi_ddiv+0x3d4>
 8001d28:	4446      	add	r6, r8
 8001d2a:	1e4a      	subs	r2, r1, #1
 8001d2c:	45b0      	cmp	r8, r6
 8001d2e:	d929      	bls.n	8001d84 <__aeabi_ddiv+0x550>
 8001d30:	0011      	movs	r1, r2
 8001d32:	4286      	cmp	r6, r0
 8001d34:	d000      	beq.n	8001d38 <__aeabi_ddiv+0x504>
 8001d36:	e765      	b.n	8001c04 <__aeabi_ddiv+0x3d0>
 8001d38:	9a03      	ldr	r2, [sp, #12]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d000      	beq.n	8001d40 <__aeabi_ddiv+0x50c>
 8001d3e:	e761      	b.n	8001c04 <__aeabi_ddiv+0x3d0>
 8001d40:	e762      	b.n	8001c08 <__aeabi_ddiv+0x3d4>
 8001d42:	2101      	movs	r1, #1
 8001d44:	4249      	negs	r1, r1
 8001d46:	2001      	movs	r0, #1
 8001d48:	1ac2      	subs	r2, r0, r3
 8001d4a:	2a38      	cmp	r2, #56	; 0x38
 8001d4c:	dd21      	ble.n	8001d92 <__aeabi_ddiv+0x55e>
 8001d4e:	9b02      	ldr	r3, [sp, #8]
 8001d50:	4003      	ands	r3, r0
 8001d52:	469c      	mov	ip, r3
 8001d54:	e638      	b.n	80019c8 <__aeabi_ddiv+0x194>
 8001d56:	220f      	movs	r2, #15
 8001d58:	400a      	ands	r2, r1
 8001d5a:	2a04      	cmp	r2, #4
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_ddiv+0x52c>
 8001d5e:	e75b      	b.n	8001c18 <__aeabi_ddiv+0x3e4>
 8001d60:	000a      	movs	r2, r1
 8001d62:	1d11      	adds	r1, r2, #4
 8001d64:	4291      	cmp	r1, r2
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	4252      	negs	r2, r2
 8001d6a:	4493      	add	fp, r2
 8001d6c:	e754      	b.n	8001c18 <__aeabi_ddiv+0x3e4>
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <__aeabi_ddiv+0x658>)
 8001d70:	18e3      	adds	r3, r4, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	dde5      	ble.n	8001d42 <__aeabi_ddiv+0x50e>
 8001d76:	2201      	movs	r2, #1
 8001d78:	4252      	negs	r2, r2
 8001d7a:	e7f2      	b.n	8001d62 <__aeabi_ddiv+0x52e>
 8001d7c:	001d      	movs	r5, r3
 8001d7e:	e6fa      	b.n	8001b76 <__aeabi_ddiv+0x342>
 8001d80:	469a      	mov	sl, r3
 8001d82:	e71c      	b.n	8001bbe <__aeabi_ddiv+0x38a>
 8001d84:	42b0      	cmp	r0, r6
 8001d86:	d839      	bhi.n	8001dfc <__aeabi_ddiv+0x5c8>
 8001d88:	d06e      	beq.n	8001e68 <__aeabi_ddiv+0x634>
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	e73a      	b.n	8001c04 <__aeabi_ddiv+0x3d0>
 8001d8e:	9302      	str	r3, [sp, #8]
 8001d90:	e73a      	b.n	8001c08 <__aeabi_ddiv+0x3d4>
 8001d92:	2a1f      	cmp	r2, #31
 8001d94:	dc3c      	bgt.n	8001e10 <__aeabi_ddiv+0x5dc>
 8001d96:	2320      	movs	r3, #32
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	000c      	movs	r4, r1
 8001d9c:	4658      	mov	r0, fp
 8001d9e:	4099      	lsls	r1, r3
 8001da0:	4098      	lsls	r0, r3
 8001da2:	1e4b      	subs	r3, r1, #1
 8001da4:	4199      	sbcs	r1, r3
 8001da6:	465b      	mov	r3, fp
 8001da8:	40d4      	lsrs	r4, r2
 8001daa:	40d3      	lsrs	r3, r2
 8001dac:	4320      	orrs	r0, r4
 8001dae:	4308      	orrs	r0, r1
 8001db0:	001a      	movs	r2, r3
 8001db2:	0743      	lsls	r3, r0, #29
 8001db4:	d009      	beq.n	8001dca <__aeabi_ddiv+0x596>
 8001db6:	230f      	movs	r3, #15
 8001db8:	4003      	ands	r3, r0
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d005      	beq.n	8001dca <__aeabi_ddiv+0x596>
 8001dbe:	0001      	movs	r1, r0
 8001dc0:	1d08      	adds	r0, r1, #4
 8001dc2:	4288      	cmp	r0, r1
 8001dc4:	419b      	sbcs	r3, r3
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	18d2      	adds	r2, r2, r3
 8001dca:	0213      	lsls	r3, r2, #8
 8001dcc:	d53a      	bpl.n	8001e44 <__aeabi_ddiv+0x610>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9a02      	ldr	r2, [sp, #8]
 8001dd2:	2401      	movs	r4, #1
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	4694      	mov	ip, r2
 8001dda:	4698      	mov	r8, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	e5f7      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001de0:	2102      	movs	r1, #2
 8001de2:	4249      	negs	r1, r1
 8001de4:	468c      	mov	ip, r1
 8001de6:	9d03      	ldr	r5, [sp, #12]
 8001de8:	44e3      	add	fp, ip
 8001dea:	46ac      	mov	ip, r5
 8001dec:	44e2      	add	sl, ip
 8001dee:	45aa      	cmp	sl, r5
 8001df0:	41ad      	sbcs	r5, r5
 8001df2:	426d      	negs	r5, r5
 8001df4:	4445      	add	r5, r8
 8001df6:	18ed      	adds	r5, r5, r3
 8001df8:	1a2d      	subs	r5, r5, r0
 8001dfa:	e696      	b.n	8001b2a <__aeabi_ddiv+0x2f6>
 8001dfc:	1e8a      	subs	r2, r1, #2
 8001dfe:	9903      	ldr	r1, [sp, #12]
 8001e00:	004d      	lsls	r5, r1, #1
 8001e02:	428d      	cmp	r5, r1
 8001e04:	4189      	sbcs	r1, r1
 8001e06:	4249      	negs	r1, r1
 8001e08:	4441      	add	r1, r8
 8001e0a:	1876      	adds	r6, r6, r1
 8001e0c:	9503      	str	r5, [sp, #12]
 8001e0e:	e78f      	b.n	8001d30 <__aeabi_ddiv+0x4fc>
 8001e10:	201f      	movs	r0, #31
 8001e12:	4240      	negs	r0, r0
 8001e14:	1ac3      	subs	r3, r0, r3
 8001e16:	4658      	mov	r0, fp
 8001e18:	40d8      	lsrs	r0, r3
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	2a20      	cmp	r2, #32
 8001e1e:	d028      	beq.n	8001e72 <__aeabi_ddiv+0x63e>
 8001e20:	2040      	movs	r0, #64	; 0x40
 8001e22:	465d      	mov	r5, fp
 8001e24:	1a82      	subs	r2, r0, r2
 8001e26:	4095      	lsls	r5, r2
 8001e28:	4329      	orrs	r1, r5
 8001e2a:	1e4a      	subs	r2, r1, #1
 8001e2c:	4191      	sbcs	r1, r2
 8001e2e:	4319      	orrs	r1, r3
 8001e30:	2307      	movs	r3, #7
 8001e32:	2200      	movs	r2, #0
 8001e34:	400b      	ands	r3, r1
 8001e36:	d009      	beq.n	8001e4c <__aeabi_ddiv+0x618>
 8001e38:	230f      	movs	r3, #15
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	400b      	ands	r3, r1
 8001e3e:	0008      	movs	r0, r1
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d1bd      	bne.n	8001dc0 <__aeabi_ddiv+0x58c>
 8001e44:	0001      	movs	r1, r0
 8001e46:	0753      	lsls	r3, r2, #29
 8001e48:	0252      	lsls	r2, r2, #9
 8001e4a:	0b12      	lsrs	r2, r2, #12
 8001e4c:	08c9      	lsrs	r1, r1, #3
 8001e4e:	4319      	orrs	r1, r3
 8001e50:	2301      	movs	r3, #1
 8001e52:	4688      	mov	r8, r1
 8001e54:	9902      	ldr	r1, [sp, #8]
 8001e56:	2400      	movs	r4, #0
 8001e58:	4019      	ands	r1, r3
 8001e5a:	468c      	mov	ip, r1
 8001e5c:	e5b8      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001e5e:	4552      	cmp	r2, sl
 8001e60:	d8be      	bhi.n	8001de0 <__aeabi_ddiv+0x5ac>
 8001e62:	468b      	mov	fp, r1
 8001e64:	2500      	movs	r5, #0
 8001e66:	e660      	b.n	8001b2a <__aeabi_ddiv+0x2f6>
 8001e68:	9d03      	ldr	r5, [sp, #12]
 8001e6a:	429d      	cmp	r5, r3
 8001e6c:	d3c6      	bcc.n	8001dfc <__aeabi_ddiv+0x5c8>
 8001e6e:	0011      	movs	r1, r2
 8001e70:	e762      	b.n	8001d38 <__aeabi_ddiv+0x504>
 8001e72:	2500      	movs	r5, #0
 8001e74:	e7d8      	b.n	8001e28 <__aeabi_ddiv+0x5f4>
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	465b      	mov	r3, fp
 8001e7a:	0312      	lsls	r2, r2, #12
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	9b01      	ldr	r3, [sp, #4]
 8001e80:	0312      	lsls	r2, r2, #12
 8001e82:	0b12      	lsrs	r2, r2, #12
 8001e84:	469c      	mov	ip, r3
 8001e86:	4688      	mov	r8, r1
 8001e88:	4c03      	ldr	r4, [pc, #12]	; (8001e98 <__aeabi_ddiv+0x664>)
 8001e8a:	e5a1      	b.n	80019d0 <__aeabi_ddiv+0x19c>
 8001e8c:	000003ff 	.word	0x000003ff
 8001e90:	feffffff 	.word	0xfeffffff
 8001e94:	000007fe 	.word	0x000007fe
 8001e98:	000007ff 	.word	0x000007ff

08001e9c <__eqdf2>:
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	464f      	mov	r7, r9
 8001ea0:	4646      	mov	r6, r8
 8001ea2:	46d6      	mov	lr, sl
 8001ea4:	005c      	lsls	r4, r3, #1
 8001ea6:	b5c0      	push	{r6, r7, lr}
 8001ea8:	031f      	lsls	r7, r3, #12
 8001eaa:	0fdb      	lsrs	r3, r3, #31
 8001eac:	469a      	mov	sl, r3
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <__eqdf2+0x70>)
 8001eb0:	030e      	lsls	r6, r1, #12
 8001eb2:	004d      	lsls	r5, r1, #1
 8001eb4:	4684      	mov	ip, r0
 8001eb6:	4680      	mov	r8, r0
 8001eb8:	0b36      	lsrs	r6, r6, #12
 8001eba:	0d6d      	lsrs	r5, r5, #21
 8001ebc:	0fc9      	lsrs	r1, r1, #31
 8001ebe:	4691      	mov	r9, r2
 8001ec0:	0b3f      	lsrs	r7, r7, #12
 8001ec2:	0d64      	lsrs	r4, r4, #21
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	429d      	cmp	r5, r3
 8001ec8:	d008      	beq.n	8001edc <__eqdf2+0x40>
 8001eca:	429c      	cmp	r4, r3
 8001ecc:	d001      	beq.n	8001ed2 <__eqdf2+0x36>
 8001ece:	42a5      	cmp	r5, r4
 8001ed0:	d00b      	beq.n	8001eea <__eqdf2+0x4e>
 8001ed2:	bc1c      	pop	{r2, r3, r4}
 8001ed4:	4690      	mov	r8, r2
 8001ed6:	4699      	mov	r9, r3
 8001ed8:	46a2      	mov	sl, r4
 8001eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001edc:	4663      	mov	r3, ip
 8001ede:	4333      	orrs	r3, r6
 8001ee0:	d1f7      	bne.n	8001ed2 <__eqdf2+0x36>
 8001ee2:	42ac      	cmp	r4, r5
 8001ee4:	d1f5      	bne.n	8001ed2 <__eqdf2+0x36>
 8001ee6:	433a      	orrs	r2, r7
 8001ee8:	d1f3      	bne.n	8001ed2 <__eqdf2+0x36>
 8001eea:	2001      	movs	r0, #1
 8001eec:	42be      	cmp	r6, r7
 8001eee:	d1f0      	bne.n	8001ed2 <__eqdf2+0x36>
 8001ef0:	45c8      	cmp	r8, r9
 8001ef2:	d1ee      	bne.n	8001ed2 <__eqdf2+0x36>
 8001ef4:	4551      	cmp	r1, sl
 8001ef6:	d007      	beq.n	8001f08 <__eqdf2+0x6c>
 8001ef8:	2d00      	cmp	r5, #0
 8001efa:	d1ea      	bne.n	8001ed2 <__eqdf2+0x36>
 8001efc:	4663      	mov	r3, ip
 8001efe:	431e      	orrs	r6, r3
 8001f00:	0030      	movs	r0, r6
 8001f02:	1e46      	subs	r6, r0, #1
 8001f04:	41b0      	sbcs	r0, r6
 8001f06:	e7e4      	b.n	8001ed2 <__eqdf2+0x36>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	e7e2      	b.n	8001ed2 <__eqdf2+0x36>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__gedf2>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4645      	mov	r5, r8
 8001f14:	46de      	mov	lr, fp
 8001f16:	4657      	mov	r7, sl
 8001f18:	464e      	mov	r6, r9
 8001f1a:	b5e0      	push	{r5, r6, r7, lr}
 8001f1c:	031f      	lsls	r7, r3, #12
 8001f1e:	0b3d      	lsrs	r5, r7, #12
 8001f20:	4f2c      	ldr	r7, [pc, #176]	; (8001fd4 <__gedf2+0xc4>)
 8001f22:	030e      	lsls	r6, r1, #12
 8001f24:	004c      	lsls	r4, r1, #1
 8001f26:	46ab      	mov	fp, r5
 8001f28:	005d      	lsls	r5, r3, #1
 8001f2a:	4684      	mov	ip, r0
 8001f2c:	0b36      	lsrs	r6, r6, #12
 8001f2e:	0d64      	lsrs	r4, r4, #21
 8001f30:	0fc9      	lsrs	r1, r1, #31
 8001f32:	4690      	mov	r8, r2
 8001f34:	0d6d      	lsrs	r5, r5, #21
 8001f36:	0fdb      	lsrs	r3, r3, #31
 8001f38:	42bc      	cmp	r4, r7
 8001f3a:	d02a      	beq.n	8001f92 <__gedf2+0x82>
 8001f3c:	4f25      	ldr	r7, [pc, #148]	; (8001fd4 <__gedf2+0xc4>)
 8001f3e:	42bd      	cmp	r5, r7
 8001f40:	d02d      	beq.n	8001f9e <__gedf2+0x8e>
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	d10f      	bne.n	8001f66 <__gedf2+0x56>
 8001f46:	4330      	orrs	r0, r6
 8001f48:	0007      	movs	r7, r0
 8001f4a:	4681      	mov	r9, r0
 8001f4c:	4278      	negs	r0, r7
 8001f4e:	4178      	adcs	r0, r7
 8001f50:	b2c0      	uxtb	r0, r0
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	d117      	bne.n	8001f86 <__gedf2+0x76>
 8001f56:	465f      	mov	r7, fp
 8001f58:	433a      	orrs	r2, r7
 8001f5a:	d114      	bne.n	8001f86 <__gedf2+0x76>
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	2000      	movs	r0, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <__gedf2+0x6a>
 8001f64:	e006      	b.n	8001f74 <__gedf2+0x64>
 8001f66:	2d00      	cmp	r5, #0
 8001f68:	d102      	bne.n	8001f70 <__gedf2+0x60>
 8001f6a:	4658      	mov	r0, fp
 8001f6c:	4302      	orrs	r2, r0
 8001f6e:	d001      	beq.n	8001f74 <__gedf2+0x64>
 8001f70:	4299      	cmp	r1, r3
 8001f72:	d018      	beq.n	8001fa6 <__gedf2+0x96>
 8001f74:	4248      	negs	r0, r1
 8001f76:	2101      	movs	r1, #1
 8001f78:	4308      	orrs	r0, r1
 8001f7a:	bc3c      	pop	{r2, r3, r4, r5}
 8001f7c:	4690      	mov	r8, r2
 8001f7e:	4699      	mov	r9, r3
 8001f80:	46a2      	mov	sl, r4
 8001f82:	46ab      	mov	fp, r5
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d0f2      	beq.n	8001f70 <__gedf2+0x60>
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	4318      	orrs	r0, r3
 8001f90:	e7f3      	b.n	8001f7a <__gedf2+0x6a>
 8001f92:	0037      	movs	r7, r6
 8001f94:	4307      	orrs	r7, r0
 8001f96:	d0d1      	beq.n	8001f3c <__gedf2+0x2c>
 8001f98:	2002      	movs	r0, #2
 8001f9a:	4240      	negs	r0, r0
 8001f9c:	e7ed      	b.n	8001f7a <__gedf2+0x6a>
 8001f9e:	465f      	mov	r7, fp
 8001fa0:	4317      	orrs	r7, r2
 8001fa2:	d0ce      	beq.n	8001f42 <__gedf2+0x32>
 8001fa4:	e7f8      	b.n	8001f98 <__gedf2+0x88>
 8001fa6:	42ac      	cmp	r4, r5
 8001fa8:	dce4      	bgt.n	8001f74 <__gedf2+0x64>
 8001faa:	da03      	bge.n	8001fb4 <__gedf2+0xa4>
 8001fac:	1e48      	subs	r0, r1, #1
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4308      	orrs	r0, r1
 8001fb2:	e7e2      	b.n	8001f7a <__gedf2+0x6a>
 8001fb4:	455e      	cmp	r6, fp
 8001fb6:	d8dd      	bhi.n	8001f74 <__gedf2+0x64>
 8001fb8:	d006      	beq.n	8001fc8 <__gedf2+0xb8>
 8001fba:	2000      	movs	r0, #0
 8001fbc:	455e      	cmp	r6, fp
 8001fbe:	d2dc      	bcs.n	8001f7a <__gedf2+0x6a>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	1e48      	subs	r0, r1, #1
 8001fc4:	4318      	orrs	r0, r3
 8001fc6:	e7d8      	b.n	8001f7a <__gedf2+0x6a>
 8001fc8:	45c4      	cmp	ip, r8
 8001fca:	d8d3      	bhi.n	8001f74 <__gedf2+0x64>
 8001fcc:	2000      	movs	r0, #0
 8001fce:	45c4      	cmp	ip, r8
 8001fd0:	d3f6      	bcc.n	8001fc0 <__gedf2+0xb0>
 8001fd2:	e7d2      	b.n	8001f7a <__gedf2+0x6a>
 8001fd4:	000007ff 	.word	0x000007ff

08001fd8 <__ledf2>:
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fda:	464e      	mov	r6, r9
 8001fdc:	4645      	mov	r5, r8
 8001fde:	46de      	mov	lr, fp
 8001fe0:	4657      	mov	r7, sl
 8001fe2:	005c      	lsls	r4, r3, #1
 8001fe4:	b5e0      	push	{r5, r6, r7, lr}
 8001fe6:	031f      	lsls	r7, r3, #12
 8001fe8:	0fdb      	lsrs	r3, r3, #31
 8001fea:	4699      	mov	r9, r3
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <__ledf2+0xc0>)
 8001fee:	030e      	lsls	r6, r1, #12
 8001ff0:	004d      	lsls	r5, r1, #1
 8001ff2:	0fc9      	lsrs	r1, r1, #31
 8001ff4:	4684      	mov	ip, r0
 8001ff6:	0b36      	lsrs	r6, r6, #12
 8001ff8:	0d6d      	lsrs	r5, r5, #21
 8001ffa:	468b      	mov	fp, r1
 8001ffc:	4690      	mov	r8, r2
 8001ffe:	0b3f      	lsrs	r7, r7, #12
 8002000:	0d64      	lsrs	r4, r4, #21
 8002002:	429d      	cmp	r5, r3
 8002004:	d020      	beq.n	8002048 <__ledf2+0x70>
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <__ledf2+0xc0>)
 8002008:	429c      	cmp	r4, r3
 800200a:	d022      	beq.n	8002052 <__ledf2+0x7a>
 800200c:	2d00      	cmp	r5, #0
 800200e:	d112      	bne.n	8002036 <__ledf2+0x5e>
 8002010:	4330      	orrs	r0, r6
 8002012:	4243      	negs	r3, r0
 8002014:	4143      	adcs	r3, r0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2c00      	cmp	r4, #0
 800201a:	d01f      	beq.n	800205c <__ledf2+0x84>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00c      	beq.n	800203a <__ledf2+0x62>
 8002020:	464b      	mov	r3, r9
 8002022:	2001      	movs	r0, #1
 8002024:	3b01      	subs	r3, #1
 8002026:	4303      	orrs	r3, r0
 8002028:	0018      	movs	r0, r3
 800202a:	bc3c      	pop	{r2, r3, r4, r5}
 800202c:	4690      	mov	r8, r2
 800202e:	4699      	mov	r9, r3
 8002030:	46a2      	mov	sl, r4
 8002032:	46ab      	mov	fp, r5
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002036:	2c00      	cmp	r4, #0
 8002038:	d016      	beq.n	8002068 <__ledf2+0x90>
 800203a:	45cb      	cmp	fp, r9
 800203c:	d017      	beq.n	800206e <__ledf2+0x96>
 800203e:	465b      	mov	r3, fp
 8002040:	4259      	negs	r1, r3
 8002042:	2301      	movs	r3, #1
 8002044:	430b      	orrs	r3, r1
 8002046:	e7ef      	b.n	8002028 <__ledf2+0x50>
 8002048:	0031      	movs	r1, r6
 800204a:	2302      	movs	r3, #2
 800204c:	4301      	orrs	r1, r0
 800204e:	d1eb      	bne.n	8002028 <__ledf2+0x50>
 8002050:	e7d9      	b.n	8002006 <__ledf2+0x2e>
 8002052:	0039      	movs	r1, r7
 8002054:	2302      	movs	r3, #2
 8002056:	4311      	orrs	r1, r2
 8002058:	d1e6      	bne.n	8002028 <__ledf2+0x50>
 800205a:	e7d7      	b.n	800200c <__ledf2+0x34>
 800205c:	433a      	orrs	r2, r7
 800205e:	d1dd      	bne.n	800201c <__ledf2+0x44>
 8002060:	2300      	movs	r3, #0
 8002062:	2800      	cmp	r0, #0
 8002064:	d0e0      	beq.n	8002028 <__ledf2+0x50>
 8002066:	e7ea      	b.n	800203e <__ledf2+0x66>
 8002068:	433a      	orrs	r2, r7
 800206a:	d1e6      	bne.n	800203a <__ledf2+0x62>
 800206c:	e7e7      	b.n	800203e <__ledf2+0x66>
 800206e:	42a5      	cmp	r5, r4
 8002070:	dce5      	bgt.n	800203e <__ledf2+0x66>
 8002072:	db05      	blt.n	8002080 <__ledf2+0xa8>
 8002074:	42be      	cmp	r6, r7
 8002076:	d8e2      	bhi.n	800203e <__ledf2+0x66>
 8002078:	d007      	beq.n	800208a <__ledf2+0xb2>
 800207a:	2300      	movs	r3, #0
 800207c:	42be      	cmp	r6, r7
 800207e:	d2d3      	bcs.n	8002028 <__ledf2+0x50>
 8002080:	4659      	mov	r1, fp
 8002082:	2301      	movs	r3, #1
 8002084:	3901      	subs	r1, #1
 8002086:	430b      	orrs	r3, r1
 8002088:	e7ce      	b.n	8002028 <__ledf2+0x50>
 800208a:	45c4      	cmp	ip, r8
 800208c:	d8d7      	bhi.n	800203e <__ledf2+0x66>
 800208e:	2300      	movs	r3, #0
 8002090:	45c4      	cmp	ip, r8
 8002092:	d3f5      	bcc.n	8002080 <__ledf2+0xa8>
 8002094:	e7c8      	b.n	8002028 <__ledf2+0x50>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	000007ff 	.word	0x000007ff

0800209c <__aeabi_dmul>:
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	4657      	mov	r7, sl
 80020a0:	4645      	mov	r5, r8
 80020a2:	46de      	mov	lr, fp
 80020a4:	464e      	mov	r6, r9
 80020a6:	b5e0      	push	{r5, r6, r7, lr}
 80020a8:	030c      	lsls	r4, r1, #12
 80020aa:	4698      	mov	r8, r3
 80020ac:	004e      	lsls	r6, r1, #1
 80020ae:	0b23      	lsrs	r3, r4, #12
 80020b0:	b087      	sub	sp, #28
 80020b2:	0007      	movs	r7, r0
 80020b4:	4692      	mov	sl, r2
 80020b6:	469b      	mov	fp, r3
 80020b8:	0d76      	lsrs	r6, r6, #21
 80020ba:	0fcd      	lsrs	r5, r1, #31
 80020bc:	2e00      	cmp	r6, #0
 80020be:	d06b      	beq.n	8002198 <__aeabi_dmul+0xfc>
 80020c0:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <__aeabi_dmul+0x1dc>)
 80020c2:	429e      	cmp	r6, r3
 80020c4:	d035      	beq.n	8002132 <__aeabi_dmul+0x96>
 80020c6:	2480      	movs	r4, #128	; 0x80
 80020c8:	465b      	mov	r3, fp
 80020ca:	0f42      	lsrs	r2, r0, #29
 80020cc:	0424      	lsls	r4, r4, #16
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4314      	orrs	r4, r2
 80020d2:	431c      	orrs	r4, r3
 80020d4:	00c3      	lsls	r3, r0, #3
 80020d6:	4699      	mov	r9, r3
 80020d8:	4b68      	ldr	r3, [pc, #416]	; (800227c <__aeabi_dmul+0x1e0>)
 80020da:	46a3      	mov	fp, r4
 80020dc:	469c      	mov	ip, r3
 80020de:	2300      	movs	r3, #0
 80020e0:	2700      	movs	r7, #0
 80020e2:	4466      	add	r6, ip
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	4643      	mov	r3, r8
 80020e8:	031c      	lsls	r4, r3, #12
 80020ea:	005a      	lsls	r2, r3, #1
 80020ec:	0fdb      	lsrs	r3, r3, #31
 80020ee:	4650      	mov	r0, sl
 80020f0:	0b24      	lsrs	r4, r4, #12
 80020f2:	0d52      	lsrs	r2, r2, #21
 80020f4:	4698      	mov	r8, r3
 80020f6:	d100      	bne.n	80020fa <__aeabi_dmul+0x5e>
 80020f8:	e076      	b.n	80021e8 <__aeabi_dmul+0x14c>
 80020fa:	4b5f      	ldr	r3, [pc, #380]	; (8002278 <__aeabi_dmul+0x1dc>)
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d06d      	beq.n	80021dc <__aeabi_dmul+0x140>
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	0f41      	lsrs	r1, r0, #29
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	430b      	orrs	r3, r1
 8002108:	495c      	ldr	r1, [pc, #368]	; (800227c <__aeabi_dmul+0x1e0>)
 800210a:	00e4      	lsls	r4, r4, #3
 800210c:	468c      	mov	ip, r1
 800210e:	431c      	orrs	r4, r3
 8002110:	00c3      	lsls	r3, r0, #3
 8002112:	2000      	movs	r0, #0
 8002114:	4462      	add	r2, ip
 8002116:	4641      	mov	r1, r8
 8002118:	18b6      	adds	r6, r6, r2
 800211a:	4069      	eors	r1, r5
 800211c:	1c72      	adds	r2, r6, #1
 800211e:	9101      	str	r1, [sp, #4]
 8002120:	4694      	mov	ip, r2
 8002122:	4307      	orrs	r7, r0
 8002124:	2f0f      	cmp	r7, #15
 8002126:	d900      	bls.n	800212a <__aeabi_dmul+0x8e>
 8002128:	e0b0      	b.n	800228c <__aeabi_dmul+0x1f0>
 800212a:	4a55      	ldr	r2, [pc, #340]	; (8002280 <__aeabi_dmul+0x1e4>)
 800212c:	00bf      	lsls	r7, r7, #2
 800212e:	59d2      	ldr	r2, [r2, r7]
 8002130:	4697      	mov	pc, r2
 8002132:	465b      	mov	r3, fp
 8002134:	4303      	orrs	r3, r0
 8002136:	4699      	mov	r9, r3
 8002138:	d000      	beq.n	800213c <__aeabi_dmul+0xa0>
 800213a:	e087      	b.n	800224c <__aeabi_dmul+0x1b0>
 800213c:	2300      	movs	r3, #0
 800213e:	469b      	mov	fp, r3
 8002140:	3302      	adds	r3, #2
 8002142:	2708      	movs	r7, #8
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	e7ce      	b.n	80020e6 <__aeabi_dmul+0x4a>
 8002148:	4642      	mov	r2, r8
 800214a:	9201      	str	r2, [sp, #4]
 800214c:	2802      	cmp	r0, #2
 800214e:	d067      	beq.n	8002220 <__aeabi_dmul+0x184>
 8002150:	2803      	cmp	r0, #3
 8002152:	d100      	bne.n	8002156 <__aeabi_dmul+0xba>
 8002154:	e20e      	b.n	8002574 <__aeabi_dmul+0x4d8>
 8002156:	2801      	cmp	r0, #1
 8002158:	d000      	beq.n	800215c <__aeabi_dmul+0xc0>
 800215a:	e162      	b.n	8002422 <__aeabi_dmul+0x386>
 800215c:	2300      	movs	r3, #0
 800215e:	2400      	movs	r4, #0
 8002160:	2200      	movs	r2, #0
 8002162:	4699      	mov	r9, r3
 8002164:	9901      	ldr	r1, [sp, #4]
 8002166:	4001      	ands	r1, r0
 8002168:	b2cd      	uxtb	r5, r1
 800216a:	2100      	movs	r1, #0
 800216c:	0312      	lsls	r2, r2, #12
 800216e:	0d0b      	lsrs	r3, r1, #20
 8002170:	0b12      	lsrs	r2, r2, #12
 8002172:	051b      	lsls	r3, r3, #20
 8002174:	4313      	orrs	r3, r2
 8002176:	4a43      	ldr	r2, [pc, #268]	; (8002284 <__aeabi_dmul+0x1e8>)
 8002178:	0524      	lsls	r4, r4, #20
 800217a:	4013      	ands	r3, r2
 800217c:	431c      	orrs	r4, r3
 800217e:	0064      	lsls	r4, r4, #1
 8002180:	07ed      	lsls	r5, r5, #31
 8002182:	0864      	lsrs	r4, r4, #1
 8002184:	432c      	orrs	r4, r5
 8002186:	4648      	mov	r0, r9
 8002188:	0021      	movs	r1, r4
 800218a:	b007      	add	sp, #28
 800218c:	bc3c      	pop	{r2, r3, r4, r5}
 800218e:	4690      	mov	r8, r2
 8002190:	4699      	mov	r9, r3
 8002192:	46a2      	mov	sl, r4
 8002194:	46ab      	mov	fp, r5
 8002196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002198:	4303      	orrs	r3, r0
 800219a:	4699      	mov	r9, r3
 800219c:	d04f      	beq.n	800223e <__aeabi_dmul+0x1a2>
 800219e:	465b      	mov	r3, fp
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dmul+0x10a>
 80021a4:	e189      	b.n	80024ba <__aeabi_dmul+0x41e>
 80021a6:	4658      	mov	r0, fp
 80021a8:	f000 fe98 	bl	8002edc <__clzsi2>
 80021ac:	0003      	movs	r3, r0
 80021ae:	3b0b      	subs	r3, #11
 80021b0:	2b1c      	cmp	r3, #28
 80021b2:	dd00      	ble.n	80021b6 <__aeabi_dmul+0x11a>
 80021b4:	e17a      	b.n	80024ac <__aeabi_dmul+0x410>
 80021b6:	221d      	movs	r2, #29
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	003a      	movs	r2, r7
 80021bc:	0001      	movs	r1, r0
 80021be:	465c      	mov	r4, fp
 80021c0:	40da      	lsrs	r2, r3
 80021c2:	3908      	subs	r1, #8
 80021c4:	408c      	lsls	r4, r1
 80021c6:	0013      	movs	r3, r2
 80021c8:	408f      	lsls	r7, r1
 80021ca:	4323      	orrs	r3, r4
 80021cc:	469b      	mov	fp, r3
 80021ce:	46b9      	mov	r9, r7
 80021d0:	2300      	movs	r3, #0
 80021d2:	4e2d      	ldr	r6, [pc, #180]	; (8002288 <__aeabi_dmul+0x1ec>)
 80021d4:	2700      	movs	r7, #0
 80021d6:	1a36      	subs	r6, r6, r0
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	e784      	b.n	80020e6 <__aeabi_dmul+0x4a>
 80021dc:	4653      	mov	r3, sl
 80021de:	4323      	orrs	r3, r4
 80021e0:	d12a      	bne.n	8002238 <__aeabi_dmul+0x19c>
 80021e2:	2400      	movs	r4, #0
 80021e4:	2002      	movs	r0, #2
 80021e6:	e796      	b.n	8002116 <__aeabi_dmul+0x7a>
 80021e8:	4653      	mov	r3, sl
 80021ea:	4323      	orrs	r3, r4
 80021ec:	d020      	beq.n	8002230 <__aeabi_dmul+0x194>
 80021ee:	2c00      	cmp	r4, #0
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dmul+0x158>
 80021f2:	e157      	b.n	80024a4 <__aeabi_dmul+0x408>
 80021f4:	0020      	movs	r0, r4
 80021f6:	f000 fe71 	bl	8002edc <__clzsi2>
 80021fa:	0003      	movs	r3, r0
 80021fc:	3b0b      	subs	r3, #11
 80021fe:	2b1c      	cmp	r3, #28
 8002200:	dd00      	ble.n	8002204 <__aeabi_dmul+0x168>
 8002202:	e149      	b.n	8002498 <__aeabi_dmul+0x3fc>
 8002204:	211d      	movs	r1, #29
 8002206:	1acb      	subs	r3, r1, r3
 8002208:	4651      	mov	r1, sl
 800220a:	0002      	movs	r2, r0
 800220c:	40d9      	lsrs	r1, r3
 800220e:	4653      	mov	r3, sl
 8002210:	3a08      	subs	r2, #8
 8002212:	4094      	lsls	r4, r2
 8002214:	4093      	lsls	r3, r2
 8002216:	430c      	orrs	r4, r1
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <__aeabi_dmul+0x1ec>)
 800221a:	1a12      	subs	r2, r2, r0
 800221c:	2000      	movs	r0, #0
 800221e:	e77a      	b.n	8002116 <__aeabi_dmul+0x7a>
 8002220:	2501      	movs	r5, #1
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	4c14      	ldr	r4, [pc, #80]	; (8002278 <__aeabi_dmul+0x1dc>)
 8002226:	401d      	ands	r5, r3
 8002228:	2300      	movs	r3, #0
 800222a:	2200      	movs	r2, #0
 800222c:	4699      	mov	r9, r3
 800222e:	e79c      	b.n	800216a <__aeabi_dmul+0xce>
 8002230:	2400      	movs	r4, #0
 8002232:	2200      	movs	r2, #0
 8002234:	2001      	movs	r0, #1
 8002236:	e76e      	b.n	8002116 <__aeabi_dmul+0x7a>
 8002238:	4653      	mov	r3, sl
 800223a:	2003      	movs	r0, #3
 800223c:	e76b      	b.n	8002116 <__aeabi_dmul+0x7a>
 800223e:	2300      	movs	r3, #0
 8002240:	469b      	mov	fp, r3
 8002242:	3301      	adds	r3, #1
 8002244:	2704      	movs	r7, #4
 8002246:	2600      	movs	r6, #0
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	e74c      	b.n	80020e6 <__aeabi_dmul+0x4a>
 800224c:	2303      	movs	r3, #3
 800224e:	4681      	mov	r9, r0
 8002250:	270c      	movs	r7, #12
 8002252:	9302      	str	r3, [sp, #8]
 8002254:	e747      	b.n	80020e6 <__aeabi_dmul+0x4a>
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	2300      	movs	r3, #0
 800225a:	2500      	movs	r5, #0
 800225c:	0312      	lsls	r2, r2, #12
 800225e:	4699      	mov	r9, r3
 8002260:	4c05      	ldr	r4, [pc, #20]	; (8002278 <__aeabi_dmul+0x1dc>)
 8002262:	e782      	b.n	800216a <__aeabi_dmul+0xce>
 8002264:	465c      	mov	r4, fp
 8002266:	464b      	mov	r3, r9
 8002268:	9802      	ldr	r0, [sp, #8]
 800226a:	e76f      	b.n	800214c <__aeabi_dmul+0xb0>
 800226c:	465c      	mov	r4, fp
 800226e:	464b      	mov	r3, r9
 8002270:	9501      	str	r5, [sp, #4]
 8002272:	9802      	ldr	r0, [sp, #8]
 8002274:	e76a      	b.n	800214c <__aeabi_dmul+0xb0>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	000007ff 	.word	0x000007ff
 800227c:	fffffc01 	.word	0xfffffc01
 8002280:	0800a380 	.word	0x0800a380
 8002284:	800fffff 	.word	0x800fffff
 8002288:	fffffc0d 	.word	0xfffffc0d
 800228c:	464a      	mov	r2, r9
 800228e:	4649      	mov	r1, r9
 8002290:	0c17      	lsrs	r7, r2, #16
 8002292:	0c1a      	lsrs	r2, r3, #16
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	0408      	lsls	r0, r1, #16
 800229a:	0019      	movs	r1, r3
 800229c:	0c00      	lsrs	r0, r0, #16
 800229e:	4341      	muls	r1, r0
 80022a0:	0015      	movs	r5, r2
 80022a2:	4688      	mov	r8, r1
 80022a4:	0019      	movs	r1, r3
 80022a6:	437d      	muls	r5, r7
 80022a8:	4379      	muls	r1, r7
 80022aa:	9503      	str	r5, [sp, #12]
 80022ac:	4689      	mov	r9, r1
 80022ae:	0029      	movs	r1, r5
 80022b0:	0015      	movs	r5, r2
 80022b2:	4345      	muls	r5, r0
 80022b4:	444d      	add	r5, r9
 80022b6:	9502      	str	r5, [sp, #8]
 80022b8:	4645      	mov	r5, r8
 80022ba:	0c2d      	lsrs	r5, r5, #16
 80022bc:	46aa      	mov	sl, r5
 80022be:	9d02      	ldr	r5, [sp, #8]
 80022c0:	4455      	add	r5, sl
 80022c2:	45a9      	cmp	r9, r5
 80022c4:	d906      	bls.n	80022d4 <__aeabi_dmul+0x238>
 80022c6:	468a      	mov	sl, r1
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0249      	lsls	r1, r1, #9
 80022cc:	4689      	mov	r9, r1
 80022ce:	44ca      	add	sl, r9
 80022d0:	4651      	mov	r1, sl
 80022d2:	9103      	str	r1, [sp, #12]
 80022d4:	0c29      	lsrs	r1, r5, #16
 80022d6:	9104      	str	r1, [sp, #16]
 80022d8:	4641      	mov	r1, r8
 80022da:	0409      	lsls	r1, r1, #16
 80022dc:	042d      	lsls	r5, r5, #16
 80022de:	0c09      	lsrs	r1, r1, #16
 80022e0:	4688      	mov	r8, r1
 80022e2:	0029      	movs	r1, r5
 80022e4:	0c25      	lsrs	r5, r4, #16
 80022e6:	0424      	lsls	r4, r4, #16
 80022e8:	4441      	add	r1, r8
 80022ea:	0c24      	lsrs	r4, r4, #16
 80022ec:	9105      	str	r1, [sp, #20]
 80022ee:	0021      	movs	r1, r4
 80022f0:	4341      	muls	r1, r0
 80022f2:	4688      	mov	r8, r1
 80022f4:	0021      	movs	r1, r4
 80022f6:	4379      	muls	r1, r7
 80022f8:	468a      	mov	sl, r1
 80022fa:	4368      	muls	r0, r5
 80022fc:	4641      	mov	r1, r8
 80022fe:	4450      	add	r0, sl
 8002300:	4681      	mov	r9, r0
 8002302:	0c08      	lsrs	r0, r1, #16
 8002304:	4448      	add	r0, r9
 8002306:	436f      	muls	r7, r5
 8002308:	4582      	cmp	sl, r0
 800230a:	d903      	bls.n	8002314 <__aeabi_dmul+0x278>
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	0249      	lsls	r1, r1, #9
 8002310:	4689      	mov	r9, r1
 8002312:	444f      	add	r7, r9
 8002314:	0c01      	lsrs	r1, r0, #16
 8002316:	4689      	mov	r9, r1
 8002318:	0039      	movs	r1, r7
 800231a:	4449      	add	r1, r9
 800231c:	9102      	str	r1, [sp, #8]
 800231e:	4641      	mov	r1, r8
 8002320:	040f      	lsls	r7, r1, #16
 8002322:	9904      	ldr	r1, [sp, #16]
 8002324:	0c3f      	lsrs	r7, r7, #16
 8002326:	4688      	mov	r8, r1
 8002328:	0400      	lsls	r0, r0, #16
 800232a:	19c0      	adds	r0, r0, r7
 800232c:	4480      	add	r8, r0
 800232e:	4641      	mov	r1, r8
 8002330:	9104      	str	r1, [sp, #16]
 8002332:	4659      	mov	r1, fp
 8002334:	0c0f      	lsrs	r7, r1, #16
 8002336:	0409      	lsls	r1, r1, #16
 8002338:	0c09      	lsrs	r1, r1, #16
 800233a:	4688      	mov	r8, r1
 800233c:	4359      	muls	r1, r3
 800233e:	468a      	mov	sl, r1
 8002340:	0039      	movs	r1, r7
 8002342:	4351      	muls	r1, r2
 8002344:	4689      	mov	r9, r1
 8002346:	4641      	mov	r1, r8
 8002348:	434a      	muls	r2, r1
 800234a:	4651      	mov	r1, sl
 800234c:	0c09      	lsrs	r1, r1, #16
 800234e:	468b      	mov	fp, r1
 8002350:	437b      	muls	r3, r7
 8002352:	18d2      	adds	r2, r2, r3
 8002354:	445a      	add	r2, fp
 8002356:	4293      	cmp	r3, r2
 8002358:	d903      	bls.n	8002362 <__aeabi_dmul+0x2c6>
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	469b      	mov	fp, r3
 8002360:	44d9      	add	r9, fp
 8002362:	4651      	mov	r1, sl
 8002364:	0409      	lsls	r1, r1, #16
 8002366:	0c09      	lsrs	r1, r1, #16
 8002368:	468a      	mov	sl, r1
 800236a:	4641      	mov	r1, r8
 800236c:	4361      	muls	r1, r4
 800236e:	437c      	muls	r4, r7
 8002370:	0c13      	lsrs	r3, r2, #16
 8002372:	0412      	lsls	r2, r2, #16
 8002374:	444b      	add	r3, r9
 8002376:	4452      	add	r2, sl
 8002378:	46a1      	mov	r9, r4
 800237a:	468a      	mov	sl, r1
 800237c:	003c      	movs	r4, r7
 800237e:	4641      	mov	r1, r8
 8002380:	436c      	muls	r4, r5
 8002382:	434d      	muls	r5, r1
 8002384:	4651      	mov	r1, sl
 8002386:	444d      	add	r5, r9
 8002388:	0c0f      	lsrs	r7, r1, #16
 800238a:	197d      	adds	r5, r7, r5
 800238c:	45a9      	cmp	r9, r5
 800238e:	d903      	bls.n	8002398 <__aeabi_dmul+0x2fc>
 8002390:	2180      	movs	r1, #128	; 0x80
 8002392:	0249      	lsls	r1, r1, #9
 8002394:	4688      	mov	r8, r1
 8002396:	4444      	add	r4, r8
 8002398:	9f04      	ldr	r7, [sp, #16]
 800239a:	9903      	ldr	r1, [sp, #12]
 800239c:	46b8      	mov	r8, r7
 800239e:	4441      	add	r1, r8
 80023a0:	468b      	mov	fp, r1
 80023a2:	4583      	cmp	fp, r0
 80023a4:	4180      	sbcs	r0, r0
 80023a6:	4241      	negs	r1, r0
 80023a8:	4688      	mov	r8, r1
 80023aa:	4651      	mov	r1, sl
 80023ac:	0408      	lsls	r0, r1, #16
 80023ae:	042f      	lsls	r7, r5, #16
 80023b0:	0c00      	lsrs	r0, r0, #16
 80023b2:	183f      	adds	r7, r7, r0
 80023b4:	4658      	mov	r0, fp
 80023b6:	9902      	ldr	r1, [sp, #8]
 80023b8:	1810      	adds	r0, r2, r0
 80023ba:	4689      	mov	r9, r1
 80023bc:	4290      	cmp	r0, r2
 80023be:	4192      	sbcs	r2, r2
 80023c0:	444f      	add	r7, r9
 80023c2:	46ba      	mov	sl, r7
 80023c4:	4252      	negs	r2, r2
 80023c6:	4699      	mov	r9, r3
 80023c8:	4693      	mov	fp, r2
 80023ca:	44c2      	add	sl, r8
 80023cc:	44d1      	add	r9, sl
 80023ce:	44cb      	add	fp, r9
 80023d0:	428f      	cmp	r7, r1
 80023d2:	41bf      	sbcs	r7, r7
 80023d4:	45c2      	cmp	sl, r8
 80023d6:	4189      	sbcs	r1, r1
 80023d8:	4599      	cmp	r9, r3
 80023da:	419b      	sbcs	r3, r3
 80023dc:	4593      	cmp	fp, r2
 80023de:	4192      	sbcs	r2, r2
 80023e0:	427f      	negs	r7, r7
 80023e2:	4249      	negs	r1, r1
 80023e4:	0c2d      	lsrs	r5, r5, #16
 80023e6:	4252      	negs	r2, r2
 80023e8:	430f      	orrs	r7, r1
 80023ea:	425b      	negs	r3, r3
 80023ec:	4313      	orrs	r3, r2
 80023ee:	197f      	adds	r7, r7, r5
 80023f0:	18ff      	adds	r7, r7, r3
 80023f2:	465b      	mov	r3, fp
 80023f4:	193c      	adds	r4, r7, r4
 80023f6:	0ddb      	lsrs	r3, r3, #23
 80023f8:	9a05      	ldr	r2, [sp, #20]
 80023fa:	0264      	lsls	r4, r4, #9
 80023fc:	431c      	orrs	r4, r3
 80023fe:	0243      	lsls	r3, r0, #9
 8002400:	4313      	orrs	r3, r2
 8002402:	1e5d      	subs	r5, r3, #1
 8002404:	41ab      	sbcs	r3, r5
 8002406:	465a      	mov	r2, fp
 8002408:	0dc0      	lsrs	r0, r0, #23
 800240a:	4303      	orrs	r3, r0
 800240c:	0252      	lsls	r2, r2, #9
 800240e:	4313      	orrs	r3, r2
 8002410:	01e2      	lsls	r2, r4, #7
 8002412:	d556      	bpl.n	80024c2 <__aeabi_dmul+0x426>
 8002414:	2001      	movs	r0, #1
 8002416:	085a      	lsrs	r2, r3, #1
 8002418:	4003      	ands	r3, r0
 800241a:	4313      	orrs	r3, r2
 800241c:	07e2      	lsls	r2, r4, #31
 800241e:	4313      	orrs	r3, r2
 8002420:	0864      	lsrs	r4, r4, #1
 8002422:	485a      	ldr	r0, [pc, #360]	; (800258c <__aeabi_dmul+0x4f0>)
 8002424:	4460      	add	r0, ip
 8002426:	2800      	cmp	r0, #0
 8002428:	dd4d      	ble.n	80024c6 <__aeabi_dmul+0x42a>
 800242a:	075a      	lsls	r2, r3, #29
 800242c:	d009      	beq.n	8002442 <__aeabi_dmul+0x3a6>
 800242e:	220f      	movs	r2, #15
 8002430:	401a      	ands	r2, r3
 8002432:	2a04      	cmp	r2, #4
 8002434:	d005      	beq.n	8002442 <__aeabi_dmul+0x3a6>
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	429a      	cmp	r2, r3
 800243a:	419b      	sbcs	r3, r3
 800243c:	425b      	negs	r3, r3
 800243e:	18e4      	adds	r4, r4, r3
 8002440:	0013      	movs	r3, r2
 8002442:	01e2      	lsls	r2, r4, #7
 8002444:	d504      	bpl.n	8002450 <__aeabi_dmul+0x3b4>
 8002446:	2080      	movs	r0, #128	; 0x80
 8002448:	4a51      	ldr	r2, [pc, #324]	; (8002590 <__aeabi_dmul+0x4f4>)
 800244a:	00c0      	lsls	r0, r0, #3
 800244c:	4014      	ands	r4, r2
 800244e:	4460      	add	r0, ip
 8002450:	4a50      	ldr	r2, [pc, #320]	; (8002594 <__aeabi_dmul+0x4f8>)
 8002452:	4290      	cmp	r0, r2
 8002454:	dd00      	ble.n	8002458 <__aeabi_dmul+0x3bc>
 8002456:	e6e3      	b.n	8002220 <__aeabi_dmul+0x184>
 8002458:	2501      	movs	r5, #1
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	0762      	lsls	r2, r4, #29
 800245e:	431a      	orrs	r2, r3
 8002460:	0264      	lsls	r4, r4, #9
 8002462:	9b01      	ldr	r3, [sp, #4]
 8002464:	4691      	mov	r9, r2
 8002466:	0b22      	lsrs	r2, r4, #12
 8002468:	0544      	lsls	r4, r0, #21
 800246a:	0d64      	lsrs	r4, r4, #21
 800246c:	401d      	ands	r5, r3
 800246e:	e67c      	b.n	800216a <__aeabi_dmul+0xce>
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	4659      	mov	r1, fp
 8002474:	0312      	lsls	r2, r2, #12
 8002476:	4211      	tst	r1, r2
 8002478:	d008      	beq.n	800248c <__aeabi_dmul+0x3f0>
 800247a:	4214      	tst	r4, r2
 800247c:	d106      	bne.n	800248c <__aeabi_dmul+0x3f0>
 800247e:	4322      	orrs	r2, r4
 8002480:	0312      	lsls	r2, r2, #12
 8002482:	0b12      	lsrs	r2, r2, #12
 8002484:	4645      	mov	r5, r8
 8002486:	4699      	mov	r9, r3
 8002488:	4c43      	ldr	r4, [pc, #268]	; (8002598 <__aeabi_dmul+0x4fc>)
 800248a:	e66e      	b.n	800216a <__aeabi_dmul+0xce>
 800248c:	465b      	mov	r3, fp
 800248e:	431a      	orrs	r2, r3
 8002490:	0312      	lsls	r2, r2, #12
 8002492:	0b12      	lsrs	r2, r2, #12
 8002494:	4c40      	ldr	r4, [pc, #256]	; (8002598 <__aeabi_dmul+0x4fc>)
 8002496:	e668      	b.n	800216a <__aeabi_dmul+0xce>
 8002498:	0003      	movs	r3, r0
 800249a:	4654      	mov	r4, sl
 800249c:	3b28      	subs	r3, #40	; 0x28
 800249e:	409c      	lsls	r4, r3
 80024a0:	2300      	movs	r3, #0
 80024a2:	e6b9      	b.n	8002218 <__aeabi_dmul+0x17c>
 80024a4:	f000 fd1a 	bl	8002edc <__clzsi2>
 80024a8:	3020      	adds	r0, #32
 80024aa:	e6a6      	b.n	80021fa <__aeabi_dmul+0x15e>
 80024ac:	0003      	movs	r3, r0
 80024ae:	3b28      	subs	r3, #40	; 0x28
 80024b0:	409f      	lsls	r7, r3
 80024b2:	2300      	movs	r3, #0
 80024b4:	46bb      	mov	fp, r7
 80024b6:	4699      	mov	r9, r3
 80024b8:	e68a      	b.n	80021d0 <__aeabi_dmul+0x134>
 80024ba:	f000 fd0f 	bl	8002edc <__clzsi2>
 80024be:	3020      	adds	r0, #32
 80024c0:	e674      	b.n	80021ac <__aeabi_dmul+0x110>
 80024c2:	46b4      	mov	ip, r6
 80024c4:	e7ad      	b.n	8002422 <__aeabi_dmul+0x386>
 80024c6:	2501      	movs	r5, #1
 80024c8:	1a2a      	subs	r2, r5, r0
 80024ca:	2a38      	cmp	r2, #56	; 0x38
 80024cc:	dd06      	ble.n	80024dc <__aeabi_dmul+0x440>
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	2400      	movs	r4, #0
 80024d2:	401d      	ands	r5, r3
 80024d4:	2300      	movs	r3, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	4699      	mov	r9, r3
 80024da:	e646      	b.n	800216a <__aeabi_dmul+0xce>
 80024dc:	2a1f      	cmp	r2, #31
 80024de:	dc21      	bgt.n	8002524 <__aeabi_dmul+0x488>
 80024e0:	2520      	movs	r5, #32
 80024e2:	0020      	movs	r0, r4
 80024e4:	1aad      	subs	r5, r5, r2
 80024e6:	001e      	movs	r6, r3
 80024e8:	40ab      	lsls	r3, r5
 80024ea:	40a8      	lsls	r0, r5
 80024ec:	40d6      	lsrs	r6, r2
 80024ee:	1e5d      	subs	r5, r3, #1
 80024f0:	41ab      	sbcs	r3, r5
 80024f2:	4330      	orrs	r0, r6
 80024f4:	4318      	orrs	r0, r3
 80024f6:	40d4      	lsrs	r4, r2
 80024f8:	0743      	lsls	r3, r0, #29
 80024fa:	d009      	beq.n	8002510 <__aeabi_dmul+0x474>
 80024fc:	230f      	movs	r3, #15
 80024fe:	4003      	ands	r3, r0
 8002500:	2b04      	cmp	r3, #4
 8002502:	d005      	beq.n	8002510 <__aeabi_dmul+0x474>
 8002504:	0003      	movs	r3, r0
 8002506:	1d18      	adds	r0, r3, #4
 8002508:	4298      	cmp	r0, r3
 800250a:	419b      	sbcs	r3, r3
 800250c:	425b      	negs	r3, r3
 800250e:	18e4      	adds	r4, r4, r3
 8002510:	0223      	lsls	r3, r4, #8
 8002512:	d521      	bpl.n	8002558 <__aeabi_dmul+0x4bc>
 8002514:	2501      	movs	r5, #1
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	2401      	movs	r4, #1
 800251a:	401d      	ands	r5, r3
 800251c:	2300      	movs	r3, #0
 800251e:	2200      	movs	r2, #0
 8002520:	4699      	mov	r9, r3
 8002522:	e622      	b.n	800216a <__aeabi_dmul+0xce>
 8002524:	251f      	movs	r5, #31
 8002526:	0021      	movs	r1, r4
 8002528:	426d      	negs	r5, r5
 800252a:	1a28      	subs	r0, r5, r0
 800252c:	40c1      	lsrs	r1, r0
 800252e:	0008      	movs	r0, r1
 8002530:	2a20      	cmp	r2, #32
 8002532:	d01d      	beq.n	8002570 <__aeabi_dmul+0x4d4>
 8002534:	355f      	adds	r5, #95	; 0x5f
 8002536:	1aaa      	subs	r2, r5, r2
 8002538:	4094      	lsls	r4, r2
 800253a:	4323      	orrs	r3, r4
 800253c:	1e5c      	subs	r4, r3, #1
 800253e:	41a3      	sbcs	r3, r4
 8002540:	2507      	movs	r5, #7
 8002542:	4303      	orrs	r3, r0
 8002544:	401d      	ands	r5, r3
 8002546:	2200      	movs	r2, #0
 8002548:	2d00      	cmp	r5, #0
 800254a:	d009      	beq.n	8002560 <__aeabi_dmul+0x4c4>
 800254c:	220f      	movs	r2, #15
 800254e:	2400      	movs	r4, #0
 8002550:	401a      	ands	r2, r3
 8002552:	0018      	movs	r0, r3
 8002554:	2a04      	cmp	r2, #4
 8002556:	d1d6      	bne.n	8002506 <__aeabi_dmul+0x46a>
 8002558:	0003      	movs	r3, r0
 800255a:	0765      	lsls	r5, r4, #29
 800255c:	0264      	lsls	r4, r4, #9
 800255e:	0b22      	lsrs	r2, r4, #12
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	432b      	orrs	r3, r5
 8002564:	2501      	movs	r5, #1
 8002566:	4699      	mov	r9, r3
 8002568:	9b01      	ldr	r3, [sp, #4]
 800256a:	2400      	movs	r4, #0
 800256c:	401d      	ands	r5, r3
 800256e:	e5fc      	b.n	800216a <__aeabi_dmul+0xce>
 8002570:	2400      	movs	r4, #0
 8002572:	e7e2      	b.n	800253a <__aeabi_dmul+0x49e>
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	2501      	movs	r5, #1
 8002578:	0312      	lsls	r2, r2, #12
 800257a:	4322      	orrs	r2, r4
 800257c:	9901      	ldr	r1, [sp, #4]
 800257e:	0312      	lsls	r2, r2, #12
 8002580:	0b12      	lsrs	r2, r2, #12
 8002582:	400d      	ands	r5, r1
 8002584:	4699      	mov	r9, r3
 8002586:	4c04      	ldr	r4, [pc, #16]	; (8002598 <__aeabi_dmul+0x4fc>)
 8002588:	e5ef      	b.n	800216a <__aeabi_dmul+0xce>
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	000003ff 	.word	0x000003ff
 8002590:	feffffff 	.word	0xfeffffff
 8002594:	000007fe 	.word	0x000007fe
 8002598:	000007ff 	.word	0x000007ff

0800259c <__aeabi_dsub>:
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	4646      	mov	r6, r8
 80025a0:	46d6      	mov	lr, sl
 80025a2:	464f      	mov	r7, r9
 80025a4:	030c      	lsls	r4, r1, #12
 80025a6:	b5c0      	push	{r6, r7, lr}
 80025a8:	0fcd      	lsrs	r5, r1, #31
 80025aa:	004e      	lsls	r6, r1, #1
 80025ac:	0a61      	lsrs	r1, r4, #9
 80025ae:	0f44      	lsrs	r4, r0, #29
 80025b0:	430c      	orrs	r4, r1
 80025b2:	00c1      	lsls	r1, r0, #3
 80025b4:	0058      	lsls	r0, r3, #1
 80025b6:	0d40      	lsrs	r0, r0, #21
 80025b8:	4684      	mov	ip, r0
 80025ba:	468a      	mov	sl, r1
 80025bc:	000f      	movs	r7, r1
 80025be:	0319      	lsls	r1, r3, #12
 80025c0:	0f50      	lsrs	r0, r2, #29
 80025c2:	0a49      	lsrs	r1, r1, #9
 80025c4:	4301      	orrs	r1, r0
 80025c6:	48c6      	ldr	r0, [pc, #792]	; (80028e0 <__aeabi_dsub+0x344>)
 80025c8:	0d76      	lsrs	r6, r6, #21
 80025ca:	46a8      	mov	r8, r5
 80025cc:	0fdb      	lsrs	r3, r3, #31
 80025ce:	00d2      	lsls	r2, r2, #3
 80025d0:	4584      	cmp	ip, r0
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dsub+0x3a>
 80025d4:	e0d8      	b.n	8002788 <__aeabi_dsub+0x1ec>
 80025d6:	2001      	movs	r0, #1
 80025d8:	4043      	eors	r3, r0
 80025da:	42ab      	cmp	r3, r5
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dsub+0x44>
 80025de:	e0a6      	b.n	800272e <__aeabi_dsub+0x192>
 80025e0:	4660      	mov	r0, ip
 80025e2:	1a35      	subs	r5, r6, r0
 80025e4:	2d00      	cmp	r5, #0
 80025e6:	dc00      	bgt.n	80025ea <__aeabi_dsub+0x4e>
 80025e8:	e105      	b.n	80027f6 <__aeabi_dsub+0x25a>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d110      	bne.n	8002610 <__aeabi_dsub+0x74>
 80025ee:	000b      	movs	r3, r1
 80025f0:	4313      	orrs	r3, r2
 80025f2:	d100      	bne.n	80025f6 <__aeabi_dsub+0x5a>
 80025f4:	e0d7      	b.n	80027a6 <__aeabi_dsub+0x20a>
 80025f6:	1e6b      	subs	r3, r5, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d000      	beq.n	80025fe <__aeabi_dsub+0x62>
 80025fc:	e14b      	b.n	8002896 <__aeabi_dsub+0x2fa>
 80025fe:	4653      	mov	r3, sl
 8002600:	1a9f      	subs	r7, r3, r2
 8002602:	45ba      	cmp	sl, r7
 8002604:	4180      	sbcs	r0, r0
 8002606:	1a64      	subs	r4, r4, r1
 8002608:	4240      	negs	r0, r0
 800260a:	1a24      	subs	r4, r4, r0
 800260c:	2601      	movs	r6, #1
 800260e:	e01e      	b.n	800264e <__aeabi_dsub+0xb2>
 8002610:	4bb3      	ldr	r3, [pc, #716]	; (80028e0 <__aeabi_dsub+0x344>)
 8002612:	429e      	cmp	r6, r3
 8002614:	d048      	beq.n	80026a8 <__aeabi_dsub+0x10c>
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	4319      	orrs	r1, r3
 800261c:	2d38      	cmp	r5, #56	; 0x38
 800261e:	dd00      	ble.n	8002622 <__aeabi_dsub+0x86>
 8002620:	e119      	b.n	8002856 <__aeabi_dsub+0x2ba>
 8002622:	2d1f      	cmp	r5, #31
 8002624:	dd00      	ble.n	8002628 <__aeabi_dsub+0x8c>
 8002626:	e14c      	b.n	80028c2 <__aeabi_dsub+0x326>
 8002628:	2320      	movs	r3, #32
 800262a:	000f      	movs	r7, r1
 800262c:	1b5b      	subs	r3, r3, r5
 800262e:	0010      	movs	r0, r2
 8002630:	409a      	lsls	r2, r3
 8002632:	409f      	lsls	r7, r3
 8002634:	40e8      	lsrs	r0, r5
 8002636:	1e53      	subs	r3, r2, #1
 8002638:	419a      	sbcs	r2, r3
 800263a:	40e9      	lsrs	r1, r5
 800263c:	4307      	orrs	r7, r0
 800263e:	4317      	orrs	r7, r2
 8002640:	4653      	mov	r3, sl
 8002642:	1bdf      	subs	r7, r3, r7
 8002644:	1a61      	subs	r1, r4, r1
 8002646:	45ba      	cmp	sl, r7
 8002648:	41a4      	sbcs	r4, r4
 800264a:	4264      	negs	r4, r4
 800264c:	1b0c      	subs	r4, r1, r4
 800264e:	0223      	lsls	r3, r4, #8
 8002650:	d400      	bmi.n	8002654 <__aeabi_dsub+0xb8>
 8002652:	e0c5      	b.n	80027e0 <__aeabi_dsub+0x244>
 8002654:	0264      	lsls	r4, r4, #9
 8002656:	0a65      	lsrs	r5, r4, #9
 8002658:	2d00      	cmp	r5, #0
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0xc2>
 800265c:	e0f6      	b.n	800284c <__aeabi_dsub+0x2b0>
 800265e:	0028      	movs	r0, r5
 8002660:	f000 fc3c 	bl	8002edc <__clzsi2>
 8002664:	0003      	movs	r3, r0
 8002666:	3b08      	subs	r3, #8
 8002668:	2b1f      	cmp	r3, #31
 800266a:	dd00      	ble.n	800266e <__aeabi_dsub+0xd2>
 800266c:	e0e9      	b.n	8002842 <__aeabi_dsub+0x2a6>
 800266e:	2220      	movs	r2, #32
 8002670:	003c      	movs	r4, r7
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	409d      	lsls	r5, r3
 8002676:	40d4      	lsrs	r4, r2
 8002678:	409f      	lsls	r7, r3
 800267a:	4325      	orrs	r5, r4
 800267c:	429e      	cmp	r6, r3
 800267e:	dd00      	ble.n	8002682 <__aeabi_dsub+0xe6>
 8002680:	e0db      	b.n	800283a <__aeabi_dsub+0x29e>
 8002682:	1b9e      	subs	r6, r3, r6
 8002684:	1c73      	adds	r3, r6, #1
 8002686:	2b1f      	cmp	r3, #31
 8002688:	dd00      	ble.n	800268c <__aeabi_dsub+0xf0>
 800268a:	e10a      	b.n	80028a2 <__aeabi_dsub+0x306>
 800268c:	2220      	movs	r2, #32
 800268e:	0038      	movs	r0, r7
 8002690:	1ad2      	subs	r2, r2, r3
 8002692:	0029      	movs	r1, r5
 8002694:	4097      	lsls	r7, r2
 8002696:	002c      	movs	r4, r5
 8002698:	4091      	lsls	r1, r2
 800269a:	40d8      	lsrs	r0, r3
 800269c:	1e7a      	subs	r2, r7, #1
 800269e:	4197      	sbcs	r7, r2
 80026a0:	40dc      	lsrs	r4, r3
 80026a2:	2600      	movs	r6, #0
 80026a4:	4301      	orrs	r1, r0
 80026a6:	430f      	orrs	r7, r1
 80026a8:	077b      	lsls	r3, r7, #29
 80026aa:	d009      	beq.n	80026c0 <__aeabi_dsub+0x124>
 80026ac:	230f      	movs	r3, #15
 80026ae:	403b      	ands	r3, r7
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d005      	beq.n	80026c0 <__aeabi_dsub+0x124>
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	42bb      	cmp	r3, r7
 80026b8:	41bf      	sbcs	r7, r7
 80026ba:	427f      	negs	r7, r7
 80026bc:	19e4      	adds	r4, r4, r7
 80026be:	001f      	movs	r7, r3
 80026c0:	0223      	lsls	r3, r4, #8
 80026c2:	d525      	bpl.n	8002710 <__aeabi_dsub+0x174>
 80026c4:	4b86      	ldr	r3, [pc, #536]	; (80028e0 <__aeabi_dsub+0x344>)
 80026c6:	3601      	adds	r6, #1
 80026c8:	429e      	cmp	r6, r3
 80026ca:	d100      	bne.n	80026ce <__aeabi_dsub+0x132>
 80026cc:	e0af      	b.n	800282e <__aeabi_dsub+0x292>
 80026ce:	4b85      	ldr	r3, [pc, #532]	; (80028e4 <__aeabi_dsub+0x348>)
 80026d0:	2501      	movs	r5, #1
 80026d2:	401c      	ands	r4, r3
 80026d4:	4643      	mov	r3, r8
 80026d6:	0762      	lsls	r2, r4, #29
 80026d8:	08ff      	lsrs	r7, r7, #3
 80026da:	0264      	lsls	r4, r4, #9
 80026dc:	0576      	lsls	r6, r6, #21
 80026de:	4317      	orrs	r7, r2
 80026e0:	0b24      	lsrs	r4, r4, #12
 80026e2:	0d76      	lsrs	r6, r6, #21
 80026e4:	401d      	ands	r5, r3
 80026e6:	2100      	movs	r1, #0
 80026e8:	0324      	lsls	r4, r4, #12
 80026ea:	0b23      	lsrs	r3, r4, #12
 80026ec:	0d0c      	lsrs	r4, r1, #20
 80026ee:	4a7e      	ldr	r2, [pc, #504]	; (80028e8 <__aeabi_dsub+0x34c>)
 80026f0:	0524      	lsls	r4, r4, #20
 80026f2:	431c      	orrs	r4, r3
 80026f4:	4014      	ands	r4, r2
 80026f6:	0533      	lsls	r3, r6, #20
 80026f8:	4323      	orrs	r3, r4
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	07ed      	lsls	r5, r5, #31
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	432b      	orrs	r3, r5
 8002702:	0038      	movs	r0, r7
 8002704:	0019      	movs	r1, r3
 8002706:	bc1c      	pop	{r2, r3, r4}
 8002708:	4690      	mov	r8, r2
 800270a:	4699      	mov	r9, r3
 800270c:	46a2      	mov	sl, r4
 800270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002710:	2501      	movs	r5, #1
 8002712:	4643      	mov	r3, r8
 8002714:	0762      	lsls	r2, r4, #29
 8002716:	08ff      	lsrs	r7, r7, #3
 8002718:	4317      	orrs	r7, r2
 800271a:	08e4      	lsrs	r4, r4, #3
 800271c:	401d      	ands	r5, r3
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <__aeabi_dsub+0x344>)
 8002720:	429e      	cmp	r6, r3
 8002722:	d036      	beq.n	8002792 <__aeabi_dsub+0x1f6>
 8002724:	0324      	lsls	r4, r4, #12
 8002726:	0576      	lsls	r6, r6, #21
 8002728:	0b24      	lsrs	r4, r4, #12
 800272a:	0d76      	lsrs	r6, r6, #21
 800272c:	e7db      	b.n	80026e6 <__aeabi_dsub+0x14a>
 800272e:	4663      	mov	r3, ip
 8002730:	1af3      	subs	r3, r6, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	dc00      	bgt.n	8002738 <__aeabi_dsub+0x19c>
 8002736:	e094      	b.n	8002862 <__aeabi_dsub+0x2c6>
 8002738:	4660      	mov	r0, ip
 800273a:	2800      	cmp	r0, #0
 800273c:	d035      	beq.n	80027aa <__aeabi_dsub+0x20e>
 800273e:	4868      	ldr	r0, [pc, #416]	; (80028e0 <__aeabi_dsub+0x344>)
 8002740:	4286      	cmp	r6, r0
 8002742:	d0b1      	beq.n	80026a8 <__aeabi_dsub+0x10c>
 8002744:	2780      	movs	r7, #128	; 0x80
 8002746:	043f      	lsls	r7, r7, #16
 8002748:	4339      	orrs	r1, r7
 800274a:	2b38      	cmp	r3, #56	; 0x38
 800274c:	dc00      	bgt.n	8002750 <__aeabi_dsub+0x1b4>
 800274e:	e0fd      	b.n	800294c <__aeabi_dsub+0x3b0>
 8002750:	430a      	orrs	r2, r1
 8002752:	0017      	movs	r7, r2
 8002754:	2100      	movs	r1, #0
 8002756:	1e7a      	subs	r2, r7, #1
 8002758:	4197      	sbcs	r7, r2
 800275a:	4457      	add	r7, sl
 800275c:	4557      	cmp	r7, sl
 800275e:	4180      	sbcs	r0, r0
 8002760:	1909      	adds	r1, r1, r4
 8002762:	4244      	negs	r4, r0
 8002764:	190c      	adds	r4, r1, r4
 8002766:	0223      	lsls	r3, r4, #8
 8002768:	d53a      	bpl.n	80027e0 <__aeabi_dsub+0x244>
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <__aeabi_dsub+0x344>)
 800276c:	3601      	adds	r6, #1
 800276e:	429e      	cmp	r6, r3
 8002770:	d100      	bne.n	8002774 <__aeabi_dsub+0x1d8>
 8002772:	e14b      	b.n	8002a0c <__aeabi_dsub+0x470>
 8002774:	2201      	movs	r2, #1
 8002776:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <__aeabi_dsub+0x348>)
 8002778:	401c      	ands	r4, r3
 800277a:	087b      	lsrs	r3, r7, #1
 800277c:	4017      	ands	r7, r2
 800277e:	431f      	orrs	r7, r3
 8002780:	07e2      	lsls	r2, r4, #31
 8002782:	4317      	orrs	r7, r2
 8002784:	0864      	lsrs	r4, r4, #1
 8002786:	e78f      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002788:	0008      	movs	r0, r1
 800278a:	4310      	orrs	r0, r2
 800278c:	d000      	beq.n	8002790 <__aeabi_dsub+0x1f4>
 800278e:	e724      	b.n	80025da <__aeabi_dsub+0x3e>
 8002790:	e721      	b.n	80025d6 <__aeabi_dsub+0x3a>
 8002792:	0023      	movs	r3, r4
 8002794:	433b      	orrs	r3, r7
 8002796:	d100      	bne.n	800279a <__aeabi_dsub+0x1fe>
 8002798:	e1b9      	b.n	8002b0e <__aeabi_dsub+0x572>
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0312      	lsls	r2, r2, #12
 800279e:	4314      	orrs	r4, r2
 80027a0:	0324      	lsls	r4, r4, #12
 80027a2:	0b24      	lsrs	r4, r4, #12
 80027a4:	e79f      	b.n	80026e6 <__aeabi_dsub+0x14a>
 80027a6:	002e      	movs	r6, r5
 80027a8:	e77e      	b.n	80026a8 <__aeabi_dsub+0x10c>
 80027aa:	0008      	movs	r0, r1
 80027ac:	4310      	orrs	r0, r2
 80027ae:	d100      	bne.n	80027b2 <__aeabi_dsub+0x216>
 80027b0:	e0ca      	b.n	8002948 <__aeabi_dsub+0x3ac>
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	4684      	mov	ip, r0
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d000      	beq.n	80027bc <__aeabi_dsub+0x220>
 80027ba:	e0e7      	b.n	800298c <__aeabi_dsub+0x3f0>
 80027bc:	4452      	add	r2, sl
 80027be:	4552      	cmp	r2, sl
 80027c0:	4180      	sbcs	r0, r0
 80027c2:	1864      	adds	r4, r4, r1
 80027c4:	4240      	negs	r0, r0
 80027c6:	1824      	adds	r4, r4, r0
 80027c8:	0017      	movs	r7, r2
 80027ca:	2601      	movs	r6, #1
 80027cc:	0223      	lsls	r3, r4, #8
 80027ce:	d507      	bpl.n	80027e0 <__aeabi_dsub+0x244>
 80027d0:	2602      	movs	r6, #2
 80027d2:	e7cf      	b.n	8002774 <__aeabi_dsub+0x1d8>
 80027d4:	4664      	mov	r4, ip
 80027d6:	432c      	orrs	r4, r5
 80027d8:	d100      	bne.n	80027dc <__aeabi_dsub+0x240>
 80027da:	e1b3      	b.n	8002b44 <__aeabi_dsub+0x5a8>
 80027dc:	002c      	movs	r4, r5
 80027de:	4667      	mov	r7, ip
 80027e0:	077b      	lsls	r3, r7, #29
 80027e2:	d000      	beq.n	80027e6 <__aeabi_dsub+0x24a>
 80027e4:	e762      	b.n	80026ac <__aeabi_dsub+0x110>
 80027e6:	0763      	lsls	r3, r4, #29
 80027e8:	08ff      	lsrs	r7, r7, #3
 80027ea:	431f      	orrs	r7, r3
 80027ec:	2501      	movs	r5, #1
 80027ee:	4643      	mov	r3, r8
 80027f0:	08e4      	lsrs	r4, r4, #3
 80027f2:	401d      	ands	r5, r3
 80027f4:	e793      	b.n	800271e <__aeabi_dsub+0x182>
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	d178      	bne.n	80028ec <__aeabi_dsub+0x350>
 80027fa:	1c75      	adds	r5, r6, #1
 80027fc:	056d      	lsls	r5, r5, #21
 80027fe:	0d6d      	lsrs	r5, r5, #21
 8002800:	2d01      	cmp	r5, #1
 8002802:	dc00      	bgt.n	8002806 <__aeabi_dsub+0x26a>
 8002804:	e0f2      	b.n	80029ec <__aeabi_dsub+0x450>
 8002806:	4650      	mov	r0, sl
 8002808:	1a80      	subs	r0, r0, r2
 800280a:	4582      	cmp	sl, r0
 800280c:	41bf      	sbcs	r7, r7
 800280e:	1a65      	subs	r5, r4, r1
 8002810:	427f      	negs	r7, r7
 8002812:	1bed      	subs	r5, r5, r7
 8002814:	4684      	mov	ip, r0
 8002816:	0228      	lsls	r0, r5, #8
 8002818:	d400      	bmi.n	800281c <__aeabi_dsub+0x280>
 800281a:	e08c      	b.n	8002936 <__aeabi_dsub+0x39a>
 800281c:	4650      	mov	r0, sl
 800281e:	1a17      	subs	r7, r2, r0
 8002820:	42ba      	cmp	r2, r7
 8002822:	4192      	sbcs	r2, r2
 8002824:	1b0c      	subs	r4, r1, r4
 8002826:	4255      	negs	r5, r2
 8002828:	1b65      	subs	r5, r4, r5
 800282a:	4698      	mov	r8, r3
 800282c:	e714      	b.n	8002658 <__aeabi_dsub+0xbc>
 800282e:	2501      	movs	r5, #1
 8002830:	4643      	mov	r3, r8
 8002832:	2400      	movs	r4, #0
 8002834:	401d      	ands	r5, r3
 8002836:	2700      	movs	r7, #0
 8002838:	e755      	b.n	80026e6 <__aeabi_dsub+0x14a>
 800283a:	4c2a      	ldr	r4, [pc, #168]	; (80028e4 <__aeabi_dsub+0x348>)
 800283c:	1af6      	subs	r6, r6, r3
 800283e:	402c      	ands	r4, r5
 8002840:	e732      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002842:	003d      	movs	r5, r7
 8002844:	3828      	subs	r0, #40	; 0x28
 8002846:	4085      	lsls	r5, r0
 8002848:	2700      	movs	r7, #0
 800284a:	e717      	b.n	800267c <__aeabi_dsub+0xe0>
 800284c:	0038      	movs	r0, r7
 800284e:	f000 fb45 	bl	8002edc <__clzsi2>
 8002852:	3020      	adds	r0, #32
 8002854:	e706      	b.n	8002664 <__aeabi_dsub+0xc8>
 8002856:	430a      	orrs	r2, r1
 8002858:	0017      	movs	r7, r2
 800285a:	2100      	movs	r1, #0
 800285c:	1e7a      	subs	r2, r7, #1
 800285e:	4197      	sbcs	r7, r2
 8002860:	e6ee      	b.n	8002640 <__aeabi_dsub+0xa4>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d000      	beq.n	8002868 <__aeabi_dsub+0x2cc>
 8002866:	e0e5      	b.n	8002a34 <__aeabi_dsub+0x498>
 8002868:	1c73      	adds	r3, r6, #1
 800286a:	469c      	mov	ip, r3
 800286c:	055b      	lsls	r3, r3, #21
 800286e:	0d5b      	lsrs	r3, r3, #21
 8002870:	2b01      	cmp	r3, #1
 8002872:	dc00      	bgt.n	8002876 <__aeabi_dsub+0x2da>
 8002874:	e09f      	b.n	80029b6 <__aeabi_dsub+0x41a>
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <__aeabi_dsub+0x344>)
 8002878:	459c      	cmp	ip, r3
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x2e2>
 800287c:	e0c5      	b.n	8002a0a <__aeabi_dsub+0x46e>
 800287e:	4452      	add	r2, sl
 8002880:	4552      	cmp	r2, sl
 8002882:	4180      	sbcs	r0, r0
 8002884:	1864      	adds	r4, r4, r1
 8002886:	4240      	negs	r0, r0
 8002888:	1824      	adds	r4, r4, r0
 800288a:	07e7      	lsls	r7, r4, #31
 800288c:	0852      	lsrs	r2, r2, #1
 800288e:	4317      	orrs	r7, r2
 8002890:	0864      	lsrs	r4, r4, #1
 8002892:	4666      	mov	r6, ip
 8002894:	e708      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002896:	4812      	ldr	r0, [pc, #72]	; (80028e0 <__aeabi_dsub+0x344>)
 8002898:	4285      	cmp	r5, r0
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x302>
 800289c:	e085      	b.n	80029aa <__aeabi_dsub+0x40e>
 800289e:	001d      	movs	r5, r3
 80028a0:	e6bc      	b.n	800261c <__aeabi_dsub+0x80>
 80028a2:	0029      	movs	r1, r5
 80028a4:	3e1f      	subs	r6, #31
 80028a6:	40f1      	lsrs	r1, r6
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d100      	bne.n	80028ae <__aeabi_dsub+0x312>
 80028ac:	e07f      	b.n	80029ae <__aeabi_dsub+0x412>
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	409d      	lsls	r5, r3
 80028b4:	432f      	orrs	r7, r5
 80028b6:	1e7d      	subs	r5, r7, #1
 80028b8:	41af      	sbcs	r7, r5
 80028ba:	2400      	movs	r4, #0
 80028bc:	430f      	orrs	r7, r1
 80028be:	2600      	movs	r6, #0
 80028c0:	e78e      	b.n	80027e0 <__aeabi_dsub+0x244>
 80028c2:	002b      	movs	r3, r5
 80028c4:	000f      	movs	r7, r1
 80028c6:	3b20      	subs	r3, #32
 80028c8:	40df      	lsrs	r7, r3
 80028ca:	2d20      	cmp	r5, #32
 80028cc:	d071      	beq.n	80029b2 <__aeabi_dsub+0x416>
 80028ce:	2340      	movs	r3, #64	; 0x40
 80028d0:	1b5d      	subs	r5, r3, r5
 80028d2:	40a9      	lsls	r1, r5
 80028d4:	430a      	orrs	r2, r1
 80028d6:	1e51      	subs	r1, r2, #1
 80028d8:	418a      	sbcs	r2, r1
 80028da:	2100      	movs	r1, #0
 80028dc:	4317      	orrs	r7, r2
 80028de:	e6af      	b.n	8002640 <__aeabi_dsub+0xa4>
 80028e0:	000007ff 	.word	0x000007ff
 80028e4:	ff7fffff 	.word	0xff7fffff
 80028e8:	800fffff 	.word	0x800fffff
 80028ec:	2e00      	cmp	r6, #0
 80028ee:	d03e      	beq.n	800296e <__aeabi_dsub+0x3d2>
 80028f0:	4eb3      	ldr	r6, [pc, #716]	; (8002bc0 <__aeabi_dsub+0x624>)
 80028f2:	45b4      	cmp	ip, r6
 80028f4:	d045      	beq.n	8002982 <__aeabi_dsub+0x3e6>
 80028f6:	2680      	movs	r6, #128	; 0x80
 80028f8:	0436      	lsls	r6, r6, #16
 80028fa:	426d      	negs	r5, r5
 80028fc:	4334      	orrs	r4, r6
 80028fe:	2d38      	cmp	r5, #56	; 0x38
 8002900:	dd00      	ble.n	8002904 <__aeabi_dsub+0x368>
 8002902:	e0a8      	b.n	8002a56 <__aeabi_dsub+0x4ba>
 8002904:	2d1f      	cmp	r5, #31
 8002906:	dd00      	ble.n	800290a <__aeabi_dsub+0x36e>
 8002908:	e11f      	b.n	8002b4a <__aeabi_dsub+0x5ae>
 800290a:	2620      	movs	r6, #32
 800290c:	0027      	movs	r7, r4
 800290e:	4650      	mov	r0, sl
 8002910:	1b76      	subs	r6, r6, r5
 8002912:	40b7      	lsls	r7, r6
 8002914:	40e8      	lsrs	r0, r5
 8002916:	4307      	orrs	r7, r0
 8002918:	4650      	mov	r0, sl
 800291a:	40b0      	lsls	r0, r6
 800291c:	1e46      	subs	r6, r0, #1
 800291e:	41b0      	sbcs	r0, r6
 8002920:	40ec      	lsrs	r4, r5
 8002922:	4338      	orrs	r0, r7
 8002924:	1a17      	subs	r7, r2, r0
 8002926:	42ba      	cmp	r2, r7
 8002928:	4192      	sbcs	r2, r2
 800292a:	1b0c      	subs	r4, r1, r4
 800292c:	4252      	negs	r2, r2
 800292e:	1aa4      	subs	r4, r4, r2
 8002930:	4666      	mov	r6, ip
 8002932:	4698      	mov	r8, r3
 8002934:	e68b      	b.n	800264e <__aeabi_dsub+0xb2>
 8002936:	4664      	mov	r4, ip
 8002938:	4667      	mov	r7, ip
 800293a:	432c      	orrs	r4, r5
 800293c:	d000      	beq.n	8002940 <__aeabi_dsub+0x3a4>
 800293e:	e68b      	b.n	8002658 <__aeabi_dsub+0xbc>
 8002940:	2500      	movs	r5, #0
 8002942:	2600      	movs	r6, #0
 8002944:	2700      	movs	r7, #0
 8002946:	e6ea      	b.n	800271e <__aeabi_dsub+0x182>
 8002948:	001e      	movs	r6, r3
 800294a:	e6ad      	b.n	80026a8 <__aeabi_dsub+0x10c>
 800294c:	2b1f      	cmp	r3, #31
 800294e:	dc60      	bgt.n	8002a12 <__aeabi_dsub+0x476>
 8002950:	2720      	movs	r7, #32
 8002952:	1af8      	subs	r0, r7, r3
 8002954:	000f      	movs	r7, r1
 8002956:	4684      	mov	ip, r0
 8002958:	4087      	lsls	r7, r0
 800295a:	0010      	movs	r0, r2
 800295c:	40d8      	lsrs	r0, r3
 800295e:	4307      	orrs	r7, r0
 8002960:	4660      	mov	r0, ip
 8002962:	4082      	lsls	r2, r0
 8002964:	1e50      	subs	r0, r2, #1
 8002966:	4182      	sbcs	r2, r0
 8002968:	40d9      	lsrs	r1, r3
 800296a:	4317      	orrs	r7, r2
 800296c:	e6f5      	b.n	800275a <__aeabi_dsub+0x1be>
 800296e:	0026      	movs	r6, r4
 8002970:	4650      	mov	r0, sl
 8002972:	4306      	orrs	r6, r0
 8002974:	d005      	beq.n	8002982 <__aeabi_dsub+0x3e6>
 8002976:	43ed      	mvns	r5, r5
 8002978:	2d00      	cmp	r5, #0
 800297a:	d0d3      	beq.n	8002924 <__aeabi_dsub+0x388>
 800297c:	4e90      	ldr	r6, [pc, #576]	; (8002bc0 <__aeabi_dsub+0x624>)
 800297e:	45b4      	cmp	ip, r6
 8002980:	d1bd      	bne.n	80028fe <__aeabi_dsub+0x362>
 8002982:	000c      	movs	r4, r1
 8002984:	0017      	movs	r7, r2
 8002986:	4666      	mov	r6, ip
 8002988:	4698      	mov	r8, r3
 800298a:	e68d      	b.n	80026a8 <__aeabi_dsub+0x10c>
 800298c:	488c      	ldr	r0, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x624>)
 800298e:	4283      	cmp	r3, r0
 8002990:	d00b      	beq.n	80029aa <__aeabi_dsub+0x40e>
 8002992:	4663      	mov	r3, ip
 8002994:	e6d9      	b.n	800274a <__aeabi_dsub+0x1ae>
 8002996:	2d00      	cmp	r5, #0
 8002998:	d000      	beq.n	800299c <__aeabi_dsub+0x400>
 800299a:	e096      	b.n	8002aca <__aeabi_dsub+0x52e>
 800299c:	0008      	movs	r0, r1
 800299e:	4310      	orrs	r0, r2
 80029a0:	d100      	bne.n	80029a4 <__aeabi_dsub+0x408>
 80029a2:	e0e2      	b.n	8002b6a <__aeabi_dsub+0x5ce>
 80029a4:	000c      	movs	r4, r1
 80029a6:	0017      	movs	r7, r2
 80029a8:	4698      	mov	r8, r3
 80029aa:	4e85      	ldr	r6, [pc, #532]	; (8002bc0 <__aeabi_dsub+0x624>)
 80029ac:	e67c      	b.n	80026a8 <__aeabi_dsub+0x10c>
 80029ae:	2500      	movs	r5, #0
 80029b0:	e780      	b.n	80028b4 <__aeabi_dsub+0x318>
 80029b2:	2100      	movs	r1, #0
 80029b4:	e78e      	b.n	80028d4 <__aeabi_dsub+0x338>
 80029b6:	0023      	movs	r3, r4
 80029b8:	4650      	mov	r0, sl
 80029ba:	4303      	orrs	r3, r0
 80029bc:	2e00      	cmp	r6, #0
 80029be:	d000      	beq.n	80029c2 <__aeabi_dsub+0x426>
 80029c0:	e0a8      	b.n	8002b14 <__aeabi_dsub+0x578>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d100      	bne.n	80029c8 <__aeabi_dsub+0x42c>
 80029c6:	e0de      	b.n	8002b86 <__aeabi_dsub+0x5ea>
 80029c8:	000b      	movs	r3, r1
 80029ca:	4313      	orrs	r3, r2
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x434>
 80029ce:	e66b      	b.n	80026a8 <__aeabi_dsub+0x10c>
 80029d0:	4452      	add	r2, sl
 80029d2:	4552      	cmp	r2, sl
 80029d4:	4180      	sbcs	r0, r0
 80029d6:	1864      	adds	r4, r4, r1
 80029d8:	4240      	negs	r0, r0
 80029da:	1824      	adds	r4, r4, r0
 80029dc:	0017      	movs	r7, r2
 80029de:	0223      	lsls	r3, r4, #8
 80029e0:	d400      	bmi.n	80029e4 <__aeabi_dsub+0x448>
 80029e2:	e6fd      	b.n	80027e0 <__aeabi_dsub+0x244>
 80029e4:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <__aeabi_dsub+0x628>)
 80029e6:	4666      	mov	r6, ip
 80029e8:	401c      	ands	r4, r3
 80029ea:	e65d      	b.n	80026a8 <__aeabi_dsub+0x10c>
 80029ec:	0025      	movs	r5, r4
 80029ee:	4650      	mov	r0, sl
 80029f0:	4305      	orrs	r5, r0
 80029f2:	2e00      	cmp	r6, #0
 80029f4:	d1cf      	bne.n	8002996 <__aeabi_dsub+0x3fa>
 80029f6:	2d00      	cmp	r5, #0
 80029f8:	d14f      	bne.n	8002a9a <__aeabi_dsub+0x4fe>
 80029fa:	000c      	movs	r4, r1
 80029fc:	4314      	orrs	r4, r2
 80029fe:	d100      	bne.n	8002a02 <__aeabi_dsub+0x466>
 8002a00:	e0a0      	b.n	8002b44 <__aeabi_dsub+0x5a8>
 8002a02:	000c      	movs	r4, r1
 8002a04:	0017      	movs	r7, r2
 8002a06:	4698      	mov	r8, r3
 8002a08:	e64e      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002a0a:	4666      	mov	r6, ip
 8002a0c:	2400      	movs	r4, #0
 8002a0e:	2700      	movs	r7, #0
 8002a10:	e685      	b.n	800271e <__aeabi_dsub+0x182>
 8002a12:	001f      	movs	r7, r3
 8002a14:	0008      	movs	r0, r1
 8002a16:	3f20      	subs	r7, #32
 8002a18:	40f8      	lsrs	r0, r7
 8002a1a:	0007      	movs	r7, r0
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d100      	bne.n	8002a22 <__aeabi_dsub+0x486>
 8002a20:	e08e      	b.n	8002b40 <__aeabi_dsub+0x5a4>
 8002a22:	2040      	movs	r0, #64	; 0x40
 8002a24:	1ac3      	subs	r3, r0, r3
 8002a26:	4099      	lsls	r1, r3
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	1e51      	subs	r1, r2, #1
 8002a2c:	418a      	sbcs	r2, r1
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4317      	orrs	r7, r2
 8002a32:	e692      	b.n	800275a <__aeabi_dsub+0x1be>
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	d114      	bne.n	8002a62 <__aeabi_dsub+0x4c6>
 8002a38:	0026      	movs	r6, r4
 8002a3a:	4650      	mov	r0, sl
 8002a3c:	4306      	orrs	r6, r0
 8002a3e:	d062      	beq.n	8002b06 <__aeabi_dsub+0x56a>
 8002a40:	43db      	mvns	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d15c      	bne.n	8002b00 <__aeabi_dsub+0x564>
 8002a46:	1887      	adds	r7, r0, r2
 8002a48:	4297      	cmp	r7, r2
 8002a4a:	4192      	sbcs	r2, r2
 8002a4c:	1864      	adds	r4, r4, r1
 8002a4e:	4252      	negs	r2, r2
 8002a50:	18a4      	adds	r4, r4, r2
 8002a52:	4666      	mov	r6, ip
 8002a54:	e687      	b.n	8002766 <__aeabi_dsub+0x1ca>
 8002a56:	4650      	mov	r0, sl
 8002a58:	4320      	orrs	r0, r4
 8002a5a:	1e44      	subs	r4, r0, #1
 8002a5c:	41a0      	sbcs	r0, r4
 8002a5e:	2400      	movs	r4, #0
 8002a60:	e760      	b.n	8002924 <__aeabi_dsub+0x388>
 8002a62:	4e57      	ldr	r6, [pc, #348]	; (8002bc0 <__aeabi_dsub+0x624>)
 8002a64:	45b4      	cmp	ip, r6
 8002a66:	d04e      	beq.n	8002b06 <__aeabi_dsub+0x56a>
 8002a68:	2680      	movs	r6, #128	; 0x80
 8002a6a:	0436      	lsls	r6, r6, #16
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	4334      	orrs	r4, r6
 8002a70:	2b38      	cmp	r3, #56	; 0x38
 8002a72:	dd00      	ble.n	8002a76 <__aeabi_dsub+0x4da>
 8002a74:	e07f      	b.n	8002b76 <__aeabi_dsub+0x5da>
 8002a76:	2b1f      	cmp	r3, #31
 8002a78:	dd00      	ble.n	8002a7c <__aeabi_dsub+0x4e0>
 8002a7a:	e08b      	b.n	8002b94 <__aeabi_dsub+0x5f8>
 8002a7c:	2620      	movs	r6, #32
 8002a7e:	0027      	movs	r7, r4
 8002a80:	4650      	mov	r0, sl
 8002a82:	1af6      	subs	r6, r6, r3
 8002a84:	40b7      	lsls	r7, r6
 8002a86:	40d8      	lsrs	r0, r3
 8002a88:	4307      	orrs	r7, r0
 8002a8a:	4650      	mov	r0, sl
 8002a8c:	40b0      	lsls	r0, r6
 8002a8e:	1e46      	subs	r6, r0, #1
 8002a90:	41b0      	sbcs	r0, r6
 8002a92:	4307      	orrs	r7, r0
 8002a94:	40dc      	lsrs	r4, r3
 8002a96:	18bf      	adds	r7, r7, r2
 8002a98:	e7d6      	b.n	8002a48 <__aeabi_dsub+0x4ac>
 8002a9a:	000d      	movs	r5, r1
 8002a9c:	4315      	orrs	r5, r2
 8002a9e:	d100      	bne.n	8002aa2 <__aeabi_dsub+0x506>
 8002aa0:	e602      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002aa2:	4650      	mov	r0, sl
 8002aa4:	1a80      	subs	r0, r0, r2
 8002aa6:	4582      	cmp	sl, r0
 8002aa8:	41bf      	sbcs	r7, r7
 8002aaa:	1a65      	subs	r5, r4, r1
 8002aac:	427f      	negs	r7, r7
 8002aae:	1bed      	subs	r5, r5, r7
 8002ab0:	4684      	mov	ip, r0
 8002ab2:	0228      	lsls	r0, r5, #8
 8002ab4:	d400      	bmi.n	8002ab8 <__aeabi_dsub+0x51c>
 8002ab6:	e68d      	b.n	80027d4 <__aeabi_dsub+0x238>
 8002ab8:	4650      	mov	r0, sl
 8002aba:	1a17      	subs	r7, r2, r0
 8002abc:	42ba      	cmp	r2, r7
 8002abe:	4192      	sbcs	r2, r2
 8002ac0:	1b0c      	subs	r4, r1, r4
 8002ac2:	4252      	negs	r2, r2
 8002ac4:	1aa4      	subs	r4, r4, r2
 8002ac6:	4698      	mov	r8, r3
 8002ac8:	e5ee      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002aca:	000d      	movs	r5, r1
 8002acc:	4315      	orrs	r5, r2
 8002ace:	d100      	bne.n	8002ad2 <__aeabi_dsub+0x536>
 8002ad0:	e76b      	b.n	80029aa <__aeabi_dsub+0x40e>
 8002ad2:	4650      	mov	r0, sl
 8002ad4:	0767      	lsls	r7, r4, #29
 8002ad6:	08c0      	lsrs	r0, r0, #3
 8002ad8:	4307      	orrs	r7, r0
 8002ada:	2080      	movs	r0, #128	; 0x80
 8002adc:	08e4      	lsrs	r4, r4, #3
 8002ade:	0300      	lsls	r0, r0, #12
 8002ae0:	4204      	tst	r4, r0
 8002ae2:	d007      	beq.n	8002af4 <__aeabi_dsub+0x558>
 8002ae4:	08cd      	lsrs	r5, r1, #3
 8002ae6:	4205      	tst	r5, r0
 8002ae8:	d104      	bne.n	8002af4 <__aeabi_dsub+0x558>
 8002aea:	002c      	movs	r4, r5
 8002aec:	4698      	mov	r8, r3
 8002aee:	08d7      	lsrs	r7, r2, #3
 8002af0:	0749      	lsls	r1, r1, #29
 8002af2:	430f      	orrs	r7, r1
 8002af4:	0f7b      	lsrs	r3, r7, #29
 8002af6:	00e4      	lsls	r4, r4, #3
 8002af8:	431c      	orrs	r4, r3
 8002afa:	00ff      	lsls	r7, r7, #3
 8002afc:	4e30      	ldr	r6, [pc, #192]	; (8002bc0 <__aeabi_dsub+0x624>)
 8002afe:	e5d3      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002b00:	4e2f      	ldr	r6, [pc, #188]	; (8002bc0 <__aeabi_dsub+0x624>)
 8002b02:	45b4      	cmp	ip, r6
 8002b04:	d1b4      	bne.n	8002a70 <__aeabi_dsub+0x4d4>
 8002b06:	000c      	movs	r4, r1
 8002b08:	0017      	movs	r7, r2
 8002b0a:	4666      	mov	r6, ip
 8002b0c:	e5cc      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002b0e:	2700      	movs	r7, #0
 8002b10:	2400      	movs	r4, #0
 8002b12:	e5e8      	b.n	80026e6 <__aeabi_dsub+0x14a>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d039      	beq.n	8002b8c <__aeabi_dsub+0x5f0>
 8002b18:	000b      	movs	r3, r1
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	d100      	bne.n	8002b20 <__aeabi_dsub+0x584>
 8002b1e:	e744      	b.n	80029aa <__aeabi_dsub+0x40e>
 8002b20:	08c0      	lsrs	r0, r0, #3
 8002b22:	0767      	lsls	r7, r4, #29
 8002b24:	4307      	orrs	r7, r0
 8002b26:	2080      	movs	r0, #128	; 0x80
 8002b28:	08e4      	lsrs	r4, r4, #3
 8002b2a:	0300      	lsls	r0, r0, #12
 8002b2c:	4204      	tst	r4, r0
 8002b2e:	d0e1      	beq.n	8002af4 <__aeabi_dsub+0x558>
 8002b30:	08cb      	lsrs	r3, r1, #3
 8002b32:	4203      	tst	r3, r0
 8002b34:	d1de      	bne.n	8002af4 <__aeabi_dsub+0x558>
 8002b36:	08d7      	lsrs	r7, r2, #3
 8002b38:	0749      	lsls	r1, r1, #29
 8002b3a:	430f      	orrs	r7, r1
 8002b3c:	001c      	movs	r4, r3
 8002b3e:	e7d9      	b.n	8002af4 <__aeabi_dsub+0x558>
 8002b40:	2100      	movs	r1, #0
 8002b42:	e771      	b.n	8002a28 <__aeabi_dsub+0x48c>
 8002b44:	2500      	movs	r5, #0
 8002b46:	2700      	movs	r7, #0
 8002b48:	e5e9      	b.n	800271e <__aeabi_dsub+0x182>
 8002b4a:	002e      	movs	r6, r5
 8002b4c:	0027      	movs	r7, r4
 8002b4e:	3e20      	subs	r6, #32
 8002b50:	40f7      	lsrs	r7, r6
 8002b52:	2d20      	cmp	r5, #32
 8002b54:	d02f      	beq.n	8002bb6 <__aeabi_dsub+0x61a>
 8002b56:	2640      	movs	r6, #64	; 0x40
 8002b58:	1b75      	subs	r5, r6, r5
 8002b5a:	40ac      	lsls	r4, r5
 8002b5c:	4650      	mov	r0, sl
 8002b5e:	4320      	orrs	r0, r4
 8002b60:	1e44      	subs	r4, r0, #1
 8002b62:	41a0      	sbcs	r0, r4
 8002b64:	2400      	movs	r4, #0
 8002b66:	4338      	orrs	r0, r7
 8002b68:	e6dc      	b.n	8002924 <__aeabi_dsub+0x388>
 8002b6a:	2480      	movs	r4, #128	; 0x80
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	0324      	lsls	r4, r4, #12
 8002b70:	4e13      	ldr	r6, [pc, #76]	; (8002bc0 <__aeabi_dsub+0x624>)
 8002b72:	2700      	movs	r7, #0
 8002b74:	e5d3      	b.n	800271e <__aeabi_dsub+0x182>
 8002b76:	4650      	mov	r0, sl
 8002b78:	4320      	orrs	r0, r4
 8002b7a:	0007      	movs	r7, r0
 8002b7c:	1e78      	subs	r0, r7, #1
 8002b7e:	4187      	sbcs	r7, r0
 8002b80:	2400      	movs	r4, #0
 8002b82:	18bf      	adds	r7, r7, r2
 8002b84:	e760      	b.n	8002a48 <__aeabi_dsub+0x4ac>
 8002b86:	000c      	movs	r4, r1
 8002b88:	0017      	movs	r7, r2
 8002b8a:	e58d      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002b8c:	000c      	movs	r4, r1
 8002b8e:	0017      	movs	r7, r2
 8002b90:	4e0b      	ldr	r6, [pc, #44]	; (8002bc0 <__aeabi_dsub+0x624>)
 8002b92:	e589      	b.n	80026a8 <__aeabi_dsub+0x10c>
 8002b94:	001e      	movs	r6, r3
 8002b96:	0027      	movs	r7, r4
 8002b98:	3e20      	subs	r6, #32
 8002b9a:	40f7      	lsrs	r7, r6
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d00c      	beq.n	8002bba <__aeabi_dsub+0x61e>
 8002ba0:	2640      	movs	r6, #64	; 0x40
 8002ba2:	1af3      	subs	r3, r6, r3
 8002ba4:	409c      	lsls	r4, r3
 8002ba6:	4650      	mov	r0, sl
 8002ba8:	4320      	orrs	r0, r4
 8002baa:	1e44      	subs	r4, r0, #1
 8002bac:	41a0      	sbcs	r0, r4
 8002bae:	4307      	orrs	r7, r0
 8002bb0:	2400      	movs	r4, #0
 8002bb2:	18bf      	adds	r7, r7, r2
 8002bb4:	e748      	b.n	8002a48 <__aeabi_dsub+0x4ac>
 8002bb6:	2400      	movs	r4, #0
 8002bb8:	e7d0      	b.n	8002b5c <__aeabi_dsub+0x5c0>
 8002bba:	2400      	movs	r4, #0
 8002bbc:	e7f3      	b.n	8002ba6 <__aeabi_dsub+0x60a>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff

08002bc8 <__aeabi_d2iz>:
 8002bc8:	b530      	push	{r4, r5, lr}
 8002bca:	4d13      	ldr	r5, [pc, #76]	; (8002c18 <__aeabi_d2iz+0x50>)
 8002bcc:	030a      	lsls	r2, r1, #12
 8002bce:	004b      	lsls	r3, r1, #1
 8002bd0:	0b12      	lsrs	r2, r2, #12
 8002bd2:	0d5b      	lsrs	r3, r3, #21
 8002bd4:	0fc9      	lsrs	r1, r1, #31
 8002bd6:	2400      	movs	r4, #0
 8002bd8:	42ab      	cmp	r3, r5
 8002bda:	dd10      	ble.n	8002bfe <__aeabi_d2iz+0x36>
 8002bdc:	4c0f      	ldr	r4, [pc, #60]	; (8002c1c <__aeabi_d2iz+0x54>)
 8002bde:	42a3      	cmp	r3, r4
 8002be0:	dc0f      	bgt.n	8002c02 <__aeabi_d2iz+0x3a>
 8002be2:	2480      	movs	r4, #128	; 0x80
 8002be4:	4d0e      	ldr	r5, [pc, #56]	; (8002c20 <__aeabi_d2iz+0x58>)
 8002be6:	0364      	lsls	r4, r4, #13
 8002be8:	4322      	orrs	r2, r4
 8002bea:	1aed      	subs	r5, r5, r3
 8002bec:	2d1f      	cmp	r5, #31
 8002bee:	dd0b      	ble.n	8002c08 <__aeabi_d2iz+0x40>
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <__aeabi_d2iz+0x5c>)
 8002bf2:	1ac3      	subs	r3, r0, r3
 8002bf4:	40da      	lsrs	r2, r3
 8002bf6:	4254      	negs	r4, r2
 8002bf8:	2900      	cmp	r1, #0
 8002bfa:	d100      	bne.n	8002bfe <__aeabi_d2iz+0x36>
 8002bfc:	0014      	movs	r4, r2
 8002bfe:	0020      	movs	r0, r4
 8002c00:	bd30      	pop	{r4, r5, pc}
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <__aeabi_d2iz+0x60>)
 8002c04:	18cc      	adds	r4, r1, r3
 8002c06:	e7fa      	b.n	8002bfe <__aeabi_d2iz+0x36>
 8002c08:	4c08      	ldr	r4, [pc, #32]	; (8002c2c <__aeabi_d2iz+0x64>)
 8002c0a:	40e8      	lsrs	r0, r5
 8002c0c:	46a4      	mov	ip, r4
 8002c0e:	4463      	add	r3, ip
 8002c10:	409a      	lsls	r2, r3
 8002c12:	4302      	orrs	r2, r0
 8002c14:	e7ef      	b.n	8002bf6 <__aeabi_d2iz+0x2e>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	000003fe 	.word	0x000003fe
 8002c1c:	0000041d 	.word	0x0000041d
 8002c20:	00000433 	.word	0x00000433
 8002c24:	00000413 	.word	0x00000413
 8002c28:	7fffffff 	.word	0x7fffffff
 8002c2c:	fffffbed 	.word	0xfffffbed

08002c30 <__aeabi_i2d>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d030      	beq.n	8002c98 <__aeabi_i2d+0x68>
 8002c36:	17c3      	asrs	r3, r0, #31
 8002c38:	18c4      	adds	r4, r0, r3
 8002c3a:	405c      	eors	r4, r3
 8002c3c:	0fc5      	lsrs	r5, r0, #31
 8002c3e:	0020      	movs	r0, r4
 8002c40:	f000 f94c 	bl	8002edc <__clzsi2>
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <__aeabi_i2d+0x74>)
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <__aeabi_i2d+0x78>)
 8002c48:	1a1b      	subs	r3, r3, r0
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	2a1f      	cmp	r2, #31
 8002c4e:	dd18      	ble.n	8002c82 <__aeabi_i2d+0x52>
 8002c50:	4a16      	ldr	r2, [pc, #88]	; (8002cac <__aeabi_i2d+0x7c>)
 8002c52:	1ad2      	subs	r2, r2, r3
 8002c54:	4094      	lsls	r4, r2
 8002c56:	2200      	movs	r2, #0
 8002c58:	0324      	lsls	r4, r4, #12
 8002c5a:	055b      	lsls	r3, r3, #21
 8002c5c:	0b24      	lsrs	r4, r4, #12
 8002c5e:	0d5b      	lsrs	r3, r3, #21
 8002c60:	2100      	movs	r1, #0
 8002c62:	0010      	movs	r0, r2
 8002c64:	0324      	lsls	r4, r4, #12
 8002c66:	0d0a      	lsrs	r2, r1, #20
 8002c68:	0b24      	lsrs	r4, r4, #12
 8002c6a:	0512      	lsls	r2, r2, #20
 8002c6c:	4322      	orrs	r2, r4
 8002c6e:	4c10      	ldr	r4, [pc, #64]	; (8002cb0 <__aeabi_i2d+0x80>)
 8002c70:	051b      	lsls	r3, r3, #20
 8002c72:	4022      	ands	r2, r4
 8002c74:	4313      	orrs	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	07ed      	lsls	r5, r5, #31
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	432b      	orrs	r3, r5
 8002c7e:	0019      	movs	r1, r3
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
 8002c82:	0021      	movs	r1, r4
 8002c84:	4091      	lsls	r1, r2
 8002c86:	000a      	movs	r2, r1
 8002c88:	210b      	movs	r1, #11
 8002c8a:	1a08      	subs	r0, r1, r0
 8002c8c:	40c4      	lsrs	r4, r0
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	0324      	lsls	r4, r4, #12
 8002c92:	0b24      	lsrs	r4, r4, #12
 8002c94:	0d5b      	lsrs	r3, r3, #21
 8002c96:	e7e3      	b.n	8002c60 <__aeabi_i2d+0x30>
 8002c98:	2500      	movs	r5, #0
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2400      	movs	r4, #0
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	e7de      	b.n	8002c60 <__aeabi_i2d+0x30>
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	0000041e 	.word	0x0000041e
 8002ca8:	00000433 	.word	0x00000433
 8002cac:	00000413 	.word	0x00000413
 8002cb0:	800fffff 	.word	0x800fffff

08002cb4 <__aeabi_ui2d>:
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	1e04      	subs	r4, r0, #0
 8002cb8:	d028      	beq.n	8002d0c <__aeabi_ui2d+0x58>
 8002cba:	f000 f90f 	bl	8002edc <__clzsi2>
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <__aeabi_ui2d+0x60>)
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <__aeabi_ui2d+0x64>)
 8002cc2:	1a1b      	subs	r3, r3, r0
 8002cc4:	1ad2      	subs	r2, r2, r3
 8002cc6:	2a1f      	cmp	r2, #31
 8002cc8:	dd15      	ble.n	8002cf6 <__aeabi_ui2d+0x42>
 8002cca:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <__aeabi_ui2d+0x68>)
 8002ccc:	1ad2      	subs	r2, r2, r3
 8002cce:	4094      	lsls	r4, r2
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	0324      	lsls	r4, r4, #12
 8002cd4:	055b      	lsls	r3, r3, #21
 8002cd6:	0b24      	lsrs	r4, r4, #12
 8002cd8:	0d5b      	lsrs	r3, r3, #21
 8002cda:	2100      	movs	r1, #0
 8002cdc:	0010      	movs	r0, r2
 8002cde:	0324      	lsls	r4, r4, #12
 8002ce0:	0d0a      	lsrs	r2, r1, #20
 8002ce2:	0b24      	lsrs	r4, r4, #12
 8002ce4:	0512      	lsls	r2, r2, #20
 8002ce6:	4322      	orrs	r2, r4
 8002ce8:	4c0d      	ldr	r4, [pc, #52]	; (8002d20 <__aeabi_ui2d+0x6c>)
 8002cea:	051b      	lsls	r3, r3, #20
 8002cec:	4022      	ands	r2, r4
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	0859      	lsrs	r1, r3, #1
 8002cf4:	bd10      	pop	{r4, pc}
 8002cf6:	0021      	movs	r1, r4
 8002cf8:	4091      	lsls	r1, r2
 8002cfa:	000a      	movs	r2, r1
 8002cfc:	210b      	movs	r1, #11
 8002cfe:	1a08      	subs	r0, r1, r0
 8002d00:	40c4      	lsrs	r4, r0
 8002d02:	055b      	lsls	r3, r3, #21
 8002d04:	0324      	lsls	r4, r4, #12
 8002d06:	0b24      	lsrs	r4, r4, #12
 8002d08:	0d5b      	lsrs	r3, r3, #21
 8002d0a:	e7e6      	b.n	8002cda <__aeabi_ui2d+0x26>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	2400      	movs	r4, #0
 8002d10:	2200      	movs	r2, #0
 8002d12:	e7e2      	b.n	8002cda <__aeabi_ui2d+0x26>
 8002d14:	0000041e 	.word	0x0000041e
 8002d18:	00000433 	.word	0x00000433
 8002d1c:	00000413 	.word	0x00000413
 8002d20:	800fffff 	.word	0x800fffff

08002d24 <__aeabi_f2d>:
 8002d24:	0041      	lsls	r1, r0, #1
 8002d26:	0e09      	lsrs	r1, r1, #24
 8002d28:	1c4b      	adds	r3, r1, #1
 8002d2a:	b570      	push	{r4, r5, r6, lr}
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	0246      	lsls	r6, r0, #9
 8002d30:	0a75      	lsrs	r5, r6, #9
 8002d32:	0fc4      	lsrs	r4, r0, #31
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	dd14      	ble.n	8002d62 <__aeabi_f2d+0x3e>
 8002d38:	23e0      	movs	r3, #224	; 0xe0
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	076d      	lsls	r5, r5, #29
 8002d3e:	0b36      	lsrs	r6, r6, #12
 8002d40:	18cb      	adds	r3, r1, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	0d0a      	lsrs	r2, r1, #20
 8002d46:	0028      	movs	r0, r5
 8002d48:	0512      	lsls	r2, r2, #20
 8002d4a:	4d1c      	ldr	r5, [pc, #112]	; (8002dbc <__aeabi_f2d+0x98>)
 8002d4c:	4332      	orrs	r2, r6
 8002d4e:	055b      	lsls	r3, r3, #21
 8002d50:	402a      	ands	r2, r5
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	4313      	orrs	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	07e4      	lsls	r4, r4, #31
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	4323      	orrs	r3, r4
 8002d5e:	0019      	movs	r1, r3
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
 8002d62:	2900      	cmp	r1, #0
 8002d64:	d114      	bne.n	8002d90 <__aeabi_f2d+0x6c>
 8002d66:	2d00      	cmp	r5, #0
 8002d68:	d01e      	beq.n	8002da8 <__aeabi_f2d+0x84>
 8002d6a:	0028      	movs	r0, r5
 8002d6c:	f000 f8b6 	bl	8002edc <__clzsi2>
 8002d70:	280a      	cmp	r0, #10
 8002d72:	dc1c      	bgt.n	8002dae <__aeabi_f2d+0x8a>
 8002d74:	230b      	movs	r3, #11
 8002d76:	002a      	movs	r2, r5
 8002d78:	1a1b      	subs	r3, r3, r0
 8002d7a:	40da      	lsrs	r2, r3
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	3315      	adds	r3, #21
 8002d80:	409d      	lsls	r5, r3
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <__aeabi_f2d+0x9c>)
 8002d84:	0312      	lsls	r2, r2, #12
 8002d86:	1a1b      	subs	r3, r3, r0
 8002d88:	055b      	lsls	r3, r3, #21
 8002d8a:	0b16      	lsrs	r6, r2, #12
 8002d8c:	0d5b      	lsrs	r3, r3, #21
 8002d8e:	e7d8      	b.n	8002d42 <__aeabi_f2d+0x1e>
 8002d90:	2d00      	cmp	r5, #0
 8002d92:	d006      	beq.n	8002da2 <__aeabi_f2d+0x7e>
 8002d94:	0b32      	lsrs	r2, r6, #12
 8002d96:	2680      	movs	r6, #128	; 0x80
 8002d98:	0336      	lsls	r6, r6, #12
 8002d9a:	076d      	lsls	r5, r5, #29
 8002d9c:	4316      	orrs	r6, r2
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <__aeabi_f2d+0xa0>)
 8002da0:	e7cf      	b.n	8002d42 <__aeabi_f2d+0x1e>
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <__aeabi_f2d+0xa0>)
 8002da4:	2600      	movs	r6, #0
 8002da6:	e7cc      	b.n	8002d42 <__aeabi_f2d+0x1e>
 8002da8:	2300      	movs	r3, #0
 8002daa:	2600      	movs	r6, #0
 8002dac:	e7c9      	b.n	8002d42 <__aeabi_f2d+0x1e>
 8002dae:	0003      	movs	r3, r0
 8002db0:	002a      	movs	r2, r5
 8002db2:	3b0b      	subs	r3, #11
 8002db4:	409a      	lsls	r2, r3
 8002db6:	2500      	movs	r5, #0
 8002db8:	e7e3      	b.n	8002d82 <__aeabi_f2d+0x5e>
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	800fffff 	.word	0x800fffff
 8002dc0:	00000389 	.word	0x00000389
 8002dc4:	000007ff 	.word	0x000007ff

08002dc8 <__aeabi_d2f>:
 8002dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dca:	004c      	lsls	r4, r1, #1
 8002dcc:	0d64      	lsrs	r4, r4, #21
 8002dce:	030b      	lsls	r3, r1, #12
 8002dd0:	1c62      	adds	r2, r4, #1
 8002dd2:	0f45      	lsrs	r5, r0, #29
 8002dd4:	0a5b      	lsrs	r3, r3, #9
 8002dd6:	0552      	lsls	r2, r2, #21
 8002dd8:	432b      	orrs	r3, r5
 8002dda:	0fc9      	lsrs	r1, r1, #31
 8002ddc:	00c5      	lsls	r5, r0, #3
 8002dde:	0d52      	lsrs	r2, r2, #21
 8002de0:	2a01      	cmp	r2, #1
 8002de2:	dd28      	ble.n	8002e36 <__aeabi_d2f+0x6e>
 8002de4:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <__aeabi_d2f+0x108>)
 8002de6:	18a6      	adds	r6, r4, r2
 8002de8:	2efe      	cmp	r6, #254	; 0xfe
 8002dea:	dc1b      	bgt.n	8002e24 <__aeabi_d2f+0x5c>
 8002dec:	2e00      	cmp	r6, #0
 8002dee:	dd3e      	ble.n	8002e6e <__aeabi_d2f+0xa6>
 8002df0:	0180      	lsls	r0, r0, #6
 8002df2:	0002      	movs	r2, r0
 8002df4:	1e50      	subs	r0, r2, #1
 8002df6:	4182      	sbcs	r2, r0
 8002df8:	0f6d      	lsrs	r5, r5, #29
 8002dfa:	432a      	orrs	r2, r5
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	075a      	lsls	r2, r3, #29
 8002e02:	d004      	beq.n	8002e0e <__aeabi_d2f+0x46>
 8002e04:	220f      	movs	r2, #15
 8002e06:	401a      	ands	r2, r3
 8002e08:	2a04      	cmp	r2, #4
 8002e0a:	d000      	beq.n	8002e0e <__aeabi_d2f+0x46>
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	04d2      	lsls	r2, r2, #19
 8002e12:	401a      	ands	r2, r3
 8002e14:	d05a      	beq.n	8002ecc <__aeabi_d2f+0x104>
 8002e16:	3601      	adds	r6, #1
 8002e18:	2eff      	cmp	r6, #255	; 0xff
 8002e1a:	d003      	beq.n	8002e24 <__aeabi_d2f+0x5c>
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	0a5b      	lsrs	r3, r3, #9
 8002e20:	b2f4      	uxtb	r4, r6
 8002e22:	e001      	b.n	8002e28 <__aeabi_d2f+0x60>
 8002e24:	24ff      	movs	r4, #255	; 0xff
 8002e26:	2300      	movs	r3, #0
 8002e28:	0258      	lsls	r0, r3, #9
 8002e2a:	05e4      	lsls	r4, r4, #23
 8002e2c:	0a40      	lsrs	r0, r0, #9
 8002e2e:	07c9      	lsls	r1, r1, #31
 8002e30:	4320      	orrs	r0, r4
 8002e32:	4308      	orrs	r0, r1
 8002e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e36:	2c00      	cmp	r4, #0
 8002e38:	d007      	beq.n	8002e4a <__aeabi_d2f+0x82>
 8002e3a:	431d      	orrs	r5, r3
 8002e3c:	d0f2      	beq.n	8002e24 <__aeabi_d2f+0x5c>
 8002e3e:	2080      	movs	r0, #128	; 0x80
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	0480      	lsls	r0, r0, #18
 8002e44:	4303      	orrs	r3, r0
 8002e46:	26ff      	movs	r6, #255	; 0xff
 8002e48:	e7da      	b.n	8002e00 <__aeabi_d2f+0x38>
 8002e4a:	432b      	orrs	r3, r5
 8002e4c:	d003      	beq.n	8002e56 <__aeabi_d2f+0x8e>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	08db      	lsrs	r3, r3, #3
 8002e52:	2cff      	cmp	r4, #255	; 0xff
 8002e54:	d003      	beq.n	8002e5e <__aeabi_d2f+0x96>
 8002e56:	025b      	lsls	r3, r3, #9
 8002e58:	0a5b      	lsrs	r3, r3, #9
 8002e5a:	b2e4      	uxtb	r4, r4
 8002e5c:	e7e4      	b.n	8002e28 <__aeabi_d2f+0x60>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d032      	beq.n	8002ec8 <__aeabi_d2f+0x100>
 8002e62:	2080      	movs	r0, #128	; 0x80
 8002e64:	03c0      	lsls	r0, r0, #15
 8002e66:	4303      	orrs	r3, r0
 8002e68:	025b      	lsls	r3, r3, #9
 8002e6a:	0a5b      	lsrs	r3, r3, #9
 8002e6c:	e7dc      	b.n	8002e28 <__aeabi_d2f+0x60>
 8002e6e:	0032      	movs	r2, r6
 8002e70:	3217      	adds	r2, #23
 8002e72:	db14      	blt.n	8002e9e <__aeabi_d2f+0xd6>
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	271e      	movs	r7, #30
 8002e78:	0412      	lsls	r2, r2, #16
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	1bbf      	subs	r7, r7, r6
 8002e7e:	2f1f      	cmp	r7, #31
 8002e80:	dc0f      	bgt.n	8002ea2 <__aeabi_d2f+0xda>
 8002e82:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <__aeabi_d2f+0x10c>)
 8002e84:	4694      	mov	ip, r2
 8002e86:	4464      	add	r4, ip
 8002e88:	002a      	movs	r2, r5
 8002e8a:	40a5      	lsls	r5, r4
 8002e8c:	002e      	movs	r6, r5
 8002e8e:	40a3      	lsls	r3, r4
 8002e90:	1e75      	subs	r5, r6, #1
 8002e92:	41ae      	sbcs	r6, r5
 8002e94:	40fa      	lsrs	r2, r7
 8002e96:	4333      	orrs	r3, r6
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	e7b0      	b.n	8002e00 <__aeabi_d2f+0x38>
 8002e9e:	2400      	movs	r4, #0
 8002ea0:	e7d5      	b.n	8002e4e <__aeabi_d2f+0x86>
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4252      	negs	r2, r2
 8002ea6:	1b96      	subs	r6, r2, r6
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	40f2      	lsrs	r2, r6
 8002eac:	2f20      	cmp	r7, #32
 8002eae:	d009      	beq.n	8002ec4 <__aeabi_d2f+0xfc>
 8002eb0:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <__aeabi_d2f+0x110>)
 8002eb2:	4684      	mov	ip, r0
 8002eb4:	4464      	add	r4, ip
 8002eb6:	40a3      	lsls	r3, r4
 8002eb8:	432b      	orrs	r3, r5
 8002eba:	1e5d      	subs	r5, r3, #1
 8002ebc:	41ab      	sbcs	r3, r5
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	e79d      	b.n	8002e00 <__aeabi_d2f+0x38>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e7f7      	b.n	8002eb8 <__aeabi_d2f+0xf0>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e7ad      	b.n	8002e28 <__aeabi_d2f+0x60>
 8002ecc:	0034      	movs	r4, r6
 8002ece:	e7bf      	b.n	8002e50 <__aeabi_d2f+0x88>
 8002ed0:	fffffc80 	.word	0xfffffc80
 8002ed4:	fffffc82 	.word	0xfffffc82
 8002ed8:	fffffca2 	.word	0xfffffca2

08002edc <__clzsi2>:
 8002edc:	211c      	movs	r1, #28
 8002ede:	2301      	movs	r3, #1
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	4298      	cmp	r0, r3
 8002ee4:	d301      	bcc.n	8002eea <__clzsi2+0xe>
 8002ee6:	0c00      	lsrs	r0, r0, #16
 8002ee8:	3910      	subs	r1, #16
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	4298      	cmp	r0, r3
 8002eee:	d301      	bcc.n	8002ef4 <__clzsi2+0x18>
 8002ef0:	0a00      	lsrs	r0, r0, #8
 8002ef2:	3908      	subs	r1, #8
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	4298      	cmp	r0, r3
 8002ef8:	d301      	bcc.n	8002efe <__clzsi2+0x22>
 8002efa:	0900      	lsrs	r0, r0, #4
 8002efc:	3904      	subs	r1, #4
 8002efe:	a202      	add	r2, pc, #8	; (adr r2, 8002f08 <__clzsi2+0x2c>)
 8002f00:	5c10      	ldrb	r0, [r2, r0]
 8002f02:	1840      	adds	r0, r0, r1
 8002f04:	4770      	bx	lr
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	02020304 	.word	0x02020304
 8002f0c:	01010101 	.word	0x01010101
	...

08002f18 <__clzdi2>:
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	d103      	bne.n	8002f26 <__clzdi2+0xe>
 8002f1e:	f7ff ffdd 	bl	8002edc <__clzsi2>
 8002f22:	3020      	adds	r0, #32
 8002f24:	e002      	b.n	8002f2c <__clzdi2+0x14>
 8002f26:	1c08      	adds	r0, r1, #0
 8002f28:	f7ff ffd8 	bl	8002edc <__clzsi2>
 8002f2c:	bd10      	pop	{r4, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)

08002f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f34:	20fa      	movs	r0, #250	; 0xfa
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <HAL_InitTick+0x3c>)
 8002f38:	0080      	lsls	r0, r0, #2
 8002f3a:	7819      	ldrb	r1, [r3, #0]
 8002f3c:	f7fd f90a 	bl	8000154 <__udivsi3>
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_InitTick+0x40>)
 8002f42:	0001      	movs	r1, r0
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	f7fd f905 	bl	8000154 <__udivsi3>
 8002f4a:	f000 fbd1 	bl	80036f0 <HAL_SYSTICK_Config>
 8002f4e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002f50:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f52:	2c00      	cmp	r4, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f56:	2d03      	cmp	r5, #3
 8002f58:	d807      	bhi.n	8002f6a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5a:	3802      	subs	r0, #2
 8002f5c:	0022      	movs	r2, r4
 8002f5e:	0029      	movs	r1, r5
 8002f60:	f000 fb8c 	bl	800367c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f64:	0020      	movs	r0, r4
 8002f66:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_InitTick+0x44>)
 8002f68:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	2000005c 	.word	0x2000005c
 8002f74:	20000004 	.word	0x20000004

08002f78 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f78:	2340      	movs	r3, #64	; 0x40
 8002f7a:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <HAL_Init+0x24>)
{
 8002f7c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f7e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f80:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002f82:	430b      	orrs	r3, r1
 8002f84:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f86:	f7ff ffd3 	bl	8002f30 <HAL_InitTick>
 8002f8a:	1e04      	subs	r4, r0, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_Init+0x1e>
    HAL_MspInit();
 8002f8e:	f003 fd9d 	bl	8006acc <HAL_MspInit>
}
 8002f92:	0020      	movs	r0, r4
 8002f94:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002f96:	2401      	movs	r4, #1
 8002f98:	e7fb      	b.n	8002f92 <HAL_Init+0x1a>
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_IncTick+0x10>)
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <HAL_IncTick+0x14>)
 8002fa4:	6811      	ldr	r1, [r2, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	185b      	adds	r3, r3, r1
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	4770      	bx	lr
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000358 	.word	0x20000358
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002fb8:	4b01      	ldr	r3, [pc, #4]	; (8002fc0 <HAL_GetTick+0x8>)
 8002fba:	6818      	ldr	r0, [r3, #0]
}
 8002fbc:	4770      	bx	lr
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	20000358 	.word	0x20000358

08002fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff fff6 	bl	8002fb8 <HAL_GetTick>
 8002fcc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fce:	1c63      	adds	r3, r4, #1
 8002fd0:	d002      	beq.n	8002fd8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_Delay+0x20>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fd8:	f7ff ffee 	bl	8002fb8 <HAL_GetTick>
 8002fdc:	1b40      	subs	r0, r0, r5
 8002fde:	4284      	cmp	r4, r0
 8002fe0:	d8fa      	bhi.n	8002fd8 <HAL_Delay+0x14>
  {
  }
}
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	20000000 	.word	0x20000000

08002fe8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4a02      	ldr	r2, [pc, #8]	; (8002ff4 <HAL_SuspendTick+0xc>)
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	438b      	bics	r3, r1
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e010 	.word	0xe000e010

08002ff8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	4a02      	ldr	r2, [pc, #8]	; (8003004 <HAL_ResumeTick+0xc>)
 8002ffc:	6811      	ldr	r1, [r2, #0]
 8002ffe:	430b      	orrs	r3, r1
 8003000:	6013      	str	r3, [r2, #0]
}
 8003002:	4770      	bx	lr
 8003004:	e000e010 	.word	0xe000e010

08003008 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <ADC_DelayMicroSecond+0x24>)
{
 800300a:	b513      	push	{r0, r1, r4, lr}
 800300c:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800300e:	4908      	ldr	r1, [pc, #32]	; (8003030 <ADC_DelayMicroSecond+0x28>)
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	f7fd f89f 	bl	8000154 <__udivsi3>
 8003016:	4344      	muls	r4, r0
 8003018:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800301a:	9b01      	ldr	r3, [sp, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d100      	bne.n	8003022 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8003020:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8003022:	9b01      	ldr	r3, [sp, #4]
 8003024:	3b01      	subs	r3, #1
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	e7f7      	b.n	800301a <ADC_DelayMicroSecond+0x12>
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	2000005c 	.word	0x2000005c
 8003030:	000f4240 	.word	0x000f4240

08003034 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003034:	2103      	movs	r1, #3
 8003036:	6803      	ldr	r3, [r0, #0]
{
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800303c:	6898      	ldr	r0, [r3, #8]
 800303e:	4008      	ands	r0, r1
 8003040:	2801      	cmp	r0, #1
 8003042:	d001      	beq.n	8003048 <ADC_Disable+0x14>
  return HAL_OK;
 8003044:	2000      	movs	r0, #0
}
 8003046:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4202      	tst	r2, r0
 800304c:	d0fa      	beq.n	8003044 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800304e:	2205      	movs	r2, #5
 8003050:	689d      	ldr	r5, [r3, #8]
 8003052:	4015      	ands	r5, r2
 8003054:	2d01      	cmp	r5, #1
 8003056:	d119      	bne.n	800308c <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8003058:	2202      	movs	r2, #2
 800305a:	6898      	ldr	r0, [r3, #8]
 800305c:	4302      	orrs	r2, r0
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003062:	f7ff ffa9 	bl	8002fb8 <HAL_GetTick>
 8003066:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	422b      	tst	r3, r5
 800306e:	d0e9      	beq.n	8003044 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003070:	f7ff ffa2 	bl	8002fb8 <HAL_GetTick>
 8003074:	1b80      	subs	r0, r0, r6
 8003076:	280a      	cmp	r0, #10
 8003078:	d9f6      	bls.n	8003068 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	2310      	movs	r3, #16
 800307c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800307e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	4313      	orrs	r3, r2
 8003082:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003086:	431d      	orrs	r5, r3
 8003088:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800308a:	e7dc      	b.n	8003046 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308c:	2310      	movs	r3, #16
 800308e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003090:	4313      	orrs	r3, r2
 8003092:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003096:	4303      	orrs	r3, r0
 8003098:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800309a:	e7d4      	b.n	8003046 <ADC_Disable+0x12>

0800309c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800309c:	2103      	movs	r1, #3
 800309e:	6803      	ldr	r3, [r0, #0]
{
 80030a0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030a2:	689a      	ldr	r2, [r3, #8]
{
 80030a4:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030a6:	400a      	ands	r2, r1
 80030a8:	2a01      	cmp	r2, #1
 80030aa:	d10d      	bne.n	80030c8 <ADC_Enable+0x2c>
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	4211      	tst	r1, r2
 80030b0:	d00a      	beq.n	80030c8 <ADC_Enable+0x2c>
  return HAL_OK;
 80030b2:	2000      	movs	r0, #0
}
 80030b4:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80030bc:	4313      	orrs	r3, r2
 80030be:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030c2:	4303      	orrs	r3, r0
 80030c4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80030c6:	e7f5      	b.n	80030b4 <ADC_Enable+0x18>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80030c8:	6899      	ldr	r1, [r3, #8]
 80030ca:	4a0f      	ldr	r2, [pc, #60]	; (8003108 <ADC_Enable+0x6c>)
 80030cc:	4211      	tst	r1, r2
 80030ce:	d1f2      	bne.n	80030b6 <ADC_Enable+0x1a>
    __HAL_ADC_ENABLE(hadc);
 80030d0:	2501      	movs	r5, #1
 80030d2:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80030d4:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80030d6:	432a      	orrs	r2, r5
 80030d8:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80030da:	f7ff ff95 	bl	8003008 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80030de:	f7ff ff6b 	bl	8002fb8 <HAL_GetTick>
 80030e2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	422b      	tst	r3, r5
 80030ea:	d1e2      	bne.n	80030b2 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ec:	f7ff ff64 	bl	8002fb8 <HAL_GetTick>
 80030f0:	1b80      	subs	r0, r0, r6
 80030f2:	280a      	cmp	r0, #10
 80030f4:	d9f6      	bls.n	80030e4 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	2310      	movs	r3, #16
 80030f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 80030fa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fc:	4313      	orrs	r3, r2
 80030fe:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003100:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003102:	431d      	orrs	r5, r3
 8003104:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8003106:	e7d5      	b.n	80030b4 <ADC_Enable+0x18>
 8003108:	80000017 	.word	0x80000017

0800310c <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800310c:	2204      	movs	r2, #4
 800310e:	6803      	ldr	r3, [r0, #0]
{
 8003110:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003112:	6899      	ldr	r1, [r3, #8]
{
 8003114:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003116:	4211      	tst	r1, r2
 8003118:	d101      	bne.n	800311e <ADC_ConversionStop+0x12>
  return HAL_OK;
 800311a:	2000      	movs	r0, #0
}
 800311c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800311e:	6899      	ldr	r1, [r3, #8]
 8003120:	4211      	tst	r1, r2
 8003122:	d006      	beq.n	8003132 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003124:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003126:	0792      	lsls	r2, r2, #30
 8003128:	d403      	bmi.n	8003132 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800312a:	2210      	movs	r2, #16
 800312c:	6899      	ldr	r1, [r3, #8]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003132:	f7ff ff41 	bl	8002fb8 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003136:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8003138:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	422b      	tst	r3, r5
 8003140:	d0eb      	beq.n	800311a <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003142:	f7ff ff39 	bl	8002fb8 <HAL_GetTick>
 8003146:	1b80      	subs	r0, r0, r6
 8003148:	280a      	cmp	r0, #10
 800314a:	d9f6      	bls.n	800313a <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314c:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003150:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003152:	4313      	orrs	r3, r2
 8003154:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003158:	4303      	orrs	r3, r0
 800315a:	65a3      	str	r3, [r4, #88]	; 0x58
 800315c:	e7de      	b.n	800311c <ADC_ConversionStop+0x10>
	...

08003160 <HAL_ADC_Init>:
{
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003164:	2001      	movs	r0, #1
  if(hadc == NULL)
 8003166:	2c00      	cmp	r4, #0
 8003168:	d019      	beq.n	800319e <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800316a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8003170:	0022      	movs	r2, r4
 8003172:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8003174:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8003176:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003178:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800317a:	f003 fcb5 	bl	8006ae8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800317e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003180:	06db      	lsls	r3, r3, #27
 8003182:	d404      	bmi.n	800318e <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003184:	2204      	movs	r2, #4
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	6898      	ldr	r0, [r3, #8]
 800318a:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800318c:	d008      	beq.n	80031a0 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318e:	2310      	movs	r3, #16
 8003190:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003192:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	4313      	orrs	r3, r2
 8003196:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003198:	2300      	movs	r3, #0
 800319a:	3450      	adds	r4, #80	; 0x50
 800319c:	7023      	strb	r3, [r4, #0]
}
 800319e:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80031a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80031a2:	4955      	ldr	r1, [pc, #340]	; (80032f8 <HAL_ADC_Init+0x198>)
 80031a4:	4011      	ands	r1, r2
 80031a6:	2202      	movs	r2, #2
 80031a8:	430a      	orrs	r2, r1
 80031aa:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031ac:	2203      	movs	r2, #3
 80031ae:	6899      	ldr	r1, [r3, #8]
 80031b0:	4011      	ands	r1, r2
 80031b2:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_ADC_Init+0x19c>)
 80031b4:	2901      	cmp	r1, #1
 80031b6:	d102      	bne.n	80031be <HAL_ADC_Init+0x5e>
 80031b8:	681d      	ldr	r5, [r3, #0]
 80031ba:	420d      	tst	r5, r1
 80031bc:	d119      	bne.n	80031f2 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80031be:	2680      	movs	r6, #128	; 0x80
 80031c0:	6865      	ldr	r5, [r4, #4]
 80031c2:	05f6      	lsls	r6, r6, #23
 80031c4:	0069      	lsls	r1, r5, #1
 80031c6:	0849      	lsrs	r1, r1, #1
 80031c8:	42b1      	cmp	r1, r6
 80031ca:	d003      	beq.n	80031d4 <HAL_ADC_Init+0x74>
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	0609      	lsls	r1, r1, #24
 80031d0:	428d      	cmp	r5, r1
 80031d2:	d176      	bne.n	80032c2 <HAL_ADC_Init+0x162>
 80031d4:	6919      	ldr	r1, [r3, #16]
 80031d6:	0089      	lsls	r1, r1, #2
 80031d8:	0889      	lsrs	r1, r1, #2
 80031da:	6119      	str	r1, [r3, #16]
 80031dc:	6919      	ldr	r1, [r3, #16]
 80031de:	430d      	orrs	r5, r1
 80031e0:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80031e2:	2518      	movs	r5, #24
 80031e4:	68d9      	ldr	r1, [r3, #12]
 80031e6:	43a9      	bics	r1, r5
 80031e8:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80031ea:	68d9      	ldr	r1, [r3, #12]
 80031ec:	68a5      	ldr	r5, [r4, #8]
 80031ee:	4329      	orrs	r1, r5
 80031f0:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80031f2:	6811      	ldr	r1, [r2, #0]
 80031f4:	4d42      	ldr	r5, [pc, #264]	; (8003300 <HAL_ADC_Init+0x1a0>)
 80031f6:	4029      	ands	r1, r5
 80031f8:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80031fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031fc:	6815      	ldr	r5, [r2, #0]
 80031fe:	0649      	lsls	r1, r1, #25
 8003200:	4329      	orrs	r1, r5
 8003202:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	0552      	lsls	r2, r2, #21
 800320a:	4211      	tst	r1, r2
 800320c:	d102      	bne.n	8003214 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800320e:	6899      	ldr	r1, [r3, #8]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	493b      	ldr	r1, [pc, #236]	; (8003304 <HAL_ADC_Init+0x1a4>)
 8003218:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800321a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800321c:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800321e:	68dd      	ldr	r5, [r3, #12]
 8003220:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003222:	2902      	cmp	r1, #2
 8003224:	d100      	bne.n	8003228 <HAL_ADC_Init+0xc8>
 8003226:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003228:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800322a:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800322c:	4332      	orrs	r2, r6
 800322e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003230:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003232:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003234:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003236:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003238:	69e5      	ldr	r5, [r4, #28]
 800323a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800323c:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800323e:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003240:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003242:	0025      	movs	r5, r4
 8003244:	352c      	adds	r5, #44	; 0x2c
 8003246:	782d      	ldrb	r5, [r5, #0]
 8003248:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800324a:	432a      	orrs	r2, r5
 800324c:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800324e:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003250:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003252:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003254:	30ff      	adds	r0, #255	; 0xff
 8003256:	4282      	cmp	r2, r0
 8003258:	d004      	beq.n	8003264 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800325a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800325c:	68d8      	ldr	r0, [r3, #12]
 800325e:	432a      	orrs	r2, r5
 8003260:	4302      	orrs	r2, r0
 8003262:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003264:	1ca2      	adds	r2, r4, #2
 8003266:	7fd2      	ldrb	r2, [r2, #31]
 8003268:	2a01      	cmp	r2, #1
 800326a:	d106      	bne.n	800327a <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800326c:	2900      	cmp	r1, #0
 800326e:	d134      	bne.n	80032da <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	68d9      	ldr	r1, [r3, #12]
 8003274:	0252      	lsls	r2, r2, #9
 8003276:	430a      	orrs	r2, r1
 8003278:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800327a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800327c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800327e:	2901      	cmp	r1, #1
 8003280:	d133      	bne.n	80032ea <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003282:	4821      	ldr	r0, [pc, #132]	; (8003308 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003284:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003286:	4002      	ands	r2, r0
 8003288:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800328a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800328c:	6918      	ldr	r0, [r3, #16]
 800328e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8003290:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003292:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003294:	4302      	orrs	r2, r0
 8003296:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	4311      	orrs	r1, r2
 800329c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800329e:	2107      	movs	r1, #7
 80032a0:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80032a2:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80032a4:	438a      	bics	r2, r1
 80032a6:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80032ac:	430a      	orrs	r2, r1
 80032ae:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80032b0:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80032b2:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80032b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032b6:	4393      	bics	r3, r2
 80032b8:	001a      	movs	r2, r3
 80032ba:	2301      	movs	r3, #1
 80032bc:	4313      	orrs	r3, r2
 80032be:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80032c0:	e76d      	b.n	800319e <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80032c2:	6919      	ldr	r1, [r3, #16]
 80032c4:	4e11      	ldr	r6, [pc, #68]	; (800330c <HAL_ADC_Init+0x1ac>)
 80032c6:	0089      	lsls	r1, r1, #2
 80032c8:	0889      	lsrs	r1, r1, #2
 80032ca:	6119      	str	r1, [r3, #16]
 80032cc:	6811      	ldr	r1, [r2, #0]
 80032ce:	4031      	ands	r1, r6
 80032d0:	6011      	str	r1, [r2, #0]
 80032d2:	6811      	ldr	r1, [r2, #0]
 80032d4:	430d      	orrs	r5, r1
 80032d6:	6015      	str	r5, [r2, #0]
 80032d8:	e783      	b.n	80031e2 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032da:	2120      	movs	r1, #32
 80032dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032de:	4301      	orrs	r1, r0
 80032e0:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80032e4:	430a      	orrs	r2, r1
 80032e6:	65a2      	str	r2, [r4, #88]	; 0x58
 80032e8:	e7c7      	b.n	800327a <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80032ea:	2101      	movs	r1, #1
 80032ec:	420a      	tst	r2, r1
 80032ee:	d0d6      	beq.n	800329e <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	438a      	bics	r2, r1
 80032f4:	611a      	str	r2, [r3, #16]
 80032f6:	e7d2      	b.n	800329e <HAL_ADC_Init+0x13e>
 80032f8:	fffffefd 	.word	0xfffffefd
 80032fc:	40012708 	.word	0x40012708
 8003300:	fdffffff 	.word	0xfdffffff
 8003304:	fffe0219 	.word	0xfffe0219
 8003308:	fffffc03 	.word	0xfffffc03
 800330c:	ffc3ffff 	.word	0xffc3ffff

08003310 <HAL_ADC_DeInit>:
{
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003314:	2501      	movs	r5, #1
  if(hadc == NULL)
 8003316:	2800      	cmp	r0, #0
 8003318:	d011      	beq.n	800333e <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800331a:	2302      	movs	r3, #2
 800331c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800331e:	4313      	orrs	r3, r2
 8003320:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003322:	f7ff fef3 	bl	800310c <ADC_ConversionStop>
 8003326:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8003328:	d137      	bne.n	800339a <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 800332a:	0020      	movs	r0, r4
 800332c:	f7ff fe82 	bl	8003034 <ADC_Disable>
 8003330:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8003332:	2801      	cmp	r0, #1
 8003334:	d105      	bne.n	8003342 <HAL_ADC_DeInit+0x32>
{
 8003336:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8003338:	2300      	movs	r3, #0
 800333a:	3450      	adds	r4, #80	; 0x50
 800333c:	7023      	strb	r3, [r4, #0]
}
 800333e:	0028      	movs	r0, r5
 8003340:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8003342:	2301      	movs	r3, #1
 8003344:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	4915      	ldr	r1, [pc, #84]	; (80033a0 <HAL_ADC_DeInit+0x90>)
 800334a:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 800334c:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800334e:	400a      	ands	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003352:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003354:	4914      	ldr	r1, [pc, #80]	; (80033a8 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003356:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	400a      	ands	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4912      	ldr	r1, [pc, #72]	; (80033ac <HAL_ADC_DeInit+0x9c>)
 8003362:	400a      	ands	r2, r1
 8003364:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	4911      	ldr	r1, [pc, #68]	; (80033b0 <HAL_ADC_DeInit+0xa0>)
 800336a:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800336c:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800336e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	438a      	bics	r2, r1
 8003374:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003376:	6a1a      	ldr	r2, [r3, #32]
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_ADC_DeInit+0xa4>)
 800337a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800337c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800337e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003380:	33b4      	adds	r3, #180	; 0xb4
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	438a      	bics	r2, r1
 8003386:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	438a      	bics	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 800338e:	f003 fbd5 	bl	8006b3c <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003392:	2300      	movs	r3, #0
 8003394:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8003396:	6563      	str	r3, [r4, #84]	; 0x54
 8003398:	e7ce      	b.n	8003338 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 800339a:	2801      	cmp	r0, #1
 800339c:	d0cb      	beq.n	8003336 <HAL_ADC_DeInit+0x26>
 800339e:	e7d2      	b.n	8003346 <HAL_ADC_DeInit+0x36>
 80033a0:	fffff760 	.word	0xfffff760
 80033a4:	0000089f 	.word	0x0000089f
 80033a8:	efffffff 	.word	0xefffffff
 80033ac:	833e0200 	.word	0x833e0200
 80033b0:	3ffffc02 	.word	0x3ffffc02
 80033b4:	f000f000 	.word	0xf000f000

080033b8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033b8:	6803      	ldr	r3, [r0, #0]
{
 80033ba:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033bc:	689b      	ldr	r3, [r3, #8]
{
 80033be:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80033c0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033c2:	075b      	lsls	r3, r3, #29
 80033c4:	d41a      	bmi.n	80033fc <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80033c6:	0025      	movs	r5, r4
 80033c8:	3550      	adds	r5, #80	; 0x50
 80033ca:	782b      	ldrb	r3, [r5, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d015      	beq.n	80033fc <HAL_ADC_Start+0x44>
 80033d0:	2301      	movs	r3, #1
 80033d2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033d4:	69e3      	ldr	r3, [r4, #28]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d111      	bne.n	80033fe <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80033da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033dc:	4a0b      	ldr	r2, [pc, #44]	; (800340c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80033de:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80033e0:	401a      	ands	r2, r3
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80033ea:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033ec:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80033ee:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80033f0:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033f2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80033f4:	6899      	ldr	r1, [r3, #8]
 80033f6:	3a18      	subs	r2, #24
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80033fe:	0020      	movs	r0, r4
 8003400:	f7ff fe4c 	bl	800309c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003404:	2800      	cmp	r0, #0
 8003406:	d1f9      	bne.n	80033fc <HAL_ADC_Start+0x44>
 8003408:	e7e7      	b.n	80033da <HAL_ADC_Start+0x22>
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	fffff0fe 	.word	0xfffff0fe

08003410 <HAL_ADC_Stop>:
{
 8003410:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003412:	0006      	movs	r6, r0
 8003414:	3650      	adds	r6, #80	; 0x50
 8003416:	7833      	ldrb	r3, [r6, #0]
{
 8003418:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800341a:	2002      	movs	r0, #2
 800341c:	2b01      	cmp	r3, #1
 800341e:	d012      	beq.n	8003446 <HAL_ADC_Stop+0x36>
 8003420:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003422:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8003424:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003426:	f7ff fe71 	bl	800310c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800342a:	2800      	cmp	r0, #0
 800342c:	d109      	bne.n	8003442 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800342e:	0020      	movs	r0, r4
 8003430:	f7ff fe00 	bl	8003034 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003434:	2800      	cmp	r0, #0
 8003436:	d104      	bne.n	8003442 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8003438:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800343a:	4a03      	ldr	r2, [pc, #12]	; (8003448 <HAL_ADC_Stop+0x38>)
 800343c:	4013      	ands	r3, r2
 800343e:	431d      	orrs	r5, r3
 8003440:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003442:	2300      	movs	r3, #0
 8003444:	7033      	strb	r3, [r6, #0]
}
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	fffffefe 	.word	0xfffffefe

0800344c <HAL_ADC_PollForConversion>:
{
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800344e:	6945      	ldr	r5, [r0, #20]
{
 8003450:	0004      	movs	r4, r0
 8003452:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003454:	2d08      	cmp	r5, #8
 8003456:	d00d      	beq.n	8003474 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003458:	6803      	ldr	r3, [r0, #0]
 800345a:	2001      	movs	r0, #1
 800345c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800345e:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003460:	4203      	tst	r3, r0
 8003462:	d007      	beq.n	8003474 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003464:	2320      	movs	r3, #32
 8003466:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003468:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800346a:	4313      	orrs	r3, r2
 800346c:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800346e:	2300      	movs	r3, #0
 8003470:	7023      	strb	r3, [r4, #0]
}
 8003472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003474:	f7ff fda0 	bl	8002fb8 <HAL_GetTick>
 8003478:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	422a      	tst	r2, r5
 8003480:	d024      	beq.n	80034cc <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003486:	0092      	lsls	r2, r2, #2
 8003488:	430a      	orrs	r2, r1
 800348a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800348c:	22c0      	movs	r2, #192	; 0xc0
 800348e:	68d9      	ldr	r1, [r3, #12]
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	4211      	tst	r1, r2
 8003494:	d113      	bne.n	80034be <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003496:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003498:	7fd2      	ldrb	r2, [r2, #31]
 800349a:	2a00      	cmp	r2, #0
 800349c:	d10f      	bne.n	80034be <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	0712      	lsls	r2, r2, #28
 80034a2:	d50c      	bpl.n	80034be <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	0752      	lsls	r2, r2, #29
 80034a8:	d423      	bmi.n	80034f2 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80034aa:	210c      	movs	r1, #12
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	438a      	bics	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80034b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80034b4:	4913      	ldr	r1, [pc, #76]	; (8003504 <HAL_ADC_PollForConversion+0xb8>)
 80034b6:	4011      	ands	r1, r2
 80034b8:	2201      	movs	r2, #1
 80034ba:	430a      	orrs	r2, r1
 80034bc:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80034be:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034c0:	69a2      	ldr	r2, [r4, #24]
 80034c2:	4282      	cmp	r2, r0
 80034c4:	d1d5      	bne.n	8003472 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034c6:	220c      	movs	r2, #12
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e7d2      	b.n	8003472 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80034cc:	1c72      	adds	r2, r6, #1
 80034ce:	d0d5      	beq.n	800347c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80034d0:	2e00      	cmp	r6, #0
 80034d2:	d108      	bne.n	80034e6 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034d4:	2304      	movs	r3, #4
 80034d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80034d8:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034da:	4313      	orrs	r3, r2
 80034dc:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80034de:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80034e0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80034e2:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80034e4:	e7c5      	b.n	8003472 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80034e6:	f7ff fd67 	bl	8002fb8 <HAL_GetTick>
 80034ea:	1bc0      	subs	r0, r0, r7
 80034ec:	4286      	cmp	r6, r0
 80034ee:	d2c4      	bcs.n	800347a <HAL_ADC_PollForConversion+0x2e>
 80034f0:	e7f0      	b.n	80034d4 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f2:	2220      	movs	r2, #32
 80034f4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80034f6:	430a      	orrs	r2, r1
 80034f8:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fa:	2201      	movs	r2, #1
 80034fc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80034fe:	430a      	orrs	r2, r1
 8003500:	65a2      	str	r2, [r4, #88]	; 0x58
 8003502:	e7dc      	b.n	80034be <HAL_ADC_PollForConversion+0x72>
 8003504:	fffffefe 	.word	0xfffffefe

08003508 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003508:	6803      	ldr	r3, [r0, #0]
 800350a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800350c:	4770      	bx	lr
	...

08003510 <HAL_ADC_ConfigChannel>:
{
 8003510:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003512:	0004      	movs	r4, r0
 8003514:	3450      	adds	r4, #80	; 0x50
 8003516:	7823      	ldrb	r3, [r4, #0]
{
 8003518:	0006      	movs	r6, r0
 800351a:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800351c:	2002      	movs	r0, #2
 800351e:	2b01      	cmp	r3, #1
 8003520:	d00b      	beq.n	800353a <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003522:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 8003524:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003526:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 8003528:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800352a:	074b      	lsls	r3, r1, #29
 800352c:	d506      	bpl.n	800353c <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352e:	2220      	movs	r2, #32
 8003530:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8003532:	430a      	orrs	r2, r1
 8003534:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003536:	2200      	movs	r2, #0
 8003538:	7022      	strb	r2, [r4, #0]
}
 800353a:	bd70      	pop	{r4, r5, r6, pc}
 800353c:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 800353e:	4922      	ldr	r1, [pc, #136]	; (80035c8 <HAL_ADC_ConfigChannel+0xb8>)
 8003540:	686e      	ldr	r6, [r5, #4]
 8003542:	682b      	ldr	r3, [r5, #0]
 8003544:	02c0      	lsls	r0, r0, #11
 8003546:	428e      	cmp	r6, r1
 8003548:	d023      	beq.n	8003592 <HAL_ADC_ConfigChannel+0x82>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800354a:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800354c:	0359      	lsls	r1, r3, #13
 800354e:	0b49      	lsrs	r1, r1, #13
 8003550:	4331      	orrs	r1, r6
 8003552:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003554:	4203      	tst	r3, r0
 8003556:	d008      	beq.n	800356a <HAL_ADC_ConfigChannel+0x5a>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_ADC_ConfigChannel+0xbc>)
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003560:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8003562:	430b      	orrs	r3, r1
 8003564:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003566:	f7ff fd4f 	bl	8003008 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800356a:	682a      	ldr	r2, [r5, #0]
 800356c:	0393      	lsls	r3, r2, #14
 800356e:	d505      	bpl.n	800357c <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	4916      	ldr	r1, [pc, #88]	; (80035cc <HAL_ADC_ConfigChannel+0xbc>)
 8003574:	03db      	lsls	r3, r3, #15
 8003576:	6808      	ldr	r0, [r1, #0]
 8003578:	4303      	orrs	r3, r0
 800357a:	600b      	str	r3, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800357c:	03d3      	lsls	r3, r2, #15
 800357e:	d505      	bpl.n	800358c <HAL_ADC_ConfigChannel+0x7c>
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <HAL_ADC_ConfigChannel+0xbc>)
 8003584:	045b      	lsls	r3, r3, #17
 8003586:	6811      	ldr	r1, [r2, #0]
 8003588:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800358a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800358c:	2000      	movs	r0, #0
 800358e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003590:	e7d3      	b.n	800353a <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003592:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003594:	035d      	lsls	r5, r3, #13
 8003596:	0b6d      	lsrs	r5, r5, #13
 8003598:	43a9      	bics	r1, r5
 800359a:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800359c:	4203      	tst	r3, r0
 800359e:	d004      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x9a>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80035a0:	490a      	ldr	r1, [pc, #40]	; (80035cc <HAL_ADC_ConfigChannel+0xbc>)
 80035a2:	480b      	ldr	r0, [pc, #44]	; (80035d0 <HAL_ADC_ConfigChannel+0xc0>)
 80035a4:	680a      	ldr	r2, [r1, #0]
 80035a6:	4002      	ands	r2, r0
 80035a8:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80035aa:	039a      	lsls	r2, r3, #14
 80035ac:	d504      	bpl.n	80035b8 <HAL_ADC_ConfigChannel+0xa8>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80035ae:	4907      	ldr	r1, [pc, #28]	; (80035cc <HAL_ADC_ConfigChannel+0xbc>)
 80035b0:	4808      	ldr	r0, [pc, #32]	; (80035d4 <HAL_ADC_ConfigChannel+0xc4>)
 80035b2:	680a      	ldr	r2, [r1, #0]
 80035b4:	4002      	ands	r2, r0
 80035b6:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80035b8:	03db      	lsls	r3, r3, #15
 80035ba:	d5e7      	bpl.n	800358c <HAL_ADC_ConfigChannel+0x7c>
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80035bc:	4a03      	ldr	r2, [pc, #12]	; (80035cc <HAL_ADC_ConfigChannel+0xbc>)
 80035be:	4906      	ldr	r1, [pc, #24]	; (80035d8 <HAL_ADC_ConfigChannel+0xc8>)
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	400b      	ands	r3, r1
 80035c4:	e7e1      	b.n	800358a <HAL_ADC_ConfigChannel+0x7a>
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	00001001 	.word	0x00001001
 80035cc:	40012708 	.word	0x40012708
 80035d0:	ff7fffff 	.word	0xff7fffff
 80035d4:	ffbfffff 	.word	0xffbfffff
 80035d8:	feffffff 	.word	0xfeffffff

080035dc <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035de:	0005      	movs	r5, r0
 80035e0:	3550      	adds	r5, #80	; 0x50
 80035e2:	782b      	ldrb	r3, [r5, #0]
{
 80035e4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80035e6:	2002      	movs	r0, #2
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d03f      	beq.n	800366c <HAL_ADCEx_Calibration_Start+0x90>
 80035ec:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035ee:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80035f0:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	6898      	ldr	r0, [r3, #8]
 80035f6:	4010      	ands	r0, r2
 80035f8:	2801      	cmp	r0, #1
 80035fa:	d102      	bne.n	8003602 <HAL_ADCEx_Calibration_Start+0x26>
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4202      	tst	r2, r0
 8003600:	d135      	bne.n	800366e <HAL_ADCEx_Calibration_Start+0x92>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003602:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003604:	491c      	ldr	r1, [pc, #112]	; (8003678 <HAL_ADCEx_Calibration_Start+0x9c>)
 8003606:	4011      	ands	r1, r2
 8003608:	2202      	movs	r2, #2
 800360a:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800360c:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800360e:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003610:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	438a      	bics	r2, r1
 8003616:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	0612      	lsls	r2, r2, #24
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003622:	f7ff fcc9 	bl	8002fb8 <HAL_GetTick>
 8003626:	0007      	movs	r7, r0
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	2a00      	cmp	r2, #0
 800362e:	db0e      	blt.n	800364e <HAL_ADCEx_Calibration_Start+0x72>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003630:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003632:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003634:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003636:	430e      	orrs	r6, r1
 8003638:	60de      	str	r6, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800363a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363c:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800363e:	4393      	bics	r3, r2
 8003640:	001a      	movs	r2, r3
 8003642:	2301      	movs	r3, #1
 8003644:	4313      	orrs	r3, r2
 8003646:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003648:	2300      	movs	r3, #0
 800364a:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800364c:	e00e      	b.n	800366c <HAL_ADCEx_Calibration_Start+0x90>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800364e:	f7ff fcb3 	bl	8002fb8 <HAL_GetTick>
 8003652:	1bc0      	subs	r0, r0, r7
 8003654:	280a      	cmp	r0, #10
 8003656:	d9e7      	bls.n	8003628 <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 8003658:	2212      	movs	r2, #18
 800365a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800365c:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800365e:	4393      	bics	r3, r2
 8003660:	001a      	movs	r2, r3
 8003662:	2310      	movs	r3, #16
 8003664:	4313      	orrs	r3, r2
 8003666:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003668:	2300      	movs	r3, #0
 800366a:	702b      	strb	r3, [r5, #0]
}
 800366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366e:	2320      	movs	r3, #32
 8003670:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003672:	4313      	orrs	r3, r2
 8003674:	6563      	str	r3, [r4, #84]	; 0x54
 8003676:	e7e7      	b.n	8003648 <HAL_ADCEx_Calibration_Start+0x6c>
 8003678:	fffffefd 	.word	0xfffffefd

0800367c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003680:	2800      	cmp	r0, #0
 8003682:	da14      	bge.n	80036ae <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003684:	230f      	movs	r3, #15
 8003686:	b2c0      	uxtb	r0, r0
 8003688:	4003      	ands	r3, r0
 800368a:	3b08      	subs	r3, #8
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <HAL_NVIC_SetPriority+0x58>)
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	189b      	adds	r3, r3, r2
 8003694:	2203      	movs	r2, #3
 8003696:	4010      	ands	r0, r2
 8003698:	4090      	lsls	r0, r2
 800369a:	32fc      	adds	r2, #252	; 0xfc
 800369c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800369e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036a0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036a2:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036a4:	69dc      	ldr	r4, [r3, #28]
 80036a6:	43ac      	bics	r4, r5
 80036a8:	4321      	orrs	r1, r4
 80036aa:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80036ac:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036ae:	2503      	movs	r5, #3
 80036b0:	0883      	lsrs	r3, r0, #2
 80036b2:	4028      	ands	r0, r5
 80036b4:	40a8      	lsls	r0, r5
 80036b6:	35fc      	adds	r5, #252	; 0xfc
 80036b8:	002e      	movs	r6, r5
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_NVIC_SetPriority+0x5c>)
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	22c0      	movs	r2, #192	; 0xc0
 80036c2:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036c4:	4029      	ands	r1, r5
 80036c6:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036c8:	0092      	lsls	r2, r2, #2
 80036ca:	589c      	ldr	r4, [r3, r2]
 80036cc:	43b4      	bics	r4, r6
 80036ce:	4321      	orrs	r1, r4
 80036d0:	5099      	str	r1, [r3, r2]
 80036d2:	e7eb      	b.n	80036ac <HAL_NVIC_SetPriority+0x30>
 80036d4:	e000ed00 	.word	0xe000ed00
 80036d8:	e000e100 	.word	0xe000e100

080036dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80036dc:	231f      	movs	r3, #31
 80036de:	4018      	ands	r0, r3
 80036e0:	3b1e      	subs	r3, #30
 80036e2:	4083      	lsls	r3, r0
 80036e4:	4a01      	ldr	r2, [pc, #4]	; (80036ec <HAL_NVIC_EnableIRQ+0x10>)
 80036e6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80036e8:	4770      	bx	lr
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f0:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_SYSTICK_Config+0x28>)
 80036f2:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80036f4:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d80d      	bhi.n	8003716 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036fa:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036fc:	4a07      	ldr	r2, [pc, #28]	; (800371c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036fe:	4808      	ldr	r0, [pc, #32]	; (8003720 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003700:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003702:	6a03      	ldr	r3, [r0, #32]
 8003704:	0609      	lsls	r1, r1, #24
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	430b      	orrs	r3, r1
 800370c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800370e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003710:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003712:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003714:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003716:	4770      	bx	lr
 8003718:	00ffffff 	.word	0x00ffffff
 800371c:	e000e010 	.word	0xe000e010
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003726:	4a58      	ldr	r2, [pc, #352]	; (8003888 <HAL_GPIO_Init+0x164>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8003728:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800372a:	1882      	adds	r2, r0, r2
 800372c:	1e54      	subs	r4, r2, #1
 800372e:	41a2      	sbcs	r2, r4
{
 8003730:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8003732:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 8003734:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003736:	3205      	adds	r2, #5
{
 8003738:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800373a:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800373c:	9a04      	ldr	r2, [sp, #16]
 800373e:	40da      	lsrs	r2, r3
 8003740:	d101      	bne.n	8003746 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003742:	b007      	add	sp, #28
 8003744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003746:	2601      	movs	r6, #1
 8003748:	0037      	movs	r7, r6
 800374a:	409f      	lsls	r7, r3
 800374c:	9a04      	ldr	r2, [sp, #16]
 800374e:	403a      	ands	r2, r7
 8003750:	9202      	str	r2, [sp, #8]
    if (iocurrent)
 8003752:	d100      	bne.n	8003756 <HAL_GPIO_Init+0x32>
 8003754:	e095      	b.n	8003882 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003756:	9a03      	ldr	r2, [sp, #12]
 8003758:	6852      	ldr	r2, [r2, #4]
 800375a:	9201      	str	r2, [sp, #4]
 800375c:	2210      	movs	r2, #16
 800375e:	9d01      	ldr	r5, [sp, #4]
 8003760:	4395      	bics	r5, r2
 8003762:	1e6a      	subs	r2, r5, #1
 8003764:	42b2      	cmp	r2, r6
 8003766:	d813      	bhi.n	8003790 <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003768:	2403      	movs	r4, #3
 800376a:	0059      	lsls	r1, r3, #1
 800376c:	408c      	lsls	r4, r1
 800376e:	468c      	mov	ip, r1
        temp = GPIOx->OSPEEDR;
 8003770:	6882      	ldr	r2, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003772:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003774:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003776:	68cc      	ldr	r4, [r1, #12]
 8003778:	4661      	mov	r1, ip
 800377a:	408c      	lsls	r4, r1
 800377c:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 800377e:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003780:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OTYPER;
 8003782:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003784:	0912      	lsrs	r2, r2, #4
 8003786:	4032      	ands	r2, r6
 8003788:	409a      	lsls	r2, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800378a:	43bc      	bics	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800378c:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800378e:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003790:	2203      	movs	r2, #3
 8003792:	005f      	lsls	r7, r3, #1
 8003794:	40ba      	lsls	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003796:	9903      	ldr	r1, [sp, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003798:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379a:	688c      	ldr	r4, [r1, #8]
      temp = GPIOx->PUPDR;
 800379c:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379e:	40bc      	lsls	r4, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037a0:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a2:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 80037a4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a6:	2d02      	cmp	r5, #2
 80037a8:	d10e      	bne.n	80037c8 <HAL_GPIO_Init+0xa4>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80037aa:	210f      	movs	r1, #15
 80037ac:	3505      	adds	r5, #5
 80037ae:	401d      	ands	r5, r3
 80037b0:	00ad      	lsls	r5, r5, #2
 80037b2:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80037b4:	08dc      	lsrs	r4, r3, #3
 80037b6:	00a4      	lsls	r4, r4, #2
 80037b8:	1904      	adds	r4, r0, r4
 80037ba:	6a26      	ldr	r6, [r4, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80037bc:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80037be:	9903      	ldr	r1, [sp, #12]
 80037c0:	6909      	ldr	r1, [r1, #16]
 80037c2:	40a9      	lsls	r1, r5
 80037c4:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 80037c6:	6226      	str	r6, [r4, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c8:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 80037ca:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037cc:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ce:	9c01      	ldr	r4, [sp, #4]
 80037d0:	4034      	ands	r4, r6
 80037d2:	40bc      	lsls	r4, r7
 80037d4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80037d6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037d8:	9a01      	ldr	r2, [sp, #4]
 80037da:	00d2      	lsls	r2, r2, #3
 80037dc:	d551      	bpl.n	8003882 <HAL_GPIO_Init+0x15e>
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80037de:	001d      	movs	r5, r3
 80037e0:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e2:	2101      	movs	r1, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80037e4:	4035      	ands	r5, r6
 80037e6:	00ad      	lsls	r5, r5, #2
 80037e8:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	4c28      	ldr	r4, [pc, #160]	; (800388c <HAL_GPIO_Init+0x168>)
 80037ec:	468c      	mov	ip, r1
 80037ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80037f0:	430a      	orrs	r2, r1
 80037f2:	6362      	str	r2, [r4, #52]	; 0x34
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_GPIO_Init+0x16c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80037f6:	089c      	lsrs	r4, r3, #2
 80037f8:	00a4      	lsls	r4, r4, #2
 80037fa:	18a4      	adds	r4, r4, r2
 80037fc:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80037fe:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003800:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003802:	0011      	movs	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003804:	05ff      	lsls	r7, r7, #23
 8003806:	2200      	movs	r2, #0
 8003808:	42b8      	cmp	r0, r7
 800380a:	d010      	beq.n	800382e <HAL_GPIO_Init+0x10a>
 800380c:	4f21      	ldr	r7, [pc, #132]	; (8003894 <HAL_GPIO_Init+0x170>)
 800380e:	4662      	mov	r2, ip
 8003810:	42b8      	cmp	r0, r7
 8003812:	d00c      	beq.n	800382e <HAL_GPIO_Init+0x10a>
 8003814:	4f20      	ldr	r7, [pc, #128]	; (8003898 <HAL_GPIO_Init+0x174>)
 8003816:	1892      	adds	r2, r2, r2
 8003818:	42b8      	cmp	r0, r7
 800381a:	d008      	beq.n	800382e <HAL_GPIO_Init+0x10a>
 800381c:	4f1f      	ldr	r7, [pc, #124]	; (800389c <HAL_GPIO_Init+0x178>)
 800381e:	0032      	movs	r2, r6
 8003820:	42b8      	cmp	r0, r7
 8003822:	d004      	beq.n	800382e <HAL_GPIO_Init+0x10a>
 8003824:	4e1e      	ldr	r6, [pc, #120]	; (80038a0 <HAL_GPIO_Init+0x17c>)
 8003826:	4462      	add	r2, ip
 8003828:	42b0      	cmp	r0, r6
 800382a:	d000      	beq.n	800382e <HAL_GPIO_Init+0x10a>
 800382c:	9a05      	ldr	r2, [sp, #20]
 800382e:	40aa      	lsls	r2, r5
 8003830:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003832:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003834:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8003836:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <HAL_GPIO_Init+0x180>)
        temp &= ~((uint32_t)iocurrent);
 800383a:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 800383c:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800383e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003840:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003842:	03c9      	lsls	r1, r1, #15
 8003844:	d401      	bmi.n	800384a <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 8003846:	0035      	movs	r5, r6
 8003848:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 800384a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800384c:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800384e:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003850:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003852:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003854:	0389      	lsls	r1, r1, #14
 8003856:	d401      	bmi.n	800385c <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 8003858:	0035      	movs	r5, r6
 800385a:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800385c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800385e:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003860:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003862:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003864:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003866:	02c9      	lsls	r1, r1, #11
 8003868:	d401      	bmi.n	800386e <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 800386a:	0035      	movs	r5, r6
 800386c:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800386e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003870:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003872:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003874:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003876:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003878:	0289      	lsls	r1, r1, #10
 800387a:	d401      	bmi.n	8003880 <HAL_GPIO_Init+0x15c>
        temp &= ~((uint32_t)iocurrent);
 800387c:	4025      	ands	r5, r4
 800387e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003880:	60d6      	str	r6, [r2, #12]
    position++;
 8003882:	3301      	adds	r3, #1
 8003884:	e75a      	b.n	800373c <HAL_GPIO_Init+0x18>
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	afffe400 	.word	0xafffe400
 800388c:	40021000 	.word	0x40021000
 8003890:	40010000 	.word	0x40010000
 8003894:	50000400 	.word	0x50000400
 8003898:	50000800 	.word	0x50000800
 800389c:	50000c00 	.word	0x50000c00
 80038a0:	50001000 	.word	0x50001000
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_GPIO_DeInit>:
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80038a8:	4a38      	ldr	r2, [pc, #224]	; (800398c <HAL_GPIO_DeInit+0xe4>)
{
 80038aa:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80038ac:	1882      	adds	r2, r0, r2
 80038ae:	1e54      	subs	r4, r2, #1
 80038b0:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80038b2:	2300      	movs	r3, #0
{
 80038b4:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80038b6:	3205      	adds	r2, #5
 80038b8:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 80038ba:	000a      	movs	r2, r1
 80038bc:	40da      	lsrs	r2, r3
 80038be:	d101      	bne.n	80038c4 <HAL_GPIO_DeInit+0x1c>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 80038c0:	b007      	add	sp, #28
 80038c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80038c4:	2701      	movs	r7, #1
 80038c6:	003a      	movs	r2, r7
 80038c8:	409a      	lsls	r2, r3
 80038ca:	9201      	str	r2, [sp, #4]
 80038cc:	400a      	ands	r2, r1
 80038ce:	9202      	str	r2, [sp, #8]
    if (iocurrent)
 80038d0:	d059      	beq.n	8003986 <HAL_GPIO_DeInit+0xde>
 80038d2:	4a2f      	ldr	r2, [pc, #188]	; (8003990 <HAL_GPIO_DeInit+0xe8>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038d4:	089c      	lsrs	r4, r3, #2
 80038d6:	00a4      	lsls	r4, r4, #2
 80038d8:	18a4      	adds	r4, r4, r2
 80038da:	68a2      	ldr	r2, [r4, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80038dc:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038de:	0016      	movs	r6, r2
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80038e0:	2203      	movs	r2, #3
 80038e2:	4015      	ands	r5, r2
 80038e4:	00ad      	lsls	r5, r5, #2
 80038e6:	320c      	adds	r2, #12
 80038e8:	40aa      	lsls	r2, r5
 80038ea:	9203      	str	r2, [sp, #12]
 80038ec:	4032      	ands	r2, r6
 80038ee:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80038f0:	22a0      	movs	r2, #160	; 0xa0
 80038f2:	05d2      	lsls	r2, r2, #23
 80038f4:	4694      	mov	ip, r2
 80038f6:	2200      	movs	r2, #0
 80038f8:	4560      	cmp	r0, ip
 80038fa:	d011      	beq.n	8003920 <HAL_GPIO_DeInit+0x78>
 80038fc:	4a25      	ldr	r2, [pc, #148]	; (8003994 <HAL_GPIO_DeInit+0xec>)
 80038fe:	4694      	mov	ip, r2
 8003900:	003a      	movs	r2, r7
 8003902:	4560      	cmp	r0, ip
 8003904:	d00c      	beq.n	8003920 <HAL_GPIO_DeInit+0x78>
 8003906:	4f24      	ldr	r7, [pc, #144]	; (8003998 <HAL_GPIO_DeInit+0xf0>)
 8003908:	1892      	adds	r2, r2, r2
 800390a:	42b8      	cmp	r0, r7
 800390c:	d008      	beq.n	8003920 <HAL_GPIO_DeInit+0x78>
 800390e:	4f23      	ldr	r7, [pc, #140]	; (800399c <HAL_GPIO_DeInit+0xf4>)
 8003910:	3201      	adds	r2, #1
 8003912:	42b8      	cmp	r0, r7
 8003914:	d004      	beq.n	8003920 <HAL_GPIO_DeInit+0x78>
 8003916:	4e22      	ldr	r6, [pc, #136]	; (80039a0 <HAL_GPIO_DeInit+0xf8>)
 8003918:	3201      	adds	r2, #1
 800391a:	42b0      	cmp	r0, r6
 800391c:	d000      	beq.n	8003920 <HAL_GPIO_DeInit+0x78>
 800391e:	9a05      	ldr	r2, [sp, #20]
 8003920:	40aa      	lsls	r2, r5
 8003922:	9d04      	ldr	r5, [sp, #16]
 8003924:	4295      	cmp	r5, r2
 8003926:	d112      	bne.n	800394e <HAL_GPIO_DeInit+0xa6>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003928:	9e02      	ldr	r6, [sp, #8]
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_GPIO_DeInit+0xfc>)
 800392c:	43f6      	mvns	r6, r6
 800392e:	6815      	ldr	r5, [r2, #0]
 8003930:	4035      	ands	r5, r6
 8003932:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003934:	6855      	ldr	r5, [r2, #4]
 8003936:	4035      	ands	r5, r6
 8003938:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800393a:	6895      	ldr	r5, [r2, #8]
 800393c:	4035      	ands	r5, r6
 800393e:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003940:	68d5      	ldr	r5, [r2, #12]
 8003942:	402e      	ands	r6, r5
 8003944:	60d6      	str	r6, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003946:	68a2      	ldr	r2, [r4, #8]
 8003948:	9d03      	ldr	r5, [sp, #12]
 800394a:	43aa      	bics	r2, r5
 800394c:	60a2      	str	r2, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800394e:	2203      	movs	r2, #3
 8003950:	005d      	lsls	r5, r3, #1
 8003952:	40aa      	lsls	r2, r5
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8003954:	2507      	movs	r5, #7
 8003956:	270f      	movs	r7, #15
 8003958:	401d      	ands	r5, r3
 800395a:	00ad      	lsls	r5, r5, #2
 800395c:	40af      	lsls	r7, r5
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800395e:	43d5      	mvns	r5, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003960:	6804      	ldr	r4, [r0, #0]
 8003962:	4314      	orrs	r4, r2
 8003964:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8003966:	08dc      	lsrs	r4, r3, #3
 8003968:	00a4      	lsls	r4, r4, #2
 800396a:	1904      	adds	r4, r0, r4
 800396c:	6a26      	ldr	r6, [r4, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800396e:	9a01      	ldr	r2, [sp, #4]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8003970:	43be      	bics	r6, r7
 8003972:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003974:	68c4      	ldr	r4, [r0, #12]
 8003976:	402c      	ands	r4, r5
 8003978:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800397a:	6844      	ldr	r4, [r0, #4]
 800397c:	4394      	bics	r4, r2
 800397e:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003980:	6882      	ldr	r2, [r0, #8]
 8003982:	402a      	ands	r2, r5
 8003984:	6082      	str	r2, [r0, #8]
    position++;
 8003986:	3301      	adds	r3, #1
 8003988:	e797      	b.n	80038ba <HAL_GPIO_DeInit+0x12>
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	afffe400 	.word	0xafffe400
 8003990:	40010000 	.word	0x40010000
 8003994:	50000400 	.word	0x50000400
 8003998:	50000800 	.word	0x50000800
 800399c:	50000c00 	.word	0x50000c00
 80039a0:	50001000 	.word	0x50001000
 80039a4:	40010400 	.word	0x40010400

080039a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039a8:	6900      	ldr	r0, [r0, #16]
 80039aa:	4008      	ands	r0, r1
 80039ac:	1e41      	subs	r1, r0, #1
 80039ae:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80039b0:	b2c0      	uxtb	r0, r0
}
 80039b2:	4770      	bx	lr

080039b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039b4:	2a00      	cmp	r2, #0
 80039b6:	d001      	beq.n	80039bc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80039ba:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80039bc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80039be:	e7fc      	b.n	80039ba <HAL_GPIO_WritePin+0x6>

080039c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80039c2:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	4210      	tst	r0, r2
 80039c8:	d002      	beq.n	80039d0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039ca:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039cc:	f003 f870 	bl	8006ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039d0:	bd10      	pop	{r4, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	40010400 	.word	0x40010400

080039d8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039d8:	6803      	ldr	r3, [r0, #0]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	0792      	lsls	r2, r2, #30
 80039de:	d501      	bpl.n	80039e4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039e0:	2200      	movs	r2, #0
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e4:	2201      	movs	r2, #1
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	4211      	tst	r1, r2
 80039ea:	d102      	bne.n	80039f2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	619a      	str	r2, [r3, #24]
  }
}
 80039f2:	4770      	bx	lr

080039f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80039f8:	0589      	lsls	r1, r1, #22
 80039fa:	4333      	orrs	r3, r6
 80039fc:	0d89      	lsrs	r1, r1, #22
 80039fe:	4319      	orrs	r1, r3
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	6804      	ldr	r4, [r0, #0]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	0d70      	lsrs	r0, r6, #21
 8003a08:	4018      	ands	r0, r3
 8003a0a:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <I2C_TransferConfig+0x28>)
 8003a0c:	6865      	ldr	r5, [r4, #4]
 8003a0e:	0412      	lsls	r2, r2, #16
 8003a10:	4318      	orrs	r0, r3
 8003a12:	4385      	bics	r5, r0
 8003a14:	4311      	orrs	r1, r2
 8003a16:	4329      	orrs	r1, r5
 8003a18:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003a1a:	bd70      	pop	{r4, r5, r6, pc}
 8003a1c:	03ff63ff 	.word	0x03ff63ff

08003a20 <I2C_WaitOnFlagUntilTimeout>:
{
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	0004      	movs	r4, r0
 8003a24:	000e      	movs	r6, r1
 8003a26:	0017      	movs	r7, r2
 8003a28:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a2a:	6822      	ldr	r2, [r4, #0]
 8003a2c:	6993      	ldr	r3, [r2, #24]
 8003a2e:	4033      	ands	r3, r6
 8003a30:	1b9b      	subs	r3, r3, r6
 8003a32:	4259      	negs	r1, r3
 8003a34:	414b      	adcs	r3, r1
 8003a36:	42bb      	cmp	r3, r7
 8003a38:	d001      	beq.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	e017      	b.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8003a3e:	1c6b      	adds	r3, r5, #1
 8003a40:	d0f4      	beq.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7ff fab9 	bl	8002fb8 <HAL_GetTick>
 8003a46:	9b06      	ldr	r3, [sp, #24]
 8003a48:	1ac0      	subs	r0, r0, r3
 8003a4a:	4285      	cmp	r5, r0
 8003a4c:	d301      	bcc.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	d1eb      	bne.n	8003a2a <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a52:	2220      	movs	r2, #32
 8003a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003a56:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	0023      	movs	r3, r4
 8003a5e:	3341      	adds	r3, #65	; 0x41
 8003a60:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a62:	0022      	movs	r2, r4
 8003a64:	2300      	movs	r3, #0
 8003a66:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8003a68:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003a6c:	7023      	strb	r3, [r4, #0]
}
 8003a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a70 <I2C_IsAcknowledgeFailed>:
{
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a72:	6803      	ldr	r3, [r0, #0]
{
 8003a74:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a76:	6998      	ldr	r0, [r3, #24]
 8003a78:	2310      	movs	r3, #16
{
 8003a7a:	000e      	movs	r6, r1
 8003a7c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a80:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d118      	bne.n	8003ab8 <I2C_IsAcknowledgeFailed+0x48>
}
 8003a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8003a88:	1c72      	adds	r2, r6, #1
 8003a8a:	d016      	beq.n	8003aba <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7ff fa94 	bl	8002fb8 <HAL_GetTick>
 8003a90:	1bc0      	subs	r0, r0, r7
 8003a92:	4286      	cmp	r6, r0
 8003a94:	d301      	bcc.n	8003a9a <I2C_IsAcknowledgeFailed+0x2a>
 8003a96:	2e00      	cmp	r6, #0
 8003a98:	d10e      	bne.n	8003ab8 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	0023      	movs	r3, r4
 8003aa4:	3341      	adds	r3, #65	; 0x41
 8003aa6:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	0022      	movs	r2, r4
 8003aaa:	2300      	movs	r3, #0
 8003aac:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8003aae:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8003ab4:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003ab6:	e7e6      	b.n	8003a86 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	422a      	tst	r2, r5
 8003abe:	d0e3      	beq.n	8003a88 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac0:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8003ac2:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac4:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac6:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003ac8:	f7ff ff86 	bl	80039d8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	4906      	ldr	r1, [pc, #24]	; (8003ae8 <I2C_IsAcknowledgeFailed+0x78>)
 8003ad0:	6853      	ldr	r3, [r2, #4]
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003ada:	4313      	orrs	r3, r2
 8003adc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	0023      	movs	r3, r4
 8003ae0:	3341      	adds	r3, #65	; 0x41
 8003ae2:	701d      	strb	r5, [r3, #0]
 8003ae4:	e7e0      	b.n	8003aa8 <I2C_IsAcknowledgeFailed+0x38>
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	fe00e800 	.word	0xfe00e800

08003aec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	0004      	movs	r4, r0
 8003af0:	000d      	movs	r5, r1
 8003af2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003af4:	2702      	movs	r7, #2
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	423b      	tst	r3, r7
 8003afc:	d001      	beq.n	8003b02 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003afe:	2000      	movs	r0, #0
}
 8003b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b02:	0032      	movs	r2, r6
 8003b04:	0029      	movs	r1, r5
 8003b06:	0020      	movs	r0, r4
 8003b08:	f7ff ffb2 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d115      	bne.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	1c6b      	adds	r3, r5, #1
 8003b12:	d0f0      	beq.n	8003af6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b14:	f7ff fa50 	bl	8002fb8 <HAL_GetTick>
 8003b18:	1b80      	subs	r0, r0, r6
 8003b1a:	4285      	cmp	r5, r0
 8003b1c:	d301      	bcc.n	8003b22 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003b1e:	2d00      	cmp	r5, #0
 8003b20:	d1e9      	bne.n	8003af6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b22:	2220      	movs	r2, #32
 8003b24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b26:	4313      	orrs	r3, r2
 8003b28:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	0023      	movs	r3, r4
 8003b2c:	3341      	adds	r3, #65	; 0x41
 8003b2e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b30:	0022      	movs	r2, r4
 8003b32:	2300      	movs	r3, #0
 8003b34:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b36:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003b3a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	e7df      	b.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08003b40 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	0004      	movs	r4, r0
 8003b44:	000d      	movs	r5, r1
 8003b46:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b48:	2720      	movs	r7, #32
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	423b      	tst	r3, r7
 8003b50:	d001      	beq.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003b52:	2000      	movs	r0, #0
}
 8003b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b56:	0032      	movs	r2, r6
 8003b58:	0029      	movs	r1, r5
 8003b5a:	0020      	movs	r0, r4
 8003b5c:	f7ff ff88 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d113      	bne.n	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b64:	f7ff fa28 	bl	8002fb8 <HAL_GetTick>
 8003b68:	1b80      	subs	r0, r0, r6
 8003b6a:	4285      	cmp	r5, r0
 8003b6c:	d301      	bcc.n	8003b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003b6e:	2d00      	cmp	r5, #0
 8003b70:	d1eb      	bne.n	8003b4a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b72:	2220      	movs	r2, #32
 8003b74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b76:	4313      	orrs	r3, r2
 8003b78:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	0023      	movs	r3, r4
 8003b7c:	3341      	adds	r3, #65	; 0x41
 8003b7e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	0022      	movs	r2, r4
 8003b82:	2300      	movs	r3, #0
 8003b84:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b86:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003b8a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	e7e1      	b.n	8003b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08003b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	0004      	movs	r4, r0
 8003b94:	000d      	movs	r5, r1
 8003b96:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b98:	2604      	movs	r6, #4
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	4233      	tst	r3, r6
 8003ba0:	d111      	bne.n	8003bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	003a      	movs	r2, r7
 8003ba4:	0029      	movs	r1, r5
 8003ba6:	0020      	movs	r0, r4
 8003ba8:	f7ff ff62 	bl	8003a70 <I2C_IsAcknowledgeFailed>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d11a      	bne.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	420a      	tst	r2, r1
 8003bb8:	d017      	beq.n	8003bea <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	4232      	tst	r2, r6
 8003bbe:	d004      	beq.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8003bc0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8003bc6:	2000      	movs	r0, #0
}
 8003bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bca:	2120      	movs	r1, #32
 8003bcc:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	480e      	ldr	r0, [pc, #56]	; (8003c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8003bd2:	4002      	ands	r2, r0
 8003bd4:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003be0:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8003be4:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003be6:	2001      	movs	r0, #1
 8003be8:	e7ee      	b.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7ff f9e5 	bl	8002fb8 <HAL_GetTick>
 8003bee:	1bc0      	subs	r0, r0, r7
 8003bf0:	4285      	cmp	r5, r0
 8003bf2:	d301      	bcc.n	8003bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	d1d0      	bne.n	8003b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	0023      	movs	r3, r4
 8003c02:	3341      	adds	r3, #65	; 0x41
 8003c04:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8003c06:	3440      	adds	r4, #64	; 0x40
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e7eb      	b.n	8003be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003c0c:	fe00e800 	.word	0xfe00e800

08003c10 <HAL_I2C_Init>:
{
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003c16:	2c00      	cmp	r4, #0
 8003c18:	d03f      	beq.n	8003c9a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1a:	0025      	movs	r5, r4
 8003c1c:	3541      	adds	r5, #65	; 0x41
 8003c1e:	782b      	ldrb	r3, [r5, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003c26:	0022      	movs	r2, r4
 8003c28:	3240      	adds	r2, #64	; 0x40
 8003c2a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8003c2c:	0020      	movs	r0, r4
 8003c2e:	f002 ff9b 	bl	8006b68 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c32:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003c34:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003c38:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c3a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68a6      	ldr	r6, [r4, #8]
 8003c40:	438a      	bics	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c44:	6861      	ldr	r1, [r4, #4]
 8003c46:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <HAL_I2C_Init+0xa0>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c4c:	6899      	ldr	r1, [r3, #8]
 8003c4e:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <HAL_I2C_Init+0xa4>)
 8003c50:	4011      	ands	r1, r2
 8003c52:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c54:	2801      	cmp	r0, #1
 8003c56:	d121      	bne.n	8003c9c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	0209      	lsls	r1, r1, #8
 8003c5c:	4331      	orrs	r1, r6
 8003c5e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c60:	6858      	ldr	r0, [r3, #4]
 8003c62:	4915      	ldr	r1, [pc, #84]	; (8003cb8 <HAL_I2C_Init+0xa8>)
 8003c64:	4301      	orrs	r1, r0
 8003c66:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c68:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c70:	6961      	ldr	r1, [r4, #20]
 8003c72:	6922      	ldr	r2, [r4, #16]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	69a1      	ldr	r1, [r4, #24]
 8003c78:	0209      	lsls	r1, r1, #8
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c7e:	6a21      	ldr	r1, [r4, #32]
 8003c80:	69e2      	ldr	r2, [r4, #28]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003c86:	2201      	movs	r2, #1
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c90:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c92:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c94:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c96:	3442      	adds	r4, #66	; 0x42
 8003c98:	7020      	strb	r0, [r4, #0]
}
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c9c:	2184      	movs	r1, #132	; 0x84
 8003c9e:	0209      	lsls	r1, r1, #8
 8003ca0:	4331      	orrs	r1, r6
 8003ca2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ca4:	2802      	cmp	r0, #2
 8003ca6:	d1db      	bne.n	8003c60 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	0109      	lsls	r1, r1, #4
 8003cac:	6059      	str	r1, [r3, #4]
 8003cae:	e7d7      	b.n	8003c60 <HAL_I2C_Init+0x50>
 8003cb0:	f0ffffff 	.word	0xf0ffffff
 8003cb4:	ffff7fff 	.word	0xffff7fff
 8003cb8:	02008000 	.word	0x02008000

08003cbc <HAL_I2C_DeInit>:
{
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003cc0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003cc2:	2c00      	cmp	r4, #0
 8003cc4:	d013      	beq.n	8003cee <HAL_I2C_DeInit+0x32>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc6:	0025      	movs	r5, r4
 8003cc8:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003cca:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ccc:	3541      	adds	r5, #65	; 0x41
 8003cce:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	4383      	bics	r3, r0
 8003cd4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003cd6:	0020      	movs	r0, r4
 8003cd8:	f002 ff78 	bl	8006bcc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	2000      	movs	r0, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cde:	0023      	movs	r3, r4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	3342      	adds	r3, #66	; 0x42
  hi2c->State = HAL_I2C_STATE_RESET;
 8003ce4:	7028      	strb	r0, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	6320      	str	r0, [r4, #48]	; 0x30
  __HAL_UNLOCK(hi2c);
 8003ce8:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	7018      	strb	r0, [r3, #0]
  __HAL_UNLOCK(hi2c);
 8003cec:	7020      	strb	r0, [r4, #0]
}
 8003cee:	bd70      	pop	{r4, r5, r6, pc}

08003cf0 <HAL_I2C_Master_Transmit>:
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf2:	0005      	movs	r5, r0
{
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	9103      	str	r1, [sp, #12]
 8003cf8:	9204      	str	r2, [sp, #16]
 8003cfa:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfc:	3541      	adds	r5, #65	; 0x41
 8003cfe:	782b      	ldrb	r3, [r5, #0]
{
 8003d00:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003d02:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d114      	bne.n	8003d32 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8003d08:	0023      	movs	r3, r4
 8003d0a:	3340      	adds	r3, #64	; 0x40
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	2a01      	cmp	r2, #1
 8003d10:	d00f      	beq.n	8003d32 <HAL_I2C_Master_Transmit+0x42>
 8003d12:	2601      	movs	r6, #1
 8003d14:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003d16:	f7ff f94f 	bl	8002fb8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d1a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003d1c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d1e:	9000      	str	r0, [sp, #0]
 8003d20:	2319      	movs	r3, #25
 8003d22:	0032      	movs	r2, r6
 8003d24:	0209      	lsls	r1, r1, #8
 8003d26:	0020      	movs	r0, r4
 8003d28:	f7ff fe7a 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8003d30:	2001      	movs	r0, #1
}
 8003d32:	b007      	add	sp, #28
 8003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d36:	2321      	movs	r3, #33	; 0x21
 8003d38:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d3a:	0025      	movs	r5, r4
 8003d3c:	3b11      	subs	r3, #17
 8003d3e:	3542      	adds	r5, #66	; 0x42
 8003d40:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8003d42:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d44:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003d46:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d48:	466b      	mov	r3, sp
 8003d4a:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8003d4c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003d4e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_I2C_Master_Transmit+0x124>)
 8003d54:	2aff      	cmp	r2, #255	; 0xff
 8003d56:	d921      	bls.n	8003d9c <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d58:	22ff      	movs	r2, #255	; 0xff
 8003d5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	045b      	lsls	r3, r3, #17
 8003d62:	9903      	ldr	r1, [sp, #12]
 8003d64:	0020      	movs	r0, r4
 8003d66:	f7ff fe45 	bl	80039f4 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6a:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8003d6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d6e:	003a      	movs	r2, r7
 8003d70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d72:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d119      	bne.n	8003dac <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d78:	f7ff fee2 	bl	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d1d7      	bne.n	8003d30 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d80:	2120      	movs	r1, #32
 8003d82:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003d84:	4e24      	ldr	r6, [pc, #144]	; (8003e18 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d86:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4032      	ands	r2, r6
 8003d8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003d90:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	3341      	adds	r3, #65	; 0x41
 8003d94:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d96:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003d98:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003d9a:	e7ca      	b.n	8003d32 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8003d9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	049b      	lsls	r3, r3, #18
 8003daa:	e7da      	b.n	8003d62 <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dac:	f7ff fe9e 	bl	8003aec <I2C_WaitOnTXISFlagUntilTimeout>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d1bd      	bne.n	8003d30 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003db6:	6822      	ldr	r2, [r4, #0]
 8003db8:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003dba:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dbc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003dbe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003dc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003dc2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003dca:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003dce:	b292      	uxth	r2, r2
 8003dd0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ca      	beq.n	8003d6c <HAL_I2C_Master_Transmit+0x7c>
 8003dd6:	2a00      	cmp	r2, #0
 8003dd8:	d1c8      	bne.n	8003d6c <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	9700      	str	r7, [sp, #0]
 8003ddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dde:	2180      	movs	r1, #128	; 0x80
 8003de0:	0020      	movs	r0, r4
 8003de2:	f7ff fe1d 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d1a2      	bne.n	8003d30 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dec:	2bff      	cmp	r3, #255	; 0xff
 8003dee:	d909      	bls.n	8003e04 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df4:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003df6:	045b      	lsls	r3, r3, #17
 8003df8:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dfa:	9903      	ldr	r1, [sp, #12]
 8003dfc:	0020      	movs	r0, r4
 8003dfe:	f7ff fdf9 	bl	80039f4 <I2C_TransferConfig>
 8003e02:	e7b3      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x7c>
 8003e04:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8003e06:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e08:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	e7f2      	b.n	8003dfa <HAL_I2C_Master_Transmit+0x10a>
 8003e14:	80002000 	.word	0x80002000
 8003e18:	fe00e800 	.word	0xfe00e800

08003e1c <HAL_I2C_Master_Receive>:
{
 8003e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1e:	0005      	movs	r5, r0
{
 8003e20:	b087      	sub	sp, #28
 8003e22:	9103      	str	r1, [sp, #12]
 8003e24:	9204      	str	r2, [sp, #16]
 8003e26:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e28:	3541      	adds	r5, #65	; 0x41
 8003e2a:	782b      	ldrb	r3, [r5, #0]
{
 8003e2c:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003e2e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d114      	bne.n	8003e5e <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8003e34:	0023      	movs	r3, r4
 8003e36:	3340      	adds	r3, #64	; 0x40
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	2a01      	cmp	r2, #1
 8003e3c:	d00f      	beq.n	8003e5e <HAL_I2C_Master_Receive+0x42>
 8003e3e:	2601      	movs	r6, #1
 8003e40:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003e42:	f7ff f8b9 	bl	8002fb8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e46:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003e48:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e4a:	9000      	str	r0, [sp, #0]
 8003e4c:	2319      	movs	r3, #25
 8003e4e:	0032      	movs	r2, r6
 8003e50:	0209      	lsls	r1, r1, #8
 8003e52:	0020      	movs	r0, r4
 8003e54:	f7ff fde4 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8003e5c:	2001      	movs	r0, #1
}
 8003e5e:	b007      	add	sp, #28
 8003e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e62:	2322      	movs	r3, #34	; 0x22
 8003e64:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e66:	0025      	movs	r5, r4
 8003e68:	3b12      	subs	r3, #18
 8003e6a:	3542      	adds	r5, #66	; 0x42
 8003e6c:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8003e6e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003e72:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e74:	466b      	mov	r3, sp
 8003e76:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8003e78:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003e7a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e7e:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_I2C_Master_Receive+0x128>)
 8003e80:	2aff      	cmp	r2, #255	; 0xff
 8003e82:	d921      	bls.n	8003ec8 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e84:	22ff      	movs	r2, #255	; 0xff
 8003e86:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	045b      	lsls	r3, r3, #17
 8003e8e:	9903      	ldr	r1, [sp, #12]
 8003e90:	0020      	movs	r0, r4
 8003e92:	f7ff fdaf 	bl	80039f4 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e96:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8003e98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9a:	003a      	movs	r2, r7
 8003e9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e9e:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d119      	bne.n	8003ed8 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea4:	f7ff fe4c 	bl	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d1d7      	bne.n	8003e5c <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eac:	2120      	movs	r1, #32
 8003eae:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003eb0:	4e25      	ldr	r6, [pc, #148]	; (8003f48 <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	4032      	ands	r2, r6
 8003eb8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003ebc:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	3341      	adds	r3, #65	; 0x41
 8003ec0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ec2:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003ec4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003ec6:	e7ca      	b.n	8003e5e <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8003ec8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	049b      	lsls	r3, r3, #18
 8003ed6:	e7da      	b.n	8003e8e <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed8:	f7ff fe5a 	bl	8003b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d1bd      	bne.n	8003e5c <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003eea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003eec:	3301      	adds	r3, #1
 8003eee:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003ef0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003ef2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003efa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003efc:	b292      	uxth	r2, r2
 8003efe:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0c9      	beq.n	8003e98 <HAL_I2C_Master_Receive+0x7c>
 8003f04:	2a00      	cmp	r2, #0
 8003f06:	d1c7      	bne.n	8003e98 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f08:	9700      	str	r7, [sp, #0]
 8003f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f0c:	2180      	movs	r1, #128	; 0x80
 8003f0e:	0020      	movs	r0, r4
 8003f10:	f7ff fd86 	bl	8003a20 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1a1      	bne.n	8003e5c <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f1a:	2bff      	cmp	r3, #255	; 0xff
 8003f1c:	d909      	bls.n	8003f32 <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f22:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f24:	045b      	lsls	r3, r3, #17
 8003f26:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f28:	9903      	ldr	r1, [sp, #12]
 8003f2a:	0020      	movs	r0, r4
 8003f2c:	f7ff fd62 	bl	80039f4 <I2C_TransferConfig>
 8003f30:	e7b2      	b.n	8003e98 <HAL_I2C_Master_Receive+0x7c>
 8003f32:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8003f34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f36:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	9000      	str	r0, [sp, #0]
 8003f40:	e7f2      	b.n	8003f28 <HAL_I2C_Master_Receive+0x10c>
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	80002400 	.word	0x80002400
 8003f48:	fe00e800 	.word	0xfe00e800

08003f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4e:	0004      	movs	r4, r0
 8003f50:	3441      	adds	r4, #65	; 0x41
 8003f52:	7822      	ldrb	r2, [r4, #0]
{
 8003f54:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f56:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5a:	2a20      	cmp	r2, #32
 8003f5c:	d118      	bne.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8003f5e:	001d      	movs	r5, r3
 8003f60:	3540      	adds	r5, #64	; 0x40
 8003f62:	782e      	ldrb	r6, [r5, #0]
 8003f64:	2e01      	cmp	r6, #1
 8003f66:	d013      	beq.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8003f68:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f6a:	3022      	adds	r0, #34	; 0x22
 8003f6c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003f6e:	681e      	ldr	r6, [r3, #0]
 8003f70:	3823      	subs	r0, #35	; 0x23
 8003f72:	4386      	bics	r6, r0
 8003f74:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f76:	681e      	ldr	r6, [r3, #0]
 8003f78:	4f06      	ldr	r7, [pc, #24]	; (8003f94 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8003f7a:	403e      	ands	r6, r7
 8003f7c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f7e:	681e      	ldr	r6, [r3, #0]
 8003f80:	4331      	orrs	r1, r6
 8003f82:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	4308      	orrs	r0, r1
 8003f88:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003f8a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003f8e:	7028      	strb	r0, [r5, #0]
  }
}
 8003f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	ffffefff 	.word	0xffffefff

08003f98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f98:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9a:	0005      	movs	r5, r0
 8003f9c:	3541      	adds	r5, #65	; 0x41
 8003f9e:	782a      	ldrb	r2, [r5, #0]
{
 8003fa0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003fa4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa6:	2a20      	cmp	r2, #32
 8003fa8:	d117      	bne.n	8003fda <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003faa:	001c      	movs	r4, r3
 8003fac:	3440      	adds	r4, #64	; 0x40
 8003fae:	7826      	ldrb	r6, [r4, #0]
 8003fb0:	2e01      	cmp	r6, #1
 8003fb2:	d012      	beq.n	8003fda <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8003fb4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb6:	3022      	adds	r0, #34	; 0x22
 8003fb8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003fba:	681e      	ldr	r6, [r3, #0]
 8003fbc:	3823      	subs	r0, #35	; 0x23
 8003fbe:	4386      	bics	r6, r0
 8003fc0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003fc2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003fc4:	4f05      	ldr	r7, [pc, #20]	; (8003fdc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8003fc6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003fc8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003fca:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003fcc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	4308      	orrs	r0, r1
 8003fd2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003fd4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003fd8:	7020      	strb	r0, [r4, #0]
  }
}
 8003fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fdc:	fffff0ff 	.word	0xfffff0ff

08003fe0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	4a03      	ldr	r2, [pc, #12]	; (8003ff0 <HAL_PWR_EnableBkUpAccess+0x10>)
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	6811      	ldr	r1, [r2, #0]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6013      	str	r3, [r2, #0]
}
 8003fec:	4770      	bx	lr
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	40007000 	.word	0x40007000

08003ff4 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8003ff4:	2110      	movs	r1, #16
 8003ff6:	4a02      	ldr	r2, [pc, #8]	; (8004000 <HAL_PWR_DisablePVD+0xc>)
 8003ff8:	6813      	ldr	r3, [r2, #0]
 8003ffa:	438b      	bics	r3, r1
 8003ffc:	6013      	str	r3, [r2, #0]
}
 8003ffe:	4770      	bx	lr
 8004000:	40007000 	.word	0x40007000

08004004 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004004:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004006:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_PWR_EnterSTOPMode+0x30>)
 800400a:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800400c:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800400e:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8004010:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004012:	2204      	movs	r2, #4
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_PWR_EnterSTOPMode+0x34>)
 8004016:	6918      	ldr	r0, [r3, #16]
 8004018:	4302      	orrs	r2, r0
 800401a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800401c:	2901      	cmp	r1, #1
 800401e:	d105      	bne.n	800402c <HAL_PWR_EnterSTOPMode+0x28>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8004020:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004022:	2104      	movs	r1, #4
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	438a      	bics	r2, r1
 8004028:	611a      	str	r2, [r3, #16]

}
 800402a:	bd10      	pop	{r4, pc}
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800402c:	bf40      	sev
  __ASM volatile ("wfe");
 800402e:	bf20      	wfe
 8004030:	bf20      	wfe
 8004032:	e7f6      	b.n	8004022 <HAL_PWR_EnterSTOPMode+0x1e>
 8004034:	40007000 	.word	0x40007000
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800403c:	2302      	movs	r3, #2
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <HAL_PWR_EnterSTANDBYMode+0x18>)
 8004040:	6811      	ldr	r1, [r2, #0]
 8004042:	430b      	orrs	r3, r1
 8004044:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004046:	2304      	movs	r3, #4
 8004048:	4a03      	ldr	r2, [pc, #12]	; (8004058 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 800404a:	6911      	ldr	r1, [r2, #16]
 800404c:	430b      	orrs	r3, r1
 800404e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8004050:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8004052:	4770      	bx	lr
 8004054:	40007000 	.word	0x40007000
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	4a03      	ldr	r2, [pc, #12]	; (800406c <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	6811      	ldr	r1, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	4770      	bx	lr
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	40007000 	.word	0x40007000

08004070 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004070:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8004074:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8004076:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004078:	400a      	ands	r2, r1
 800407a:	2a08      	cmp	r2, #8
 800407c:	d024      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x58>
 800407e:	2a0c      	cmp	r2, #12
 8004080:	d006      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x20>
 8004082:	2a04      	cmp	r2, #4
 8004084:	d118      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x48>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	06db      	lsls	r3, r3, #27
 800408a:	d41d      	bmi.n	80040c8 <HAL_RCC_GetSysClockFreq+0x58>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800408c:	4810      	ldr	r0, [pc, #64]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800408e:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004090:	028a      	lsls	r2, r1, #10
 8004092:	4810      	ldr	r0, [pc, #64]	; (80040d4 <HAL_RCC_GetSysClockFreq+0x64>)
 8004094:	0f12      	lsrs	r2, r2, #28
 8004096:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004098:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800409a:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800409c:	0f89      	lsrs	r1, r1, #30
 800409e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a0:	03c0      	lsls	r0, r0, #15
 80040a2:	d504      	bpl.n	80040ae <HAL_RCC_GetSysClockFreq+0x3e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80040a4:	480c      	ldr	r0, [pc, #48]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x68>)
         pllvco = (HSI_VALUE * pllm) / plld;
 80040a6:	4350      	muls	r0, r2
 80040a8:	f7fc f854 	bl	8000154 <__udivsi3>
 80040ac:	e7ef      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	06db      	lsls	r3, r3, #27
 80040b2:	d4f7      	bmi.n	80040a4 <HAL_RCC_GetSysClockFreq+0x34>
         pllvco = (HSI_VALUE * pllm) / plld;
 80040b4:	4806      	ldr	r0, [pc, #24]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x60>)
 80040b6:	e7f6      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040b8:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80040ba:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040bc:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040c2:	3301      	adds	r3, #1
 80040c4:	4098      	lsls	r0, r3
 80040c6:	e7e2      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 80040c8:	4803      	ldr	r0, [pc, #12]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x68>)
  return sysclockfreq;
 80040ca:	e7e0      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x1e>
 80040cc:	40021000 	.word	0x40021000
 80040d0:	00f42400 	.word	0x00f42400
 80040d4:	0800a4a6 	.word	0x0800a4a6
 80040d8:	003d0900 	.word	0x003d0900

080040dc <HAL_RCC_OscConfig>:
{
 80040dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040de:	0005      	movs	r5, r0
 80040e0:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d102      	bne.n	80040ec <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80040e6:	2001      	movs	r0, #1
}
 80040e8:	b007      	add	sp, #28
 80040ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ec:	230c      	movs	r3, #12
 80040ee:	4cc2      	ldr	r4, [pc, #776]	; (80043f8 <HAL_RCC_OscConfig+0x31c>)
 80040f0:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f2:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f4:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	401a      	ands	r2, r3
 80040fc:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	6802      	ldr	r2, [r0, #0]
 8004100:	07d2      	lsls	r2, r2, #31
 8004102:	d441      	bmi.n	8004188 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	079b      	lsls	r3, r3, #30
 8004108:	d500      	bpl.n	800410c <HAL_RCC_OscConfig+0x30>
 800410a:	e087      	b.n	800421c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	06db      	lsls	r3, r3, #27
 8004110:	d528      	bpl.n	8004164 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004112:	2e00      	cmp	r6, #0
 8004114:	d000      	beq.n	8004118 <HAL_RCC_OscConfig+0x3c>
 8004116:	e0e1      	b.n	80042dc <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	059b      	lsls	r3, r3, #22
 800411c:	d502      	bpl.n	8004124 <HAL_RCC_OscConfig+0x48>
 800411e:	69eb      	ldr	r3, [r5, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0e0      	beq.n	80040e6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004124:	6862      	ldr	r2, [r4, #4]
 8004126:	49b5      	ldr	r1, [pc, #724]	; (80043fc <HAL_RCC_OscConfig+0x320>)
 8004128:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800412a:	400a      	ands	r2, r1
 800412c:	431a      	orrs	r2, r3
 800412e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004130:	6861      	ldr	r1, [r4, #4]
 8004132:	6a2a      	ldr	r2, [r5, #32]
 8004134:	0209      	lsls	r1, r1, #8
 8004136:	0a09      	lsrs	r1, r1, #8
 8004138:	0612      	lsls	r2, r2, #24
 800413a:	430a      	orrs	r2, r1
 800413c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	0b5b      	lsrs	r3, r3, #13
 8004142:	3301      	adds	r3, #1
 8004144:	0212      	lsls	r2, r2, #8
 8004146:	409a      	lsls	r2, r3
 8004148:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800414a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800414c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800414e:	060a      	lsls	r2, r1, #24
 8004150:	49ab      	ldr	r1, [pc, #684]	; (8004400 <HAL_RCC_OscConfig+0x324>)
 8004152:	0f12      	lsrs	r2, r2, #28
 8004154:	5c8a      	ldrb	r2, [r1, r2]
 8004156:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004158:	4aaa      	ldr	r2, [pc, #680]	; (8004404 <HAL_RCC_OscConfig+0x328>)
 800415a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800415c:	f7fe fee8 	bl	8002f30 <HAL_InitTick>
        if(status != HAL_OK)
 8004160:	2800      	cmp	r0, #0
 8004162:	d1c1      	bne.n	80040e8 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	071b      	lsls	r3, r3, #28
 8004168:	d500      	bpl.n	800416c <HAL_RCC_OscConfig+0x90>
 800416a:	e0ee      	b.n	800434a <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	075b      	lsls	r3, r3, #29
 8004170:	d500      	bpl.n	8004174 <HAL_RCC_OscConfig+0x98>
 8004172:	e110      	b.n	8004396 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	069b      	lsls	r3, r3, #26
 8004178:	d500      	bpl.n	800417c <HAL_RCC_OscConfig+0xa0>
 800417a:	e195      	b.n	80044a8 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d000      	beq.n	8004184 <HAL_RCC_OscConfig+0xa8>
 8004182:	e1c4      	b.n	800450e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8004184:	2000      	movs	r0, #0
 8004186:	e7af      	b.n	80040e8 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004188:	2e08      	cmp	r6, #8
 800418a:	d004      	beq.n	8004196 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800418c:	2e0c      	cmp	r6, #12
 800418e:	d109      	bne.n	80041a4 <HAL_RCC_OscConfig+0xc8>
 8004190:	9a01      	ldr	r2, [sp, #4]
 8004192:	2a00      	cmp	r2, #0
 8004194:	d006      	beq.n	80041a4 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	039b      	lsls	r3, r3, #14
 800419a:	d5b3      	bpl.n	8004104 <HAL_RCC_OscConfig+0x28>
 800419c:	686b      	ldr	r3, [r5, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1b0      	bne.n	8004104 <HAL_RCC_OscConfig+0x28>
 80041a2:	e7a0      	b.n	80040e6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	686a      	ldr	r2, [r5, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d111      	bne.n	80041ce <HAL_RCC_OscConfig+0xf2>
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041b0:	f7fe ff02 	bl	8002fb8 <HAL_GetTick>
 80041b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	0292      	lsls	r2, r2, #10
 80041bc:	4213      	tst	r3, r2
 80041be:	d1a1      	bne.n	8004104 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fe fefa 	bl	8002fb8 <HAL_GetTick>
 80041c4:	1bc0      	subs	r0, r0, r7
 80041c6:	2864      	cmp	r0, #100	; 0x64
 80041c8:	d9f5      	bls.n	80041b6 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 80041ca:	2003      	movs	r0, #3
 80041cc:	e78c      	b.n	80040e8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ce:	21a0      	movs	r1, #160	; 0xa0
 80041d0:	02c9      	lsls	r1, r1, #11
 80041d2:	428a      	cmp	r2, r1
 80041d4:	d105      	bne.n	80041e2 <HAL_RCC_OscConfig+0x106>
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	6821      	ldr	r1, [r4, #0]
 80041da:	02d2      	lsls	r2, r2, #11
 80041dc:	430a      	orrs	r2, r1
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	e7e3      	b.n	80041aa <HAL_RCC_OscConfig+0xce>
 80041e2:	6821      	ldr	r1, [r4, #0]
 80041e4:	4888      	ldr	r0, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0x32c>)
 80041e6:	4001      	ands	r1, r0
 80041e8:	6021      	str	r1, [r4, #0]
 80041ea:	6821      	ldr	r1, [r4, #0]
 80041ec:	400b      	ands	r3, r1
 80041ee:	9305      	str	r3, [sp, #20]
 80041f0:	9b05      	ldr	r3, [sp, #20]
 80041f2:	4986      	ldr	r1, [pc, #536]	; (800440c <HAL_RCC_OscConfig+0x330>)
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	400b      	ands	r3, r1
 80041f8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d1d8      	bne.n	80041b0 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 80041fe:	f7fe fedb 	bl	8002fb8 <HAL_GetTick>
 8004202:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	0292      	lsls	r2, r2, #10
 800420a:	4213      	tst	r3, r2
 800420c:	d100      	bne.n	8004210 <HAL_RCC_OscConfig+0x134>
 800420e:	e779      	b.n	8004104 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004210:	f7fe fed2 	bl	8002fb8 <HAL_GetTick>
 8004214:	1bc0      	subs	r0, r0, r7
 8004216:	2864      	cmp	r0, #100	; 0x64
 8004218:	d9f4      	bls.n	8004204 <HAL_RCC_OscConfig+0x128>
 800421a:	e7d6      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800421c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800421e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004220:	4213      	tst	r3, r2
 8004222:	d003      	beq.n	800422c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004224:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004226:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004228:	4311      	orrs	r1, r2
 800422a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800422c:	2e04      	cmp	r6, #4
 800422e:	d004      	beq.n	800423a <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004230:	2e0c      	cmp	r6, #12
 8004232:	d125      	bne.n	8004280 <HAL_RCC_OscConfig+0x1a4>
 8004234:	9a01      	ldr	r2, [sp, #4]
 8004236:	2a00      	cmp	r2, #0
 8004238:	d122      	bne.n	8004280 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	0752      	lsls	r2, r2, #29
 800423e:	d502      	bpl.n	8004246 <HAL_RCC_OscConfig+0x16a>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d100      	bne.n	8004246 <HAL_RCC_OscConfig+0x16a>
 8004244:	e74f      	b.n	80040e6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	6861      	ldr	r1, [r4, #4]
 8004248:	692a      	ldr	r2, [r5, #16]
 800424a:	4871      	ldr	r0, [pc, #452]	; (8004410 <HAL_RCC_OscConfig+0x334>)
 800424c:	0212      	lsls	r2, r2, #8
 800424e:	4001      	ands	r1, r0
 8004250:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004252:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004254:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004256:	6822      	ldr	r2, [r4, #0]
 8004258:	438a      	bics	r2, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800425e:	f7ff ff07 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	4a66      	ldr	r2, [pc, #408]	; (8004400 <HAL_RCC_OscConfig+0x324>)
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	0f1b      	lsrs	r3, r3, #28
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	40d8      	lsrs	r0, r3
 800426e:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_RCC_OscConfig+0x328>)
 8004270:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004272:	2000      	movs	r0, #0
 8004274:	f7fe fe5c 	bl	8002f30 <HAL_InitTick>
      if(status != HAL_OK)
 8004278:	2800      	cmp	r0, #0
 800427a:	d100      	bne.n	800427e <HAL_RCC_OscConfig+0x1a2>
 800427c:	e746      	b.n	800410c <HAL_RCC_OscConfig+0x30>
 800427e:	e733      	b.n	80040e8 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8004280:	2b00      	cmp	r3, #0
 8004282:	d019      	beq.n	80042b8 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004284:	2109      	movs	r1, #9
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	438a      	bics	r2, r1
 800428a:	4313      	orrs	r3, r2
 800428c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800428e:	f7fe fe93 	bl	8002fb8 <HAL_GetTick>
 8004292:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004294:	2204      	movs	r2, #4
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	4213      	tst	r3, r2
 800429a:	d007      	beq.n	80042ac <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	6862      	ldr	r2, [r4, #4]
 800429e:	692b      	ldr	r3, [r5, #16]
 80042a0:	495b      	ldr	r1, [pc, #364]	; (8004410 <HAL_RCC_OscConfig+0x334>)
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	400a      	ands	r2, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	e72f      	b.n	800410c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ac:	f7fe fe84 	bl	8002fb8 <HAL_GetTick>
 80042b0:	1bc0      	subs	r0, r0, r7
 80042b2:	2802      	cmp	r0, #2
 80042b4:	d9ee      	bls.n	8004294 <HAL_RCC_OscConfig+0x1b8>
 80042b6:	e788      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80042b8:	2201      	movs	r2, #1
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4393      	bics	r3, r2
 80042be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042c0:	f7fe fe7a 	bl	8002fb8 <HAL_GetTick>
 80042c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042c6:	2204      	movs	r2, #4
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	4213      	tst	r3, r2
 80042cc:	d100      	bne.n	80042d0 <HAL_RCC_OscConfig+0x1f4>
 80042ce:	e71d      	b.n	800410c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d0:	f7fe fe72 	bl	8002fb8 <HAL_GetTick>
 80042d4:	1bc0      	subs	r0, r0, r7
 80042d6:	2802      	cmp	r0, #2
 80042d8:	d9f5      	bls.n	80042c6 <HAL_RCC_OscConfig+0x1ea>
 80042da:	e776      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042dc:	69eb      	ldr	r3, [r5, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d020      	beq.n	8004324 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4313      	orrs	r3, r2
 80042ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80042ec:	f7fe fe64 	bl	8002fb8 <HAL_GetTick>
 80042f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	0092      	lsls	r2, r2, #2
 80042f8:	4213      	tst	r3, r2
 80042fa:	d00d      	beq.n	8004318 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	4a3f      	ldr	r2, [pc, #252]	; (80043fc <HAL_RCC_OscConfig+0x320>)
 8004300:	4013      	ands	r3, r2
 8004302:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004304:	4313      	orrs	r3, r2
 8004306:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004308:	6862      	ldr	r2, [r4, #4]
 800430a:	6a2b      	ldr	r3, [r5, #32]
 800430c:	0212      	lsls	r2, r2, #8
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	0a12      	lsrs	r2, r2, #8
 8004312:	4313      	orrs	r3, r2
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	e725      	b.n	8004164 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004318:	f7fe fe4e 	bl	8002fb8 <HAL_GetTick>
 800431c:	1bc0      	subs	r0, r0, r7
 800431e:	2802      	cmp	r0, #2
 8004320:	d9e7      	bls.n	80042f2 <HAL_RCC_OscConfig+0x216>
 8004322:	e752      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x338>)
 8004328:	4013      	ands	r3, r2
 800432a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800432c:	f7fe fe44 	bl	8002fb8 <HAL_GetTick>
 8004330:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	0092      	lsls	r2, r2, #2
 8004338:	4213      	tst	r3, r2
 800433a:	d100      	bne.n	800433e <HAL_RCC_OscConfig+0x262>
 800433c:	e712      	b.n	8004164 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800433e:	f7fe fe3b 	bl	8002fb8 <HAL_GetTick>
 8004342:	1bc0      	subs	r0, r0, r7
 8004344:	2802      	cmp	r0, #2
 8004346:	d9f4      	bls.n	8004332 <HAL_RCC_OscConfig+0x256>
 8004348:	e73f      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800434a:	696a      	ldr	r2, [r5, #20]
 800434c:	2301      	movs	r3, #1
 800434e:	2a00      	cmp	r2, #0
 8004350:	d010      	beq.n	8004374 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8004352:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004354:	4313      	orrs	r3, r2
 8004356:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004358:	f7fe fe2e 	bl	8002fb8 <HAL_GetTick>
 800435c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800435e:	2202      	movs	r2, #2
 8004360:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004362:	4213      	tst	r3, r2
 8004364:	d000      	beq.n	8004368 <HAL_RCC_OscConfig+0x28c>
 8004366:	e701      	b.n	800416c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004368:	f7fe fe26 	bl	8002fb8 <HAL_GetTick>
 800436c:	1bc0      	subs	r0, r0, r7
 800436e:	2802      	cmp	r0, #2
 8004370:	d9f5      	bls.n	800435e <HAL_RCC_OscConfig+0x282>
 8004372:	e72a      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8004374:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004376:	439a      	bics	r2, r3
 8004378:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800437a:	f7fe fe1d 	bl	8002fb8 <HAL_GetTick>
 800437e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004380:	2202      	movs	r2, #2
 8004382:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004384:	4213      	tst	r3, r2
 8004386:	d100      	bne.n	800438a <HAL_RCC_OscConfig+0x2ae>
 8004388:	e6f0      	b.n	800416c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438a:	f7fe fe15 	bl	8002fb8 <HAL_GetTick>
 800438e:	1bc0      	subs	r0, r0, r7
 8004390:	2802      	cmp	r0, #2
 8004392:	d9f5      	bls.n	8004380 <HAL_RCC_OscConfig+0x2a4>
 8004394:	e719      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004396:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004398:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800439c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800439e:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a0:	421a      	tst	r2, r3
 80043a2:	d104      	bne.n	80043ae <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043a6:	4313      	orrs	r3, r2
 80043a8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	4f19      	ldr	r7, [pc, #100]	; (8004418 <HAL_RCC_OscConfig+0x33c>)
 80043b2:	0052      	lsls	r2, r2, #1
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4213      	tst	r3, r2
 80043b8:	d008      	beq.n	80043cc <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	68ab      	ldr	r3, [r5, #8]
 80043be:	0052      	lsls	r2, r2, #1
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d12b      	bne.n	800441c <HAL_RCC_OscConfig+0x340>
 80043c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80043c6:	4313      	orrs	r3, r2
 80043c8:	6523      	str	r3, [r4, #80]	; 0x50
 80043ca:	e04c      	b.n	8004466 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	0052      	lsls	r2, r2, #1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80043d6:	f7fe fdef 	bl	8002fb8 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80043de:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	9303      	str	r3, [sp, #12]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	9a03      	ldr	r2, [sp, #12]
 80043e6:	4213      	tst	r3, r2
 80043e8:	d1e7      	bne.n	80043ba <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fe fde5 	bl	8002fb8 <HAL_GetTick>
 80043ee:	9b02      	ldr	r3, [sp, #8]
 80043f0:	1ac0      	subs	r0, r0, r3
 80043f2:	2864      	cmp	r0, #100	; 0x64
 80043f4:	d9f5      	bls.n	80043e2 <HAL_RCC_OscConfig+0x306>
 80043f6:	e6e8      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
 80043f8:	40021000 	.word	0x40021000
 80043fc:	ffff1fff 	.word	0xffff1fff
 8004400:	0800a48e 	.word	0x0800a48e
 8004404:	2000005c 	.word	0x2000005c
 8004408:	fffeffff 	.word	0xfffeffff
 800440c:	fffbffff 	.word	0xfffbffff
 8004410:	ffffe0ff 	.word	0xffffe0ff
 8004414:	fffffeff 	.word	0xfffffeff
 8004418:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800441c:	2b00      	cmp	r3, #0
 800441e:	d116      	bne.n	800444e <HAL_RCC_OscConfig+0x372>
 8004420:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004422:	4a6c      	ldr	r2, [pc, #432]	; (80045d4 <HAL_RCC_OscConfig+0x4f8>)
 8004424:	4013      	ands	r3, r2
 8004426:	6523      	str	r3, [r4, #80]	; 0x50
 8004428:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800442a:	4a6b      	ldr	r2, [pc, #428]	; (80045d8 <HAL_RCC_OscConfig+0x4fc>)
 800442c:	4013      	ands	r3, r2
 800442e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004430:	f7fe fdc2 	bl	8002fb8 <HAL_GetTick>
 8004434:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	4213      	tst	r3, r2
 800443e:	d02a      	beq.n	8004496 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004440:	f7fe fdba 	bl	8002fb8 <HAL_GetTick>
 8004444:	4b65      	ldr	r3, [pc, #404]	; (80045dc <HAL_RCC_OscConfig+0x500>)
 8004446:	1bc0      	subs	r0, r0, r7
 8004448:	4298      	cmp	r0, r3
 800444a:	d9f4      	bls.n	8004436 <HAL_RCC_OscConfig+0x35a>
 800444c:	e6bd      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800444e:	21a0      	movs	r1, #160	; 0xa0
 8004450:	00c9      	lsls	r1, r1, #3
 8004452:	428b      	cmp	r3, r1
 8004454:	d10b      	bne.n	800446e <HAL_RCC_OscConfig+0x392>
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	430b      	orrs	r3, r1
 800445e:	6523      	str	r3, [r4, #80]	; 0x50
 8004460:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004462:	431a      	orrs	r2, r3
 8004464:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004466:	f7fe fda7 	bl	8002fb8 <HAL_GetTick>
 800446a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800446c:	e00e      	b.n	800448c <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004470:	4a58      	ldr	r2, [pc, #352]	; (80045d4 <HAL_RCC_OscConfig+0x4f8>)
 8004472:	4013      	ands	r3, r2
 8004474:	6523      	str	r3, [r4, #80]	; 0x50
 8004476:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004478:	4a57      	ldr	r2, [pc, #348]	; (80045d8 <HAL_RCC_OscConfig+0x4fc>)
 800447a:	4013      	ands	r3, r2
 800447c:	e7a4      	b.n	80043c8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fe fd9b 	bl	8002fb8 <HAL_GetTick>
 8004482:	4b56      	ldr	r3, [pc, #344]	; (80045dc <HAL_RCC_OscConfig+0x500>)
 8004484:	1bc0      	subs	r0, r0, r7
 8004486:	4298      	cmp	r0, r3
 8004488:	d900      	bls.n	800448c <HAL_RCC_OscConfig+0x3b0>
 800448a:	e69e      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004490:	0092      	lsls	r2, r2, #2
 8004492:	4213      	tst	r3, r2
 8004494:	d0f3      	beq.n	800447e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8004496:	9b01      	ldr	r3, [sp, #4]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d000      	beq.n	800449e <HAL_RCC_OscConfig+0x3c2>
 800449c:	e66a      	b.n	8004174 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 800449e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044a0:	4a4f      	ldr	r2, [pc, #316]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80044a6:	e665      	b.n	8004174 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044a8:	69a9      	ldr	r1, [r5, #24]
 80044aa:	2301      	movs	r3, #1
 80044ac:	4a4d      	ldr	r2, [pc, #308]	; (80045e4 <HAL_RCC_OscConfig+0x508>)
 80044ae:	2900      	cmp	r1, #0
 80044b0:	d018      	beq.n	80044e4 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 80044b2:	68a1      	ldr	r1, [r4, #8]
 80044b4:	4319      	orrs	r1, r3
 80044b6:	60a1      	str	r1, [r4, #8]
 80044b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ba:	430b      	orrs	r3, r1
 80044bc:	6363      	str	r3, [r4, #52]	; 0x34
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	6a11      	ldr	r1, [r2, #32]
 80044c2:	019b      	lsls	r3, r3, #6
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80044c8:	f7fe fd76 	bl	8002fb8 <HAL_GetTick>
 80044cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044ce:	2202      	movs	r2, #2
 80044d0:	68a3      	ldr	r3, [r4, #8]
 80044d2:	4213      	tst	r3, r2
 80044d4:	d000      	beq.n	80044d8 <HAL_RCC_OscConfig+0x3fc>
 80044d6:	e651      	b.n	800417c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d8:	f7fe fd6e 	bl	8002fb8 <HAL_GetTick>
 80044dc:	1bc0      	subs	r0, r0, r7
 80044de:	2802      	cmp	r0, #2
 80044e0:	d9f5      	bls.n	80044ce <HAL_RCC_OscConfig+0x3f2>
 80044e2:	e672      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 80044e4:	68a1      	ldr	r1, [r4, #8]
 80044e6:	4399      	bics	r1, r3
 80044e8:	60a1      	str	r1, [r4, #8]
 80044ea:	6a13      	ldr	r3, [r2, #32]
 80044ec:	493e      	ldr	r1, [pc, #248]	; (80045e8 <HAL_RCC_OscConfig+0x50c>)
 80044ee:	400b      	ands	r3, r1
 80044f0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80044f2:	f7fe fd61 	bl	8002fb8 <HAL_GetTick>
 80044f6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044f8:	2202      	movs	r2, #2
 80044fa:	68a3      	ldr	r3, [r4, #8]
 80044fc:	4213      	tst	r3, r2
 80044fe:	d100      	bne.n	8004502 <HAL_RCC_OscConfig+0x426>
 8004500:	e63c      	b.n	800417c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004502:	f7fe fd59 	bl	8002fb8 <HAL_GetTick>
 8004506:	1bc0      	subs	r0, r0, r7
 8004508:	2802      	cmp	r0, #2
 800450a:	d9f5      	bls.n	80044f8 <HAL_RCC_OscConfig+0x41c>
 800450c:	e65d      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800450e:	2e0c      	cmp	r6, #12
 8004510:	d043      	beq.n	800459a <HAL_RCC_OscConfig+0x4be>
 8004512:	4a36      	ldr	r2, [pc, #216]	; (80045ec <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004514:	2b02      	cmp	r3, #2
 8004516:	d12e      	bne.n	8004576 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8004518:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800451a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800451c:	4013      	ands	r3, r2
 800451e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004520:	f7fe fd4a 	bl	8002fb8 <HAL_GetTick>
 8004524:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004526:	04b6      	lsls	r6, r6, #18
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	4233      	tst	r3, r6
 800452c:	d11d      	bne.n	800456a <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004530:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004532:	68e2      	ldr	r2, [r4, #12]
 8004534:	430b      	orrs	r3, r1
 8004536:	492e      	ldr	r1, [pc, #184]	; (80045f0 <HAL_RCC_OscConfig+0x514>)
 8004538:	400a      	ands	r2, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800453e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004540:	4313      	orrs	r3, r2
 8004542:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	045b      	lsls	r3, r3, #17
 800454a:	4313      	orrs	r3, r2
 800454c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800454e:	f7fe fd33 	bl	8002fb8 <HAL_GetTick>
 8004552:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004554:	04ad      	lsls	r5, r5, #18
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	422b      	tst	r3, r5
 800455a:	d000      	beq.n	800455e <HAL_RCC_OscConfig+0x482>
 800455c:	e612      	b.n	8004184 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455e:	f7fe fd2b 	bl	8002fb8 <HAL_GetTick>
 8004562:	1b80      	subs	r0, r0, r6
 8004564:	2802      	cmp	r0, #2
 8004566:	d9f6      	bls.n	8004556 <HAL_RCC_OscConfig+0x47a>
 8004568:	e62f      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456a:	f7fe fd25 	bl	8002fb8 <HAL_GetTick>
 800456e:	1bc0      	subs	r0, r0, r7
 8004570:	2802      	cmp	r0, #2
 8004572:	d9d9      	bls.n	8004528 <HAL_RCC_OscConfig+0x44c>
 8004574:	e629      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8004576:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004578:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800457a:	4013      	ands	r3, r2
 800457c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800457e:	f7fe fd1b 	bl	8002fb8 <HAL_GetTick>
 8004582:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004584:	04ad      	lsls	r5, r5, #18
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	422b      	tst	r3, r5
 800458a:	d100      	bne.n	800458e <HAL_RCC_OscConfig+0x4b2>
 800458c:	e5fa      	b.n	8004184 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458e:	f7fe fd13 	bl	8002fb8 <HAL_GetTick>
 8004592:	1b80      	subs	r0, r0, r6
 8004594:	2802      	cmp	r0, #2
 8004596:	d9f6      	bls.n	8004586 <HAL_RCC_OscConfig+0x4aa>
 8004598:	e617      	b.n	80041ca <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 800459a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800459c:	2b01      	cmp	r3, #1
 800459e:	d100      	bne.n	80045a2 <HAL_RCC_OscConfig+0x4c6>
 80045a0:	e5a2      	b.n	80040e8 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80045a4:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80045a8:	0252      	lsls	r2, r2, #9
 80045aa:	401a      	ands	r2, r3
        return HAL_ERROR;
 80045ac:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	428a      	cmp	r2, r1
 80045b0:	d000      	beq.n	80045b4 <HAL_RCC_OscConfig+0x4d8>
 80045b2:	e599      	b.n	80040e8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045b4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045b8:	0392      	lsls	r2, r2, #14
 80045ba:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045bc:	428a      	cmp	r2, r1
 80045be:	d000      	beq.n	80045c2 <HAL_RCC_OscConfig+0x4e6>
 80045c0:	e592      	b.n	80040e8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80045c2:	20c0      	movs	r0, #192	; 0xc0
 80045c4:	0400      	lsls	r0, r0, #16
 80045c6:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045c8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80045ca:	1a18      	subs	r0, r3, r0
 80045cc:	1e43      	subs	r3, r0, #1
 80045ce:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80045d0:	b2c0      	uxtb	r0, r0
 80045d2:	e589      	b.n	80040e8 <HAL_RCC_OscConfig+0xc>
 80045d4:	fffffeff 	.word	0xfffffeff
 80045d8:	fffffbff 	.word	0xfffffbff
 80045dc:	00001388 	.word	0x00001388
 80045e0:	efffffff 	.word	0xefffffff
 80045e4:	40010000 	.word	0x40010000
 80045e8:	ffffdfff 	.word	0xffffdfff
 80045ec:	feffffff 	.word	0xfeffffff
 80045f0:	ff02ffff 	.word	0xff02ffff

080045f4 <HAL_RCC_ClockConfig>:
{
 80045f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045f6:	1e06      	subs	r6, r0, #0
 80045f8:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80045fa:	d101      	bne.n	8004600 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80045fc:	2001      	movs	r0, #1
}
 80045fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004600:	2201      	movs	r2, #1
 8004602:	4c51      	ldr	r4, [pc, #324]	; (8004748 <HAL_RCC_ClockConfig+0x154>)
 8004604:	9901      	ldr	r1, [sp, #4]
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	4013      	ands	r3, r2
 800460a:	428b      	cmp	r3, r1
 800460c:	d327      	bcc.n	800465e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460e:	6832      	ldr	r2, [r6, #0]
 8004610:	0793      	lsls	r3, r2, #30
 8004612:	d42f      	bmi.n	8004674 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004614:	07d3      	lsls	r3, r2, #31
 8004616:	d435      	bmi.n	8004684 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004618:	2301      	movs	r3, #1
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	9901      	ldr	r1, [sp, #4]
 800461e:	401a      	ands	r2, r3
 8004620:	4291      	cmp	r1, r2
 8004622:	d200      	bcs.n	8004626 <HAL_RCC_ClockConfig+0x32>
 8004624:	e081      	b.n	800472a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004626:	6832      	ldr	r2, [r6, #0]
 8004628:	4c48      	ldr	r4, [pc, #288]	; (800474c <HAL_RCC_ClockConfig+0x158>)
 800462a:	0753      	lsls	r3, r2, #29
 800462c:	d500      	bpl.n	8004630 <HAL_RCC_ClockConfig+0x3c>
 800462e:	e084      	b.n	800473a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004630:	0713      	lsls	r3, r2, #28
 8004632:	d506      	bpl.n	8004642 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004634:	68e2      	ldr	r2, [r4, #12]
 8004636:	6933      	ldr	r3, [r6, #16]
 8004638:	4945      	ldr	r1, [pc, #276]	; (8004750 <HAL_RCC_ClockConfig+0x15c>)
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	400a      	ands	r2, r1
 800463e:	4313      	orrs	r3, r2
 8004640:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004642:	f7ff fd15 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8004646:	68e3      	ldr	r3, [r4, #12]
 8004648:	4a42      	ldr	r2, [pc, #264]	; (8004754 <HAL_RCC_ClockConfig+0x160>)
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	0f1b      	lsrs	r3, r3, #28
 800464e:	5cd3      	ldrb	r3, [r2, r3]
 8004650:	40d8      	lsrs	r0, r3
 8004652:	4b41      	ldr	r3, [pc, #260]	; (8004758 <HAL_RCC_ClockConfig+0x164>)
 8004654:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004656:	2000      	movs	r0, #0
 8004658:	f7fe fc6a 	bl	8002f30 <HAL_InitTick>
 800465c:	e7cf      	b.n	80045fe <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	9901      	ldr	r1, [sp, #4]
 8004662:	4393      	bics	r3, r2
 8004664:	430b      	orrs	r3, r1
 8004666:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	4013      	ands	r3, r2
 800466c:	9a01      	ldr	r2, [sp, #4]
 800466e:	429a      	cmp	r2, r3
 8004670:	d1c4      	bne.n	80045fc <HAL_RCC_ClockConfig+0x8>
 8004672:	e7cc      	b.n	800460e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004674:	20f0      	movs	r0, #240	; 0xf0
 8004676:	4935      	ldr	r1, [pc, #212]	; (800474c <HAL_RCC_ClockConfig+0x158>)
 8004678:	68cb      	ldr	r3, [r1, #12]
 800467a:	4383      	bics	r3, r0
 800467c:	68b0      	ldr	r0, [r6, #8]
 800467e:	4303      	orrs	r3, r0
 8004680:	60cb      	str	r3, [r1, #12]
 8004682:	e7c7      	b.n	8004614 <HAL_RCC_ClockConfig+0x20>
 8004684:	4d31      	ldr	r5, [pc, #196]	; (800474c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004686:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004688:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468a:	2a02      	cmp	r2, #2
 800468c:	d119      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800468e:	039b      	lsls	r3, r3, #14
 8004690:	d5b4      	bpl.n	80045fc <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004692:	2103      	movs	r1, #3
 8004694:	68eb      	ldr	r3, [r5, #12]
 8004696:	438b      	bics	r3, r1
 8004698:	4313      	orrs	r3, r2
 800469a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800469c:	f7fe fc8c 	bl	8002fb8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80046a2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d119      	bne.n	80046dc <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a8:	220c      	movs	r2, #12
 80046aa:	68eb      	ldr	r3, [r5, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d0b2      	beq.n	8004618 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b2:	f7fe fc81 	bl	8002fb8 <HAL_GetTick>
 80046b6:	4b29      	ldr	r3, [pc, #164]	; (800475c <HAL_RCC_ClockConfig+0x168>)
 80046b8:	1bc0      	subs	r0, r0, r7
 80046ba:	4298      	cmp	r0, r3
 80046bc:	d9f4      	bls.n	80046a8 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80046be:	2003      	movs	r0, #3
 80046c0:	e79d      	b.n	80045fe <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c2:	2a03      	cmp	r2, #3
 80046c4:	d102      	bne.n	80046cc <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046c6:	019b      	lsls	r3, r3, #6
 80046c8:	d4e3      	bmi.n	8004692 <HAL_RCC_ClockConfig+0x9e>
 80046ca:	e797      	b.n	80045fc <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046cc:	2a01      	cmp	r2, #1
 80046ce:	d102      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d0:	075b      	lsls	r3, r3, #29
 80046d2:	d4de      	bmi.n	8004692 <HAL_RCC_ClockConfig+0x9e>
 80046d4:	e792      	b.n	80045fc <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046d6:	059b      	lsls	r3, r3, #22
 80046d8:	d4db      	bmi.n	8004692 <HAL_RCC_ClockConfig+0x9e>
 80046da:	e78f      	b.n	80045fc <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d10b      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e0:	220c      	movs	r2, #12
 80046e2:	68eb      	ldr	r3, [r5, #12]
 80046e4:	4013      	ands	r3, r2
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d096      	beq.n	8004618 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ea:	f7fe fc65 	bl	8002fb8 <HAL_GetTick>
 80046ee:	4b1b      	ldr	r3, [pc, #108]	; (800475c <HAL_RCC_ClockConfig+0x168>)
 80046f0:	1bc0      	subs	r0, r0, r7
 80046f2:	4298      	cmp	r0, r3
 80046f4:	d9f4      	bls.n	80046e0 <HAL_RCC_ClockConfig+0xec>
 80046f6:	e7e2      	b.n	80046be <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d010      	beq.n	800471e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046fc:	220c      	movs	r2, #12
 80046fe:	68eb      	ldr	r3, [r5, #12]
 8004700:	4213      	tst	r3, r2
 8004702:	d089      	beq.n	8004618 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7fe fc58 	bl	8002fb8 <HAL_GetTick>
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <HAL_RCC_ClockConfig+0x168>)
 800470a:	1bc0      	subs	r0, r0, r7
 800470c:	4298      	cmp	r0, r3
 800470e:	d9f5      	bls.n	80046fc <HAL_RCC_ClockConfig+0x108>
 8004710:	e7d5      	b.n	80046be <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004712:	f7fe fc51 	bl	8002fb8 <HAL_GetTick>
 8004716:	4b11      	ldr	r3, [pc, #68]	; (800475c <HAL_RCC_ClockConfig+0x168>)
 8004718:	1bc0      	subs	r0, r0, r7
 800471a:	4298      	cmp	r0, r3
 800471c:	d8cf      	bhi.n	80046be <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800471e:	220c      	movs	r2, #12
 8004720:	68eb      	ldr	r3, [r5, #12]
 8004722:	4013      	ands	r3, r2
 8004724:	2b04      	cmp	r3, #4
 8004726:	d1f4      	bne.n	8004712 <HAL_RCC_ClockConfig+0x11e>
 8004728:	e776      	b.n	8004618 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	439a      	bics	r2, r3
 800472e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	421a      	tst	r2, r3
 8004734:	d000      	beq.n	8004738 <HAL_RCC_ClockConfig+0x144>
 8004736:	e761      	b.n	80045fc <HAL_RCC_ClockConfig+0x8>
 8004738:	e775      	b.n	8004626 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800473a:	68e3      	ldr	r3, [r4, #12]
 800473c:	4908      	ldr	r1, [pc, #32]	; (8004760 <HAL_RCC_ClockConfig+0x16c>)
 800473e:	400b      	ands	r3, r1
 8004740:	68f1      	ldr	r1, [r6, #12]
 8004742:	430b      	orrs	r3, r1
 8004744:	60e3      	str	r3, [r4, #12]
 8004746:	e773      	b.n	8004630 <HAL_RCC_ClockConfig+0x3c>
 8004748:	40022000 	.word	0x40022000
 800474c:	40021000 	.word	0x40021000
 8004750:	ffffc7ff 	.word	0xffffc7ff
 8004754:	0800a48e 	.word	0x0800a48e
 8004758:	2000005c 	.word	0x2000005c
 800475c:	00001388 	.word	0x00001388
 8004760:	fffff8ff 	.word	0xfffff8ff

08004764 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	055b      	lsls	r3, r3, #21
 800476c:	0f5b      	lsrs	r3, r3, #29
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	4a03      	ldr	r2, [pc, #12]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004772:	6810      	ldr	r0, [r2, #0]
 8004774:	40d8      	lsrs	r0, r3
}
 8004776:	4770      	bx	lr
 8004778:	40021000 	.word	0x40021000
 800477c:	0800a49e 	.word	0x0800a49e
 8004780:	2000005c 	.word	0x2000005c

08004784 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004786:	4a05      	ldr	r2, [pc, #20]	; (800479c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	049b      	lsls	r3, r3, #18
 800478c:	0f5b      	lsrs	r3, r3, #29
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	4a03      	ldr	r2, [pc, #12]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004792:	6810      	ldr	r0, [r2, #0]
 8004794:	40d8      	lsrs	r0, r3
}
 8004796:	4770      	bx	lr
 8004798:	40021000 	.word	0x40021000
 800479c:	0800a49e 	.word	0x0800a49e
 80047a0:	2000005c 	.word	0x2000005c

080047a4 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80047a4:	2382      	movs	r3, #130	; 0x82
{
 80047a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047a8:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80047aa:	011b      	lsls	r3, r3, #4
{
 80047ac:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047ae:	421a      	tst	r2, r3
 80047b0:	d048      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80047b4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b6:	4c65      	ldr	r4, [pc, #404]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80047b8:	055b      	lsls	r3, r3, #21
 80047ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80047bc:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047be:	421a      	tst	r2, r3
 80047c0:	d104      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047c4:	4313      	orrs	r3, r2
 80047c6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80047c8:	2301      	movs	r3, #1
 80047ca:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	2780      	movs	r7, #128	; 0x80
 80047ce:	4e60      	ldr	r6, [pc, #384]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047d0:	007f      	lsls	r7, r7, #1
 80047d2:	6833      	ldr	r3, [r6, #0]
 80047d4:	423b      	tst	r3, r7
 80047d6:	d077      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80047d8:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80047da:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80047dc:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	0392      	lsls	r2, r2, #14
 80047e2:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80047e4:	4010      	ands	r0, r2
 80047e6:	4283      	cmp	r3, r0
 80047e8:	d103      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80047ea:	68a8      	ldr	r0, [r5, #8]
 80047ec:	4002      	ands	r2, r0
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80047f2:	23c0      	movs	r3, #192	; 0xc0
 80047f4:	000a      	movs	r2, r1
 80047f6:	029b      	lsls	r3, r3, #10
 80047f8:	401a      	ands	r2, r3
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d103      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80047fe:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004800:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004802:	039b      	lsls	r3, r3, #14
 8004804:	d471      	bmi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x146>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004806:	22c0      	movs	r2, #192	; 0xc0
 8004808:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800480a:	0292      	lsls	r2, r2, #10
 800480c:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800480e:	d000      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004810:	e06c      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004812:	6869      	ldr	r1, [r5, #4]
 8004814:	23c0      	movs	r3, #192	; 0xc0
 8004816:	000a      	movs	r2, r1
 8004818:	029b      	lsls	r3, r3, #10
 800481a:	401a      	ands	r2, r3
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	484c      	ldr	r0, [pc, #304]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004824:	4003      	ands	r3, r0
 8004826:	20c0      	movs	r0, #192	; 0xc0
 8004828:	0380      	lsls	r0, r0, #14
 800482a:	4001      	ands	r1, r0
 800482c:	430b      	orrs	r3, r1
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004832:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004834:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004836:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004838:	2b01      	cmp	r3, #1
 800483a:	d103      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800483e:	4a46      	ldr	r2, [pc, #280]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004840:	4013      	ands	r3, r2
 8004842:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	07da      	lsls	r2, r3, #31
 8004848:	d506      	bpl.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484a:	2003      	movs	r0, #3
 800484c:	493f      	ldr	r1, [pc, #252]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800484e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004850:	4382      	bics	r2, r0
 8004852:	68e8      	ldr	r0, [r5, #12]
 8004854:	4302      	orrs	r2, r0
 8004856:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004858:	079a      	lsls	r2, r3, #30
 800485a:	d506      	bpl.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485c:	200c      	movs	r0, #12
 800485e:	493b      	ldr	r1, [pc, #236]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004860:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004862:	4382      	bics	r2, r0
 8004864:	6928      	ldr	r0, [r5, #16]
 8004866:	4302      	orrs	r2, r0
 8004868:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800486a:	075a      	lsls	r2, r3, #29
 800486c:	d506      	bpl.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800486e:	4937      	ldr	r1, [pc, #220]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004870:	483a      	ldr	r0, [pc, #232]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004872:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004874:	4002      	ands	r2, r0
 8004876:	6968      	ldr	r0, [r5, #20]
 8004878:	4302      	orrs	r2, r0
 800487a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800487c:	071a      	lsls	r2, r3, #28
 800487e:	d506      	bpl.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004880:	4932      	ldr	r1, [pc, #200]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004882:	4837      	ldr	r0, [pc, #220]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004884:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004886:	4002      	ands	r2, r0
 8004888:	69a8      	ldr	r0, [r5, #24]
 800488a:	4302      	orrs	r2, r0
 800488c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800488e:	05da      	lsls	r2, r3, #23
 8004890:	d506      	bpl.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004892:	492e      	ldr	r1, [pc, #184]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004894:	4833      	ldr	r0, [pc, #204]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004896:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004898:	4002      	ands	r2, r0
 800489a:	69e8      	ldr	r0, [r5, #28]
 800489c:	4302      	orrs	r2, r0
 800489e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a0:	065a      	lsls	r2, r3, #25
 80048a2:	d506      	bpl.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a4:	4929      	ldr	r1, [pc, #164]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048a6:	4830      	ldr	r0, [pc, #192]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048a8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80048aa:	4002      	ands	r2, r0
 80048ac:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80048ae:	4302      	orrs	r2, r0
 80048b0:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80048b2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	d518      	bpl.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80048b8:	4a24      	ldr	r2, [pc, #144]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048ba:	492c      	ldr	r1, [pc, #176]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80048be:	400b      	ands	r3, r1
 80048c0:	6a29      	ldr	r1, [r5, #32]
 80048c2:	430b      	orrs	r3, r1
 80048c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048c6:	e010      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c8:	6833      	ldr	r3, [r6, #0]
 80048ca:	433b      	orrs	r3, r7
 80048cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80048ce:	f7fe fb73 	bl	8002fb8 <HAL_GetTick>
 80048d2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	6833      	ldr	r3, [r6, #0]
 80048d6:	423b      	tst	r3, r7
 80048d8:	d000      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x138>
 80048da:	e77d      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048dc:	f7fe fb6c 	bl	8002fb8 <HAL_GetTick>
 80048e0:	9b01      	ldr	r3, [sp, #4]
 80048e2:	1ac0      	subs	r0, r0, r3
 80048e4:	2864      	cmp	r0, #100	; 0x64
 80048e6:	d9f5      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 80048e8:	2003      	movs	r0, #3
}
 80048ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80048ec:	4011      	ands	r1, r2
 80048ee:	428b      	cmp	r3, r1
 80048f0:	d002      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048f2:	6829      	ldr	r1, [r5, #0]
 80048f4:	0689      	lsls	r1, r1, #26
 80048f6:	d408      	bmi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80048f8:	68a9      	ldr	r1, [r5, #8]
 80048fa:	400a      	ands	r2, r1
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d100      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004900:	e787      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	051b      	lsls	r3, r3, #20
 8004906:	d400      	bmi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004908:	e783      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 800490a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800490c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800490e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004910:	0312      	lsls	r2, r2, #12
 8004912:	4302      	orrs	r2, r0
 8004914:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004916:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800491a:	4815      	ldr	r0, [pc, #84]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800491c:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800491e:	4002      	ands	r2, r0
 8004920:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004922:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004924:	05cb      	lsls	r3, r1, #23
 8004926:	d400      	bmi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004928:	e773      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 800492a:	f7fe fb45 	bl	8002fb8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800492e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004930:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004932:	00bf      	lsls	r7, r7, #2
 8004934:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004936:	423b      	tst	r3, r7
 8004938:	d000      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x198>
 800493a:	e76a      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800493c:	f7fe fb3c 	bl	8002fb8 <HAL_GetTick>
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	1b80      	subs	r0, r0, r6
 8004944:	4298      	cmp	r0, r3
 8004946:	d9f5      	bls.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004948:	e7ce      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	40021000 	.word	0x40021000
 8004950:	40007000 	.word	0x40007000
 8004954:	ffcfffff 	.word	0xffcfffff
 8004958:	efffffff 	.word	0xefffffff
 800495c:	fffff3ff 	.word	0xfffff3ff
 8004960:	ffffcfff 	.word	0xffffcfff
 8004964:	fffcffff 	.word	0xfffcffff
 8004968:	fbffffff 	.word	0xfbffffff
 800496c:	fff3ffff 	.word	0xfff3ffff
 8004970:	fff7ffff 	.word	0xfff7ffff
 8004974:	00001388 	.word	0x00001388

08004978 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800497a:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800497c:	1c45      	adds	r5, r0, #1
 800497e:	7feb      	ldrb	r3, [r5, #31]
{
 8004980:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004982:	0038      	movs	r0, r7
 8004984:	2b01      	cmp	r3, #1
 8004986:	d024      	beq.n	80049d2 <HAL_RTC_DeactivateAlarm+0x5a>
 8004988:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800498a:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 800498c:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800498e:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004990:	19e6      	adds	r6, r4, r7
 8004992:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004994:	625a      	str	r2, [r3, #36]	; 0x24
 8004996:	3a77      	subs	r2, #119	; 0x77
 8004998:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800499a:	32ad      	adds	r2, #173	; 0xad
 800499c:	4291      	cmp	r1, r2
 800499e:	d128      	bne.n	80049f2 <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	4921      	ldr	r1, [pc, #132]	; (8004a28 <HAL_RTC_DeactivateAlarm+0xb0>)
 80049a4:	400a      	ands	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	4920      	ldr	r1, [pc, #128]	; (8004a2c <HAL_RTC_DeactivateAlarm+0xb4>)
 80049ac:	400a      	ands	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80049b0:	f7fe fb02 	bl	8002fb8 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80049b4:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 80049b6:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	68df      	ldr	r7, [r3, #12]
 80049be:	9b01      	ldr	r3, [sp, #4]
 80049c0:	401f      	ands	r7, r3
 80049c2:	d007      	beq.n	80049d4 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049c4:	22ff      	movs	r2, #255	; 0xff
 80049c6:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049c8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80049cc:	2301      	movs	r3, #1
 80049ce:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80049d0:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80049d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049d4:	f7fe faf0 	bl	8002fb8 <HAL_GetTick>
 80049d8:	9b00      	ldr	r3, [sp, #0]
 80049da:	1ac0      	subs	r0, r0, r3
 80049dc:	23fa      	movs	r3, #250	; 0xfa
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4298      	cmp	r0, r3
 80049e2:	d9ea      	bls.n	80049ba <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e4:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049e6:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049ec:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80049ee:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 80049f0:	e7ef      	b.n	80049d2 <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	490e      	ldr	r1, [pc, #56]	; (8004a30 <HAL_RTC_DeactivateAlarm+0xb8>)
 80049f6:	400a      	ands	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	490d      	ldr	r1, [pc, #52]	; (8004a34 <HAL_RTC_DeactivateAlarm+0xbc>)
 80049fe:	400a      	ands	r2, r1
 8004a00:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004a02:	f7fe fad9 	bl	8002fb8 <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a06:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 8004a08:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	68df      	ldr	r7, [r3, #12]
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	401f      	ands	r7, r3
 8004a12:	d1d7      	bne.n	80049c4 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a14:	f7fe fad0 	bl	8002fb8 <HAL_GetTick>
 8004a18:	9b00      	ldr	r3, [sp, #0]
 8004a1a:	1ac0      	subs	r0, r0, r3
 8004a1c:	23fa      	movs	r3, #250	; 0xfa
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4298      	cmp	r0, r3
 8004a22:	d9f2      	bls.n	8004a0a <HAL_RTC_DeactivateAlarm+0x92>
 8004a24:	e7de      	b.n	80049e4 <HAL_RTC_DeactivateAlarm+0x6c>
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	fffffeff 	.word	0xfffffeff
 8004a2c:	ffffefff 	.word	0xffffefff
 8004a30:	fffffdff 	.word	0xfffffdff
 8004a34:	ffffdfff 	.word	0xffffdfff

08004a38 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004a38:	6803      	ldr	r3, [r0, #0]
{
 8004a3a:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004a3c:	689a      	ldr	r2, [r3, #8]
{
 8004a3e:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004a40:	04d2      	lsls	r2, r2, #19
 8004a42:	d50a      	bpl.n	8004a5a <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	05db      	lsls	r3, r3, #23
 8004a48:	d507      	bpl.n	8004a5a <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004a4a:	f002 f839 	bl	8006ac0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004a4e:	6821      	ldr	r1, [r4, #0]
 8004a50:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <HAL_RTC_AlarmIRQHandler+0x54>)
 8004a52:	68ca      	ldr	r2, [r1, #12]
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	0492      	lsls	r2, r2, #18
 8004a60:	d50b      	bpl.n	8004a7a <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	059b      	lsls	r3, r3, #22
 8004a66:	d508      	bpl.n	8004a7a <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004a68:	0020      	movs	r0, r4
 8004a6a:	f000 fabb 	bl	8004fe4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004a6e:	6821      	ldr	r1, [r4, #0]
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <HAL_RTC_AlarmIRQHandler+0x58>)
 8004a72:	68ca      	ldr	r2, [r1, #12]
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004a7a:	2280      	movs	r2, #128	; 0x80
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8004a7e:	0292      	lsls	r2, r2, #10
 8004a80:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a82:	2301      	movs	r3, #1
 8004a84:	3402      	adds	r4, #2
 8004a86:	77e3      	strb	r3, [r4, #31]
}
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	fffffe7f 	.word	0xfffffe7f
 8004a90:	fffffd7f 	.word	0xfffffd7f
 8004a94:	40010400 	.word	0x40010400

08004a98 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a98:	21a0      	movs	r1, #160	; 0xa0
 8004a9a:	6802      	ldr	r2, [r0, #0]
{
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a9e:	68d3      	ldr	r3, [r2, #12]
{
 8004aa0:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004aa2:	438b      	bics	r3, r1
 8004aa4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004aa6:	f7fe fa87 	bl	8002fb8 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004aaa:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004aac:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004aae:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ab0:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	422b      	tst	r3, r5
 8004ab8:	d001      	beq.n	8004abe <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004aba:	2000      	movs	r0, #0
}
 8004abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004abe:	f7fe fa7b 	bl	8002fb8 <HAL_GetTick>
 8004ac2:	1b80      	subs	r0, r0, r6
 8004ac4:	42b8      	cmp	r0, r7
 8004ac6:	d9f4      	bls.n	8004ab2 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004ac8:	2003      	movs	r0, #3
 8004aca:	e7f7      	b.n	8004abc <HAL_RTC_WaitForSynchro+0x24>

08004acc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ace:	2440      	movs	r4, #64	; 0x40
 8004ad0:	6803      	ldr	r3, [r0, #0]
{
 8004ad2:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	4222      	tst	r2, r4
 8004ad8:	d001      	beq.n	8004ade <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004ada:	2000      	movs	r0, #0
}
 8004adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4252      	negs	r2, r2
 8004ae2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004ae4:	f7fe fa68 	bl	8002fb8 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ae8:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004aea:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004aec:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004aee:	682b      	ldr	r3, [r5, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4223      	tst	r3, r4
 8004af4:	d1f1      	bne.n	8004ada <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004af6:	f7fe fa5f 	bl	8002fb8 <HAL_GetTick>
 8004afa:	1b80      	subs	r0, r0, r6
 8004afc:	42b8      	cmp	r0, r7
 8004afe:	d9f6      	bls.n	8004aee <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004b00:	2003      	movs	r0, #3
 8004b02:	e7eb      	b.n	8004adc <RTC_EnterInitMode+0x10>

08004b04 <HAL_RTC_Init>:
{
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004b08:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	d01a      	beq.n	8004b44 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b0e:	1c86      	adds	r6, r0, #2
 8004b10:	7ff3      	ldrb	r3, [r6, #31]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d103      	bne.n	8004b20 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8004b18:	1942      	adds	r2, r0, r5
 8004b1a:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8004b1c:	f002 f86e 	bl	8006bfc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b20:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b22:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b24:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b26:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b28:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8004b2c:	3a77      	subs	r2, #119	; 0x77
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b30:	f7ff ffcc 	bl	8004acc <RTC_EnterInitMode>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	1e05      	subs	r5, r0, #0
 8004b38:	d006      	beq.n	8004b48 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b3a:	22ff      	movs	r2, #255	; 0xff
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b3e:	2304      	movs	r3, #4
 8004b40:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8004b42:	2501      	movs	r5, #1
}
 8004b44:	0028      	movs	r0, r5
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	491b      	ldr	r1, [pc, #108]	; (8004bb8 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b4c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b4e:	400a      	ands	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b52:	6862      	ldr	r2, [r4, #4]
 8004b54:	6899      	ldr	r1, [r3, #8]
 8004b56:	4302      	orrs	r2, r0
 8004b58:	69a0      	ldr	r0, [r4, #24]
 8004b5a:	4302      	orrs	r2, r0
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b60:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b62:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b66:	68a2      	ldr	r2, [r4, #8]
 8004b68:	6919      	ldr	r1, [r3, #16]
 8004b6a:	0412      	lsls	r2, r2, #16
 8004b6c:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b6e:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b70:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	438a      	bics	r2, r1
 8004b76:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b7a:	397d      	subs	r1, #125	; 0x7d
 8004b7c:	438a      	bics	r2, r1
 8004b7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b80:	69e2      	ldr	r2, [r4, #28]
 8004b82:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004b84:	4302      	orrs	r2, r0
 8004b86:	430a      	orrs	r2, r1
 8004b88:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	069b      	lsls	r3, r3, #26
 8004b8e:	d40c      	bmi.n	8004baa <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b90:	0020      	movs	r0, r4
 8004b92:	f7ff ff81 	bl	8004a98 <HAL_RTC_WaitForSynchro>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d007      	beq.n	8004baa <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b9a:	22ff      	movs	r2, #255	; 0xff
 8004b9c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8004b9e:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004ba6:	77e5      	strb	r5, [r4, #31]
 8004ba8:	e7cb      	b.n	8004b42 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004baa:	22ff      	movs	r2, #255	; 0xff
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8004bb4:	e7c6      	b.n	8004b44 <HAL_RTC_Init+0x40>
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	ff8fffbf 	.word	0xff8fffbf

08004bbc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004bbc:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8004bbe:	2809      	cmp	r0, #9
 8004bc0:	d803      	bhi.n	8004bca <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	4318      	orrs	r0, r3
 8004bc6:	b2c0      	uxtb	r0, r0
}
 8004bc8:	4770      	bx	lr
    Param -= 10U;
 8004bca:	380a      	subs	r0, #10
    bcdhigh++;
 8004bcc:	3301      	adds	r3, #1
    Param -= 10U;
 8004bce:	b2c0      	uxtb	r0, r0
 8004bd0:	e7f5      	b.n	8004bbe <RTC_ByteToBcd2+0x2>
	...

08004bd4 <HAL_RTC_SetTime>:
{
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004bd8:	1c47      	adds	r7, r0, #1
{
 8004bda:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004bdc:	7ff9      	ldrb	r1, [r7, #31]
{
 8004bde:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004be0:	001e      	movs	r6, r3
 8004be2:	2901      	cmp	r1, #1
 8004be4:	d036      	beq.n	8004c54 <HAL_RTC_SetTime+0x80>
 8004be6:	2101      	movs	r1, #1
 8004be8:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bea:	18c1      	adds	r1, r0, r3
 8004bec:	77cb      	strb	r3, [r1, #31]
 8004bee:	9100      	str	r1, [sp, #0]
 8004bf0:	2140      	movs	r1, #64	; 0x40
 8004bf2:	6803      	ldr	r3, [r0, #0]
 8004bf4:	7866      	ldrb	r6, [r4, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	7820      	ldrb	r0, [r4, #0]
 8004bfa:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	d12b      	bne.n	8004c58 <HAL_RTC_SetTime+0x84>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d100      	bne.n	8004c06 <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8004c04:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c06:	f7ff ffd9 	bl	8004bbc <RTC_ByteToBcd2>
 8004c0a:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c0c:	0030      	movs	r0, r6
 8004c0e:	f7ff ffd5 	bl	8004bbc <RTC_ByteToBcd2>
 8004c12:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004c14:	78a0      	ldrb	r0, [r4, #2]
 8004c16:	f7ff ffd1 	bl	8004bbc <RTC_ByteToBcd2>
 8004c1a:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004c1c:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c1e:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004c20:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c22:	4318      	orrs	r0, r3
 8004c24:	9b01      	ldr	r3, [sp, #4]
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	4318      	orrs	r0, r3
 8004c2a:	4330      	orrs	r0, r6
 8004c2c:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c2e:	22ca      	movs	r2, #202	; 0xca
 8004c30:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c32:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
 8004c36:	3a77      	subs	r2, #119	; 0x77
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c3a:	f7ff ff47 	bl	8004acc <RTC_EnterInitMode>
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	1e06      	subs	r6, r0, #0
 8004c42:	d016      	beq.n	8004c72 <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c48:	2304      	movs	r3, #4
 8004c4a:	9a00      	ldr	r2, [sp, #0]
 8004c4c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004c52:	2601      	movs	r6, #1
}
 8004c54:	0030      	movs	r0, r6
 8004c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d100      	bne.n	8004c5e <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 8004c5c:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c5e:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c60:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c62:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 8004c64:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c66:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004c68:	78e0      	ldrb	r0, [r4, #3]
 8004c6a:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c6c:	4306      	orrs	r6, r0
 8004c6e:	9601      	str	r6, [sp, #4]
 8004c70:	e7dd      	b.n	8004c2e <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004c72:	4815      	ldr	r0, [pc, #84]	; (8004cc8 <HAL_RTC_SetTime+0xf4>)
 8004c74:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004c76:	4915      	ldr	r1, [pc, #84]	; (8004ccc <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004c78:	4002      	ands	r2, r0
 8004c7a:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004c7c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c7e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004c80:	400a      	ands	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c84:	68e2      	ldr	r2, [r4, #12]
 8004c86:	6899      	ldr	r1, [r3, #8]
 8004c88:	4302      	orrs	r2, r0
 8004c8a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c8c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c8e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	438a      	bics	r2, r1
 8004c94:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	069b      	lsls	r3, r3, #26
 8004c9a:	d40c      	bmi.n	8004cb6 <HAL_RTC_SetTime+0xe2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c9c:	0028      	movs	r0, r5
 8004c9e:	f7ff fefb 	bl	8004a98 <HAL_RTC_WaitForSynchro>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cac:	2304      	movs	r3, #4
 8004cae:	9a00      	ldr	r2, [sp, #0]
 8004cb0:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004cb2:	77fe      	strb	r6, [r7, #31]
 8004cb4:	e7cd      	b.n	8004c52 <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb6:	22ff      	movs	r2, #255	; 0xff
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	9a00      	ldr	r2, [sp, #0]
 8004cc0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004cc6:	e7c5      	b.n	8004c54 <HAL_RTC_SetTime+0x80>
 8004cc8:	007f7f7f 	.word	0x007f7f7f
 8004ccc:	fffbffff 	.word	0xfffbffff

08004cd0 <HAL_RTC_SetDate>:
{
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004cd4:	1c47      	adds	r7, r0, #1
{
 8004cd6:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004cd8:	7ff9      	ldrb	r1, [r7, #31]
{
 8004cda:	b085      	sub	sp, #20
 8004cdc:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004cde:	001e      	movs	r6, r3
 8004ce0:	2901      	cmp	r1, #1
 8004ce2:	d035      	beq.n	8004d50 <HAL_RTC_SetDate+0x80>
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ce8:	18c1      	adds	r1, r0, r3
 8004cea:	9101      	str	r1, [sp, #4]
 8004cec:	77cb      	strb	r3, [r1, #31]
 8004cee:	786b      	ldrb	r3, [r5, #1]
 8004cf0:	78e8      	ldrb	r0, [r5, #3]
 8004cf2:	78ae      	ldrb	r6, [r5, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	d14e      	bne.n	8004d96 <HAL_RTC_SetDate+0xc6>
 8004cf8:	3210      	adds	r2, #16
 8004cfa:	4213      	tst	r3, r2
 8004cfc:	d002      	beq.n	8004d04 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004cfe:	4393      	bics	r3, r2
 8004d00:	330a      	adds	r3, #10
 8004d02:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d04:	f7ff ff5a 	bl	8004bbc <RTC_ByteToBcd2>
 8004d08:	9002      	str	r0, [sp, #8]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004d0a:	7868      	ldrb	r0, [r5, #1]
 8004d0c:	f7ff ff56 	bl	8004bbc <RTC_ByteToBcd2>
 8004d10:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004d12:	0030      	movs	r0, r6
 8004d14:	f7ff ff52 	bl	8004bbc <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d18:	9b02      	ldr	r3, [sp, #8]
                  ((uint32_t)sDate->WeekDay << 13U));
 8004d1a:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d1c:	041e      	lsls	r6, r3, #16
                  ((uint32_t)sDate->WeekDay << 13U));
 8004d1e:	036d      	lsls	r5, r5, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004d20:	9b03      	ldr	r3, [sp, #12]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d22:	4305      	orrs	r5, r0
 8004d24:	4335      	orrs	r5, r6
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004d26:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d28:	22ca      	movs	r2, #202	; 0xca
 8004d2a:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d2c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d30:	3a77      	subs	r2, #119	; 0x77
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d34:	f7ff feca 	bl	8004acc <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004d38:	4335      	orrs	r5, r6
 8004d3a:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d3c:	1e06      	subs	r6, r0, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d40:	22ff      	movs	r2, #255	; 0xff
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d44:	2304      	movs	r3, #4
 8004d46:	9a01      	ldr	r2, [sp, #4]
 8004d48:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004d4e:	2601      	movs	r6, #1
}
 8004d50:	0030      	movs	r0, r6
 8004d52:	b005      	add	sp, #20
 8004d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d56:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d58:	4812      	ldr	r0, [pc, #72]	; (8004da4 <HAL_RTC_SetDate+0xd4>)
 8004d5a:	4005      	ands	r5, r0
 8004d5c:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	438a      	bics	r2, r1
 8004d62:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	069b      	lsls	r3, r3, #26
 8004d68:	d40c      	bmi.n	8004d84 <HAL_RTC_SetDate+0xb4>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d6a:	0020      	movs	r0, r4
 8004d6c:	f7ff fe94 	bl	8004a98 <HAL_RTC_WaitForSynchro>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d007      	beq.n	8004d84 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d74:	22ff      	movs	r2, #255	; 0xff
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	9a01      	ldr	r2, [sp, #4]
 8004d7e:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004d80:	77fe      	strb	r6, [r7, #31]
 8004d82:	e7e4      	b.n	8004d4e <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d84:	22ff      	movs	r2, #255	; 0xff
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	9a01      	ldr	r2, [sp, #4]
 8004d8e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004d90:	2300      	movs	r3, #0
 8004d92:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004d94:	e7dc      	b.n	8004d50 <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004d96:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004d98:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004d9a:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004d9c:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8004d9e:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004da0:	036d      	lsls	r5, r5, #13
 8004da2:	e7c1      	b.n	8004d28 <HAL_RTC_SetDate+0x58>
 8004da4:	00ffff3f 	.word	0x00ffff3f

08004da8 <HAL_RTC_SetAlarm_IT>:
{
 8004da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	9300      	str	r3, [sp, #0]
{
 8004dae:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004db0:	7fd9      	ldrb	r1, [r3, #31]
 8004db2:	2302      	movs	r3, #2
{
 8004db4:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004db6:	0018      	movs	r0, r3
 8004db8:	2901      	cmp	r1, #1
 8004dba:	d100      	bne.n	8004dbe <HAL_RTC_SetAlarm_IT+0x16>
 8004dbc:	e08d      	b.n	8004eda <HAL_RTC_SetAlarm_IT+0x132>
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	1860      	adds	r0, r4, r1
 8004dc2:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dc4:	18e1      	adds	r1, r4, r3
 8004dc6:	77cb      	strb	r3, [r1, #31]
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	7828      	ldrb	r0, [r5, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	786e      	ldrb	r6, [r5, #1]
 8004dd2:	78af      	ldrb	r7, [r5, #2]
 8004dd4:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	d15d      	bne.n	8004e96 <HAL_RTC_SetAlarm_IT+0xee>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d100      	bne.n	8004de0 <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004dde:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004de0:	f7ff feec 	bl	8004bbc <RTC_ByteToBcd2>
 8004de4:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004de6:	0030      	movs	r0, r6
 8004de8:	f7ff fee8 	bl	8004bbc <RTC_ByteToBcd2>
 8004dec:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004dee:	0038      	movs	r0, r7
 8004df0:	f7ff fee4 	bl	8004bbc <RTC_ByteToBcd2>
 8004df4:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004df6:	1c6b      	adds	r3, r5, #1
 8004df8:	7fd8      	ldrb	r0, [r3, #31]
 8004dfa:	f7ff fedf 	bl	8004bbc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004dfe:	696a      	ldr	r2, [r5, #20]
 8004e00:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004e02:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004e04:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004e06:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004e08:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004e0a:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	431f      	orrs	r7, r3
 8004e10:	9b01      	ldr	r3, [sp, #4]
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	431f      	orrs	r7, r3
 8004e16:	4337      	orrs	r7, r6
 8004e18:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e1a:	69aa      	ldr	r2, [r5, #24]
 8004e1c:	686b      	ldr	r3, [r5, #4]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004e1e:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e20:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e22:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e24:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24
 8004e2a:	3a77      	subs	r2, #119	; 0x77
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004e2e:	32ad      	adds	r2, #173	; 0xad
 8004e30:	4291      	cmp	r1, r2
 8004e32:	d153      	bne.n	8004edc <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	493c      	ldr	r1, [pc, #240]	; (8004f28 <HAL_RTC_SetAlarm_IT+0x180>)
 8004e38:	400a      	ands	r2, r1
 8004e3a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e3c:	68d9      	ldr	r1, [r3, #12]
 8004e3e:	4a3b      	ldr	r2, [pc, #236]	; (8004f2c <HAL_RTC_SetAlarm_IT+0x184>)
 8004e40:	b2c9      	uxtb	r1, r1
 8004e42:	430a      	orrs	r2, r1
 8004e44:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004e46:	f7fe f8b7 	bl	8002fb8 <HAL_GetTick>
 8004e4a:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	68dd      	ldr	r5, [r3, #12]
 8004e52:	4015      	ands	r5, r2
 8004e54:	d032      	beq.n	8004ebc <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e56:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e58:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e5a:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e5c:	2280      	movs	r2, #128	; 0x80
 8004e5e:	6899      	ldr	r1, [r3, #8]
 8004e60:	0052      	lsls	r2, r2, #1
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	6899      	ldr	r1, [r3, #8]
 8004e6a:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	4b2f      	ldr	r3, [pc, #188]	; (8004f30 <HAL_RTC_SetAlarm_IT+0x188>)
 8004e74:	0292      	lsls	r2, r2, #10
 8004e76:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8004e78:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004e7e:	6899      	ldr	r1, [r3, #8]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY;
 8004e88:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 8004e90:	9b00      	ldr	r3, [sp, #0]
 8004e92:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8004e94:	e021      	b.n	8004eda <HAL_RTC_SetAlarm_IT+0x132>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d100      	bne.n	8004e9c <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e9a:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004e9c:	69eb      	ldr	r3, [r5, #28]
 8004e9e:	696a      	ldr	r2, [r5, #20]
 8004ea0:	0400      	lsls	r0, r0, #16
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004ea6:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ea8:	4307      	orrs	r7, r0
 8004eaa:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004eac:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004eae:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004eb0:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004eb2:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004eb4:	7fde      	ldrb	r6, [r3, #31]
 8004eb6:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004eb8:	4337      	orrs	r7, r6
 8004eba:	e7ae      	b.n	8004e1a <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ebc:	f7fe f87c 	bl	8002fb8 <HAL_GetTick>
 8004ec0:	23fa      	movs	r3, #250	; 0xfa
 8004ec2:	1b80      	subs	r0, r0, r6
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4298      	cmp	r0, r3
 8004ec8:	d9c0      	bls.n	8004e4c <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eca:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ecc:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ece:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ed0:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8004ed4:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ed6:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 8004ed8:	77dd      	strb	r5, [r3, #31]
}
 8004eda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	4915      	ldr	r1, [pc, #84]	; (8004f34 <HAL_RTC_SetAlarm_IT+0x18c>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <HAL_RTC_SetAlarm_IT+0x190>)
 8004ee8:	b2c9      	uxtb	r1, r1
 8004eea:	430a      	orrs	r2, r1
 8004eec:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004eee:	f7fe f863 	bl	8002fb8 <HAL_GetTick>
 8004ef2:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	68dd      	ldr	r5, [r3, #12]
 8004efa:	4015      	ands	r5, r2
 8004efc:	d00b      	beq.n	8004f16 <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004efe:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f00:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f02:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f04:	2280      	movs	r2, #128	; 0x80
 8004f06:	6899      	ldr	r1, [r3, #8]
 8004f08:	0092      	lsls	r2, r2, #2
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004f0e:	2280      	movs	r2, #128	; 0x80
 8004f10:	6899      	ldr	r1, [r3, #8]
 8004f12:	0192      	lsls	r2, r2, #6
 8004f14:	e7aa      	b.n	8004e6c <HAL_RTC_SetAlarm_IT+0xc4>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f16:	f7fe f84f 	bl	8002fb8 <HAL_GetTick>
 8004f1a:	23fa      	movs	r3, #250	; 0xfa
 8004f1c:	1b80      	subs	r0, r0, r6
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4298      	cmp	r0, r3
 8004f22:	d9e7      	bls.n	8004ef4 <HAL_RTC_SetAlarm_IT+0x14c>
 8004f24:	e7d1      	b.n	8004eca <HAL_RTC_SetAlarm_IT+0x122>
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	fffffeff 	.word	0xfffffeff
 8004f2c:	fffffe7f 	.word	0xfffffe7f
 8004f30:	40010400 	.word	0x40010400
 8004f34:	fffffdff 	.word	0xfffffdff
 8004f38:	fffffd7f 	.word	0xfffffd7f

08004f3c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004f3c:	230a      	movs	r3, #10
 8004f3e:	0902      	lsrs	r2, r0, #4
 8004f40:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004f42:	220f      	movs	r2, #15
 8004f44:	4010      	ands	r0, r2
 8004f46:	1818      	adds	r0, r3, r0
 8004f48:	b2c0      	uxtb	r0, r0
}
 8004f4a:	4770      	bx	lr

08004f4c <HAL_RTC_GetTime>:
{
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004f50:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004f52:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004f54:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004f56:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004f58:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004f5a:	690b      	ldr	r3, [r1, #16]
 8004f5c:	045b      	lsls	r3, r3, #17
 8004f5e:	0c5b      	lsrs	r3, r3, #17
 8004f60:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004f62:	680b      	ldr	r3, [r1, #0]
 8004f64:	490d      	ldr	r1, [pc, #52]	; (8004f9c <HAL_RTC_GetTime+0x50>)
 8004f66:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004f68:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004f6a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004f6c:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004f6e:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004f70:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004f72:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004f74:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004f76:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004f78:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004f7a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004f7c:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004f7e:	2a00      	cmp	r2, #0
 8004f80:	d10a      	bne.n	8004f98 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f82:	f7ff ffdb 	bl	8004f3c <RTC_Bcd2ToByte>
 8004f86:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f88:	0030      	movs	r0, r6
 8004f8a:	f7ff ffd7 	bl	8004f3c <RTC_Bcd2ToByte>
 8004f8e:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f90:	0028      	movs	r0, r5
 8004f92:	f7ff ffd3 	bl	8004f3c <RTC_Bcd2ToByte>
 8004f96:	70a0      	strb	r0, [r4, #2]
}
 8004f98:	2000      	movs	r0, #0
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	007f7f7f 	.word	0x007f7f7f

08004fa0 <HAL_RTC_GetDate>:
{
 8004fa0:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004fa2:	253f      	movs	r5, #63	; 0x3f
{
 8004fa4:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004fa6:	6803      	ldr	r3, [r0, #0]
 8004fa8:	490d      	ldr	r1, [pc, #52]	; (8004fe0 <HAL_RTC_GetDate+0x40>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004fae:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004fb0:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004fb2:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004fb4:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004fb6:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004fb8:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004fba:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004fbc:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004fbe:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004fc0:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8004fc2:	2a00      	cmp	r2, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004fc6:	f7ff ffb9 	bl	8004f3c <RTC_Bcd2ToByte>
 8004fca:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004fcc:	0030      	movs	r0, r6
 8004fce:	f7ff ffb5 	bl	8004f3c <RTC_Bcd2ToByte>
 8004fd2:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004fd4:	0028      	movs	r0, r5
 8004fd6:	f7ff ffb1 	bl	8004f3c <RTC_Bcd2ToByte>
 8004fda:	70a0      	strb	r0, [r4, #2]
}
 8004fdc:	2000      	movs	r0, #0
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	00ffff3f 	.word	0x00ffff3f

08004fe4 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	0004      	movs	r4, r0
 8004fec:	000d      	movs	r5, r1
 8004fee:	0016      	movs	r6, r2
 8004ff0:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	6893      	ldr	r3, [r2, #8]
 8004ff6:	402b      	ands	r3, r5
 8004ff8:	429d      	cmp	r5, r3
 8004ffa:	d001      	beq.n	8005000 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e031      	b.n	8005064 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8005000:	1c73      	adds	r3, r6, #1
 8005002:	d0f7      	beq.n	8004ff4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005004:	f7fd ffd8 	bl	8002fb8 <HAL_GetTick>
 8005008:	1bc0      	subs	r0, r0, r7
 800500a:	4286      	cmp	r6, r0
 800500c:	d8f1      	bhi.n	8004ff2 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800500e:	21e0      	movs	r1, #224	; 0xe0
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	438a      	bics	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005018:	2282      	movs	r2, #130	; 0x82
 800501a:	6861      	ldr	r1, [r4, #4]
 800501c:	0052      	lsls	r2, r2, #1
 800501e:	4291      	cmp	r1, r2
 8005020:	d10c      	bne.n	800503c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	68a2      	ldr	r2, [r4, #8]
 8005026:	0209      	lsls	r1, r1, #8
 8005028:	428a      	cmp	r2, r1
 800502a:	d003      	beq.n	8005034 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	00c9      	lsls	r1, r1, #3
 8005030:	428a      	cmp	r2, r1
 8005032:	d103      	bne.n	800503c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
          __HAL_SPI_DISABLE(hspi);
 8005034:	2140      	movs	r1, #64	; 0x40
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	438a      	bics	r2, r1
 800503a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800503c:	2180      	movs	r1, #128	; 0x80
 800503e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005040:	0189      	lsls	r1, r1, #6
 8005042:	428a      	cmp	r2, r1
 8005044:	d106      	bne.n	8005054 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
          SPI_RESET_CRC(hspi);
 8005046:	6819      	ldr	r1, [r3, #0]
 8005048:	4807      	ldr	r0, [pc, #28]	; (8005068 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x80>)
 800504a:	4001      	ands	r1, r0
 800504c:	6019      	str	r1, [r3, #0]
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005054:	0023      	movs	r3, r4
 8005056:	2201      	movs	r2, #1
 8005058:	3351      	adds	r3, #81	; 0x51
 800505a:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800505c:	2300      	movs	r3, #0
 800505e:	2003      	movs	r0, #3
 8005060:	3450      	adds	r4, #80	; 0x50
 8005062:	7023      	strb	r3, [r4, #0]
}
 8005064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	ffffdfff 	.word	0xffffdfff

0800506c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005070:	2282      	movs	r2, #130	; 0x82
{
 8005072:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005074:	6840      	ldr	r0, [r0, #4]
 8005076:	0052      	lsls	r2, r2, #1
 8005078:	4290      	cmp	r0, r2
 800507a:	d11e      	bne.n	80050ba <SPI_EndRxTransaction+0x4e>
 800507c:	2080      	movs	r0, #128	; 0x80
 800507e:	2580      	movs	r5, #128	; 0x80
 8005080:	68a2      	ldr	r2, [r4, #8]
 8005082:	0200      	lsls	r0, r0, #8
 8005084:	00ed      	lsls	r5, r5, #3
 8005086:	4282      	cmp	r2, r0
 8005088:	d001      	beq.n	800508e <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508a:	42aa      	cmp	r2, r5
 800508c:	d106      	bne.n	800509c <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800508e:	2740      	movs	r7, #64	; 0x40
 8005090:	6826      	ldr	r6, [r4, #0]
 8005092:	6830      	ldr	r0, [r6, #0]
 8005094:	43b8      	bics	r0, r7
 8005096:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005098:	42aa      	cmp	r2, r5
 800509a:	d00e      	beq.n	80050ba <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800509c:	000a      	movs	r2, r1
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	0020      	movs	r0, r4
 80050a2:	f7ff ffa1 	bl	8004fe8 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d101      	bne.n	80050ae <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80050aa:	2000      	movs	r0, #0
}
 80050ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ae:	2320      	movs	r3, #32
 80050b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80050b2:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b4:	4313      	orrs	r3, r2
 80050b6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80050b8:	e7f8      	b.n	80050ac <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050ba:	000a      	movs	r2, r1
 80050bc:	2101      	movs	r1, #1
 80050be:	e7ef      	b.n	80050a0 <SPI_EndRxTransaction+0x34>

080050c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c2:	2282      	movs	r2, #130	; 0x82
{
 80050c4:	b510      	push	{r4, lr}
 80050c6:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c8:	6840      	ldr	r0, [r0, #4]
 80050ca:	0052      	lsls	r2, r2, #1
 80050cc:	4290      	cmp	r0, r2
 80050ce:	d108      	bne.n	80050e2 <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050d0:	000a      	movs	r2, r1
 80050d2:	2180      	movs	r1, #128	; 0x80
 80050d4:	0020      	movs	r0, r4
 80050d6:	f7ff ff87 	bl	8004fe8 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d109      	bne.n	80050f2 <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80050de:	2000      	movs	r0, #0
}
 80050e0:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80050e2:	0022      	movs	r2, r4
 80050e4:	3251      	adds	r2, #81	; 0x51
 80050e6:	7812      	ldrb	r2, [r2, #0]
 80050e8:	2a05      	cmp	r2, #5
 80050ea:	d1f8      	bne.n	80050de <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050ec:	000a      	movs	r2, r1
 80050ee:	2101      	movs	r1, #1
 80050f0:	e7f0      	b.n	80050d4 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f2:	2320      	movs	r3, #32
 80050f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80050f6:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f8:	4313      	orrs	r3, r2
 80050fa:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80050fc:	e7f0      	b.n	80050e0 <SPI_EndRxTxTransaction+0x20>
	...

08005100 <HAL_SPI_Init>:
{
 8005100:	b570      	push	{r4, r5, r6, lr}
 8005102:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005104:	2001      	movs	r0, #1
  if (hspi == NULL)
 8005106:	2c00      	cmp	r4, #0
 8005108:	d037      	beq.n	800517a <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800510a:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800510c:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800510e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005110:	3551      	adds	r5, #81	; 0x51
 8005112:	782b      	ldrb	r3, [r5, #0]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 800511a:	0022      	movs	r2, r4
 800511c:	3250      	adds	r2, #80	; 0x50
 800511e:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8005120:	0020      	movs	r0, r4
 8005122:	f001 fd83 	bl	8006c2c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005126:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005128:	2240      	movs	r2, #64	; 0x40
 800512a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800512c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800512e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005130:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005132:	4393      	bics	r3, r2
 8005134:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	69a2      	ldr	r2, [r4, #24]
 800513a:	4303      	orrs	r3, r0
 800513c:	68e0      	ldr	r0, [r4, #12]
 800513e:	4303      	orrs	r3, r0
 8005140:	6920      	ldr	r0, [r4, #16]
 8005142:	4303      	orrs	r3, r0
 8005144:	6960      	ldr	r0, [r4, #20]
 8005146:	4303      	orrs	r3, r0
 8005148:	69e0      	ldr	r0, [r4, #28]
 800514a:	4303      	orrs	r3, r0
 800514c:	6a20      	ldr	r0, [r4, #32]
 800514e:	4303      	orrs	r3, r0
 8005150:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005152:	4303      	orrs	r3, r0
 8005154:	2080      	movs	r0, #128	; 0x80
 8005156:	0080      	lsls	r0, r0, #2
 8005158:	4010      	ands	r0, r2
 800515a:	4303      	orrs	r3, r0
 800515c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800515e:	2304      	movs	r3, #4
 8005160:	0c12      	lsrs	r2, r2, #16
 8005162:	401a      	ands	r2, r3
 8005164:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005166:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005168:	431a      	orrs	r2, r3
 800516a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800516c:	69cb      	ldr	r3, [r1, #28]
 800516e:	4a03      	ldr	r2, [pc, #12]	; (800517c <HAL_SPI_Init+0x7c>)
 8005170:	4013      	ands	r3, r2
 8005172:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005174:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005176:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005178:	702b      	strb	r3, [r5, #0]
}
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	fffff7ff 	.word	0xfffff7ff

08005180 <HAL_SPI_DeInit>:
{
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005184:	2001      	movs	r0, #1
  if (hspi == NULL)
 8005186:	2c00      	cmp	r4, #0
 8005188:	d010      	beq.n	80051ac <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 800518a:	0025      	movs	r5, r4
 800518c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800518e:	2140      	movs	r1, #64	; 0x40
 8005190:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005192:	3551      	adds	r5, #81	; 0x51
 8005194:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005196:	6813      	ldr	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8005198:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 800519a:	438b      	bics	r3, r1
 800519c:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800519e:	f001 fd71 	bl	8006c84 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051a2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 80051a4:	3450      	adds	r4, #80	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051a6:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 80051a8:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 80051aa:	7020      	strb	r0, [r4, #0]
}
 80051ac:	bd70      	pop	{r4, r5, r6, pc}

080051ae <HAL_SPI_Transmit>:
{
 80051ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b0:	b087      	sub	sp, #28
 80051b2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 80051b4:	0003      	movs	r3, r0
 80051b6:	3350      	adds	r3, #80	; 0x50
 80051b8:	9303      	str	r3, [sp, #12]
 80051ba:	781b      	ldrb	r3, [r3, #0]
{
 80051bc:	0004      	movs	r4, r0
 80051be:	000e      	movs	r6, r1
 80051c0:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80051c2:	2502      	movs	r5, #2
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d079      	beq.n	80052bc <HAL_SPI_Transmit+0x10e>
 80051c8:	2301      	movs	r3, #1
 80051ca:	9a03      	ldr	r2, [sp, #12]
 80051cc:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80051ce:	f7fd fef3 	bl	8002fb8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80051d2:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 80051d4:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 80051d6:	3251      	adds	r2, #81	; 0x51
 80051d8:	7813      	ldrb	r3, [r2, #0]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d167      	bne.n	80052b0 <HAL_SPI_Transmit+0x102>
    errorcode = HAL_ERROR;
 80051e0:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 80051e2:	2e00      	cmp	r6, #0
 80051e4:	d064      	beq.n	80052b0 <HAL_SPI_Transmit+0x102>
 80051e6:	2f00      	cmp	r7, #0
 80051e8:	d062      	beq.n	80052b0 <HAL_SPI_Transmit+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051ea:	3302      	adds	r3, #2
 80051ec:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051f2:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80051f4:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80051f6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051fa:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051fc:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005202:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005204:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	429a      	cmp	r2, r3
 800520a:	d105      	bne.n	8005218 <HAL_SPI_Transmit+0x6a>
    SPI_1LINE_TX(hspi);
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	01db      	lsls	r3, r3, #7
 8005212:	6811      	ldr	r1, [r2, #0]
 8005214:	430b      	orrs	r3, r1
 8005216:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005218:	2240      	movs	r2, #64	; 0x40
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	4211      	tst	r1, r2
 8005220:	d102      	bne.n	8005228 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	68e0      	ldr	r0, [r4, #12]
 800522c:	0109      	lsls	r1, r1, #4
 800522e:	6862      	ldr	r2, [r4, #4]
 8005230:	4288      	cmp	r0, r1
 8005232:	d146      	bne.n	80052c2 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005234:	2a00      	cmp	r2, #0
 8005236:	d001      	beq.n	800523c <HAL_SPI_Transmit+0x8e>
 8005238:	2f01      	cmp	r7, #1
 800523a:	d107      	bne.n	800524c <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523c:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800523e:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005240:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005242:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005244:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005246:	3b01      	subs	r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800524c:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 800524e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005250:	2b00      	cmp	r3, #0
 8005252:	d115      	bne.n	8005280 <HAL_SPI_Transmit+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005254:	9a02      	ldr	r2, [sp, #8]
 8005256:	9901      	ldr	r1, [sp, #4]
 8005258:	0020      	movs	r0, r4
 800525a:	f7ff ff31 	bl	80050c0 <SPI_EndRxTxTransaction>
 800525e:	2800      	cmp	r0, #0
 8005260:	d159      	bne.n	8005316 <HAL_SPI_Transmit+0x168>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005262:	68a3      	ldr	r3, [r4, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005268:	9305      	str	r3, [sp, #20]
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	9205      	str	r2, [sp, #20]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	9305      	str	r3, [sp, #20]
 8005274:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005276:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005278:	1e6b      	subs	r3, r5, #1
 800527a:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 800527c:	b2ed      	uxtb	r5, r5
 800527e:	e017      	b.n	80052b0 <HAL_SPI_Transmit+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005280:	6822      	ldr	r2, [r4, #0]
 8005282:	6893      	ldr	r3, [r2, #8]
 8005284:	422b      	tst	r3, r5
 8005286:	d009      	beq.n	800529c <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005288:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800528a:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800528c:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005290:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005292:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005294:	3b01      	subs	r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	86e3      	strh	r3, [r4, #54]	; 0x36
 800529a:	e7d8      	b.n	800524e <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800529c:	f7fd fe8c 	bl	8002fb8 <HAL_GetTick>
 80052a0:	9b02      	ldr	r3, [sp, #8]
 80052a2:	1ac0      	subs	r0, r0, r3
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	4298      	cmp	r0, r3
 80052a8:	d3d1      	bcc.n	800524e <HAL_SPI_Transmit+0xa0>
 80052aa:	3301      	adds	r3, #1
 80052ac:	d0cf      	beq.n	800524e <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80052ae:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 80052b0:	2301      	movs	r3, #1
 80052b2:	3451      	adds	r4, #81	; 0x51
 80052b4:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80052b6:	2300      	movs	r3, #0
 80052b8:	9a03      	ldr	r2, [sp, #12]
 80052ba:	7013      	strb	r3, [r2, #0]
}
 80052bc:	0028      	movs	r0, r5
 80052be:	b007      	add	sp, #28
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	d001      	beq.n	80052ca <HAL_SPI_Transmit+0x11c>
 80052c6:	2f01      	cmp	r7, #1
 80052c8:	d108      	bne.n	80052dc <HAL_SPI_Transmit+0x12e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ca:	7832      	ldrb	r2, [r6, #0]
 80052cc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052d0:	3301      	adds	r3, #1
 80052d2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80052d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29b      	uxth	r3, r3
 80052da:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052dc:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80052de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0b7      	beq.n	8005254 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	422a      	tst	r2, r5
 80052ea:	d00a      	beq.n	8005302 <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80052ee:	7812      	ldrb	r2, [r2, #0]
 80052f0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052f4:	3301      	adds	r3, #1
 80052f6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80052f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005300:	e7ed      	b.n	80052de <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005302:	f7fd fe59 	bl	8002fb8 <HAL_GetTick>
 8005306:	9b02      	ldr	r3, [sp, #8]
 8005308:	1ac0      	subs	r0, r0, r3
 800530a:	9b01      	ldr	r3, [sp, #4]
 800530c:	4283      	cmp	r3, r0
 800530e:	d8e6      	bhi.n	80052de <HAL_SPI_Transmit+0x130>
 8005310:	3301      	adds	r3, #1
 8005312:	d0e4      	beq.n	80052de <HAL_SPI_Transmit+0x130>
 8005314:	e7cb      	b.n	80052ae <HAL_SPI_Transmit+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005316:	2320      	movs	r3, #32
 8005318:	6563      	str	r3, [r4, #84]	; 0x54
 800531a:	e7a2      	b.n	8005262 <HAL_SPI_Transmit+0xb4>

0800531c <HAL_SPI_TransmitReceive>:
{
 800531c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531e:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8005320:	0003      	movs	r3, r0
{
 8005322:	b085      	sub	sp, #20
 8005324:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8005326:	3350      	adds	r3, #80	; 0x50
 8005328:	781a      	ldrb	r2, [r3, #0]
{
 800532a:	0004      	movs	r4, r0
 800532c:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 800532e:	2502      	movs	r5, #2
 8005330:	2a01      	cmp	r2, #1
 8005332:	d100      	bne.n	8005336 <HAL_SPI_TransmitReceive+0x1a>
 8005334:	e09b      	b.n	800546e <HAL_SPI_TransmitReceive+0x152>
 8005336:	2201      	movs	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800533a:	f7fd fe3d 	bl	8002fb8 <HAL_GetTick>
  tmp_state           = hspi->State;
 800533e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8005340:	9000      	str	r0, [sp, #0]
  tmp_state           = hspi->State;
 8005342:	3351      	adds	r3, #81	; 0x51
 8005344:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005346:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005348:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800534a:	2b01      	cmp	r3, #1
 800534c:	d00b      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x4a>
 800534e:	2282      	movs	r2, #130	; 0x82
 8005350:	0052      	lsls	r2, r2, #1
 8005352:	4291      	cmp	r1, r2
 8005354:	d000      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x3c>
 8005356:	e083      	b.n	8005460 <HAL_SPI_TransmitReceive+0x144>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005358:	68a2      	ldr	r2, [r4, #8]
 800535a:	2a00      	cmp	r2, #0
 800535c:	d000      	beq.n	8005360 <HAL_SPI_TransmitReceive+0x44>
 800535e:	e07f      	b.n	8005460 <HAL_SPI_TransmitReceive+0x144>
 8005360:	2b04      	cmp	r3, #4
 8005362:	d000      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x4a>
 8005364:	e07c      	b.n	8005460 <HAL_SPI_TransmitReceive+0x144>
    errorcode = HAL_ERROR;
 8005366:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005368:	2e00      	cmp	r6, #0
 800536a:	d100      	bne.n	800536e <HAL_SPI_TransmitReceive+0x52>
 800536c:	e078      	b.n	8005460 <HAL_SPI_TransmitReceive+0x144>
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d075      	beq.n	8005460 <HAL_SPI_TransmitReceive+0x144>
 8005374:	2f00      	cmp	r7, #0
 8005376:	d073      	beq.n	8005460 <HAL_SPI_TransmitReceive+0x144>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005378:	0023      	movs	r3, r4
 800537a:	3351      	adds	r3, #81	; 0x51
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	2a04      	cmp	r2, #4
 8005380:	d001      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x6a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005382:	2205      	movs	r2, #5
 8005384:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005386:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005388:	9a01      	ldr	r2, [sp, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800538a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800538c:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800538e:	2240      	movs	r2, #64	; 0x40
  hspi->RxISR       = NULL;
 8005390:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005392:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005394:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005396:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8005398:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800539a:	6818      	ldr	r0, [r3, #0]
  hspi->RxXferSize  = Size;
 800539c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800539e:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053a0:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053a2:	4210      	tst	r0, r2
 80053a4:	d102      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x90>
    __HAL_SPI_ENABLE(hspi);
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	4302      	orrs	r2, r0
 80053aa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053ac:	2280      	movs	r2, #128	; 0x80
 80053ae:	68e0      	ldr	r0, [r4, #12]
 80053b0:	0112      	lsls	r2, r2, #4
 80053b2:	4290      	cmp	r0, r2
 80053b4:	d15e      	bne.n	8005474 <HAL_SPI_TransmitReceive+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d001      	beq.n	80053be <HAL_SPI_TransmitReceive+0xa2>
 80053ba:	2f01      	cmp	r7, #1
 80053bc:	d107      	bne.n	80053ce <HAL_SPI_TransmitReceive+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053be:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c0:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053c2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80053c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c6:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80053ce:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053d0:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053d2:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d115      	bne.n	8005406 <HAL_SPI_TransmitReceive+0xea>
 80053da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d112      	bne.n	8005406 <HAL_SPI_TransmitReceive+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e0:	9a00      	ldr	r2, [sp, #0]
 80053e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053e4:	0020      	movs	r0, r4
 80053e6:	f7ff fe6b 	bl	80050c0 <SPI_EndRxTxTransaction>
 80053ea:	1e05      	subs	r5, r0, #0
 80053ec:	d000      	beq.n	80053f0 <HAL_SPI_TransmitReceive+0xd4>
 80053ee:	e087      	b.n	8005500 <HAL_SPI_TransmitReceive+0x1e4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053f0:	68a3      	ldr	r3, [r4, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d134      	bne.n	8005460 <HAL_SPI_TransmitReceive+0x144>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	9003      	str	r0, [sp, #12]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	9203      	str	r2, [sp, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	9303      	str	r3, [sp, #12]
 8005402:	9b03      	ldr	r3, [sp, #12]
 8005404:	e02c      	b.n	8005460 <HAL_SPI_TransmitReceive+0x144>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	6893      	ldr	r3, [r2, #8]
 800540a:	423b      	tst	r3, r7
 800540c:	d00e      	beq.n	800542c <HAL_SPI_TransmitReceive+0x110>
 800540e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <HAL_SPI_TransmitReceive+0x110>
 8005414:	2d01      	cmp	r5, #1
 8005416:	d109      	bne.n	800542c <HAL_SPI_TransmitReceive+0x110>
        txallowed = 0U;
 8005418:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800541c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800541e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005420:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005422:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005424:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005426:	3b01      	subs	r3, #1
 8005428:	b29b      	uxth	r3, r3
 800542a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800542c:	6893      	ldr	r3, [r2, #8]
 800542e:	4233      	tst	r3, r6
 8005430:	d00c      	beq.n	800544c <HAL_SPI_TransmitReceive+0x130>
 8005432:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005434:	2b00      	cmp	r3, #0
 8005436:	d009      	beq.n	800544c <HAL_SPI_TransmitReceive+0x130>
        txallowed = 1U;
 8005438:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800543a:	68d2      	ldr	r2, [r2, #12]
 800543c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800543e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005440:	3302      	adds	r3, #2
 8005442:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005444:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005446:	3b01      	subs	r3, #1
 8005448:	b29b      	uxth	r3, r3
 800544a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800544c:	f7fd fdb4 	bl	8002fb8 <HAL_GetTick>
 8005450:	9b00      	ldr	r3, [sp, #0]
 8005452:	1ac0      	subs	r0, r0, r3
 8005454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005456:	4283      	cmp	r3, r0
 8005458:	d8bc      	bhi.n	80053d4 <HAL_SPI_TransmitReceive+0xb8>
 800545a:	3301      	adds	r3, #1
 800545c:	d0ba      	beq.n	80053d4 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 800545e:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005460:	0023      	movs	r3, r4
 8005462:	2201      	movs	r2, #1
 8005464:	3351      	adds	r3, #81	; 0x51
 8005466:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8005468:	2300      	movs	r3, #0
 800546a:	3450      	adds	r4, #80	; 0x50
 800546c:	7023      	strb	r3, [r4, #0]
}
 800546e:	0028      	movs	r0, r5
 8005470:	b005      	add	sp, #20
 8005472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005474:	2900      	cmp	r1, #0
 8005476:	d001      	beq.n	800547c <HAL_SPI_TransmitReceive+0x160>
 8005478:	2f01      	cmp	r7, #1
 800547a:	d108      	bne.n	800548e <HAL_SPI_TransmitReceive+0x172>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800547c:	7832      	ldrb	r2, [r6, #0]
 800547e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005480:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005482:	3301      	adds	r3, #1
 8005484:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005486:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005488:	3b01      	subs	r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800548e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005490:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005492:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005494:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x184>
 800549a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800549c:	2b00      	cmp	r3, #0
 800549e:	d09f      	beq.n	80053e0 <HAL_SPI_TransmitReceive+0xc4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	423a      	tst	r2, r7
 80054a6:	d00f      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x1ac>
 80054a8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80054aa:	2a00      	cmp	r2, #0
 80054ac:	d00c      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x1ac>
 80054ae:	2d01      	cmp	r5, #1
 80054b0:	d10a      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x1ac>
        txallowed = 0U;
 80054b2:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054b6:	7812      	ldrb	r2, [r2, #0]
 80054b8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80054ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054bc:	3301      	adds	r3, #1
 80054be:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80054c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	4232      	tst	r2, r6
 80054ce:	d00d      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x1d0>
 80054d0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80054d2:	2a00      	cmp	r2, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x1d0>
        txallowed = 1U;
 80054d6:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054dc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 80054de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054e0:	3301      	adds	r3, #1
 80054e2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80054e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054ec:	f7fd fd64 	bl	8002fb8 <HAL_GetTick>
 80054f0:	9b00      	ldr	r3, [sp, #0]
 80054f2:	1ac0      	subs	r0, r0, r3
 80054f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f6:	4283      	cmp	r3, r0
 80054f8:	d8cc      	bhi.n	8005494 <HAL_SPI_TransmitReceive+0x178>
 80054fa:	3301      	adds	r3, #1
 80054fc:	d0ca      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x178>
 80054fe:	e7ae      	b.n	800545e <HAL_SPI_TransmitReceive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005500:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005502:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005504:	6563      	str	r3, [r4, #84]	; 0x54
 8005506:	e7ab      	b.n	8005460 <HAL_SPI_TransmitReceive+0x144>

08005508 <HAL_SPI_Receive>:
{
 8005508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550a:	001e      	movs	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800550c:	2382      	movs	r3, #130	; 0x82
{
 800550e:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005510:	6842      	ldr	r2, [r0, #4]
{
 8005512:	b087      	sub	sp, #28
 8005514:	0004      	movs	r4, r0
 8005516:	9102      	str	r1, [sp, #8]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	429a      	cmp	r2, r3
 800551c:	d10f      	bne.n	800553e <HAL_SPI_Receive+0x36>
 800551e:	6883      	ldr	r3, [r0, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10c      	bne.n	800553e <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005524:	0003      	movs	r3, r0
 8005526:	2204      	movs	r2, #4
 8005528:	3351      	adds	r3, #81	; 0x51
 800552a:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800552c:	9600      	str	r6, [sp, #0]
 800552e:	003b      	movs	r3, r7
 8005530:	000a      	movs	r2, r1
 8005532:	f7ff fef3 	bl	800531c <HAL_SPI_TransmitReceive>
 8005536:	0005      	movs	r5, r0
}
 8005538:	0028      	movs	r0, r5
 800553a:	b007      	add	sp, #28
 800553c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800553e:	0023      	movs	r3, r4
 8005540:	3350      	adds	r3, #80	; 0x50
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2502      	movs	r5, #2
 8005548:	2b01      	cmp	r3, #1
 800554a:	d0f5      	beq.n	8005538 <HAL_SPI_Receive+0x30>
 800554c:	2301      	movs	r3, #1
 800554e:	9a04      	ldr	r2, [sp, #16]
 8005550:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8005552:	f7fd fd31 	bl	8002fb8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005556:	0023      	movs	r3, r4
 8005558:	3351      	adds	r3, #81	; 0x51
  tickstart = HAL_GetTick();
 800555a:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 800555c:	9305      	str	r3, [sp, #20]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b01      	cmp	r3, #1
 8005564:	d14f      	bne.n	8005606 <HAL_SPI_Receive+0xfe>
  if ((pData == NULL) || (Size == 0U))
 8005566:	9a02      	ldr	r2, [sp, #8]
    errorcode = HAL_ERROR;
 8005568:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 800556a:	2a00      	cmp	r2, #0
 800556c:	d04b      	beq.n	8005606 <HAL_SPI_Receive+0xfe>
 800556e:	2f00      	cmp	r7, #0
 8005570:	d049      	beq.n	8005606 <HAL_SPI_Receive+0xfe>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005572:	9a05      	ldr	r2, [sp, #20]
 8005574:	3303      	adds	r3, #3
 8005576:	7013      	strb	r3, [r2, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005578:	9a02      	ldr	r2, [sp, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800557a:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800557c:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005582:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005584:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8005586:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8005588:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800558a:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800558c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800558e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 8005590:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005592:	0212      	lsls	r2, r2, #8
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	4291      	cmp	r1, r2
 8005598:	d103      	bne.n	80055a2 <HAL_SPI_Receive+0x9a>
    SPI_1LINE_RX(hspi);
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	492c      	ldr	r1, [pc, #176]	; (8005650 <HAL_SPI_Receive+0x148>)
 800559e:	400a      	ands	r2, r1
 80055a0:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a2:	2240      	movs	r2, #64	; 0x40
 80055a4:	6819      	ldr	r1, [r3, #0]
 80055a6:	4211      	tst	r1, r2
 80055a8:	d102      	bne.n	80055b0 <HAL_SPI_Receive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80055aa:	6819      	ldr	r1, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055b0:	68e3      	ldr	r3, [r4, #12]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055b2:	2501      	movs	r5, #1
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d13a      	bne.n	800562e <HAL_SPI_Receive+0x126>
    while (hspi->RxXferCount > 0U)
 80055b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <HAL_SPI_Receive+0xce>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055be:	9a03      	ldr	r2, [sp, #12]
 80055c0:	0031      	movs	r1, r6
 80055c2:	0020      	movs	r0, r4
 80055c4:	f7ff fd52 	bl	800506c <SPI_EndRxTransaction>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d13d      	bne.n	8005648 <HAL_SPI_Receive+0x140>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055cc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80055ce:	1e6b      	subs	r3, r5, #1
 80055d0:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 80055d2:	b2ed      	uxtb	r5, r5
 80055d4:	e017      	b.n	8005606 <HAL_SPI_Receive+0xfe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	422a      	tst	r2, r5
 80055dc:	d00a      	beq.n	80055f4 <HAL_SPI_Receive+0xec>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055de:	7b1b      	ldrb	r3, [r3, #12]
 80055e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055e2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055e6:	3301      	adds	r3, #1
 80055e8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80055ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80055f2:	e7e1      	b.n	80055b8 <HAL_SPI_Receive+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f4:	f7fd fce0 	bl	8002fb8 <HAL_GetTick>
 80055f8:	9b03      	ldr	r3, [sp, #12]
 80055fa:	1ac0      	subs	r0, r0, r3
 80055fc:	4286      	cmp	r6, r0
 80055fe:	d8db      	bhi.n	80055b8 <HAL_SPI_Receive+0xb0>
 8005600:	1c73      	adds	r3, r6, #1
 8005602:	d0d9      	beq.n	80055b8 <HAL_SPI_Receive+0xb0>
          errorcode = HAL_TIMEOUT;
 8005604:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005606:	2301      	movs	r3, #1
 8005608:	9a05      	ldr	r2, [sp, #20]
 800560a:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800560c:	2300      	movs	r3, #0
 800560e:	9a04      	ldr	r2, [sp, #16]
 8005610:	7013      	strb	r3, [r2, #0]
  return errorcode;
 8005612:	e791      	b.n	8005538 <HAL_SPI_Receive+0x30>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	6893      	ldr	r3, [r2, #8]
 8005618:	422b      	tst	r3, r5
 800561a:	d00c      	beq.n	8005636 <HAL_SPI_Receive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800561c:	68d2      	ldr	r2, [r2, #12]
 800561e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005622:	3302      	adds	r3, #2
 8005624:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005626:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005628:	3b01      	subs	r3, #1
 800562a:	b29b      	uxth	r3, r3
 800562c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800562e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ef      	bne.n	8005614 <HAL_SPI_Receive+0x10c>
 8005634:	e7c3      	b.n	80055be <HAL_SPI_Receive+0xb6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005636:	f7fd fcbf 	bl	8002fb8 <HAL_GetTick>
 800563a:	9b03      	ldr	r3, [sp, #12]
 800563c:	1ac0      	subs	r0, r0, r3
 800563e:	4286      	cmp	r6, r0
 8005640:	d8f5      	bhi.n	800562e <HAL_SPI_Receive+0x126>
 8005642:	1c73      	adds	r3, r6, #1
 8005644:	d0f3      	beq.n	800562e <HAL_SPI_Receive+0x126>
 8005646:	e7dd      	b.n	8005604 <HAL_SPI_Receive+0xfc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005648:	2320      	movs	r3, #32
 800564a:	6563      	str	r3, [r4, #84]	; 0x54
 800564c:	e7be      	b.n	80055cc <HAL_SPI_Receive+0xc4>
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	ffffbfff 	.word	0xffffbfff

08005654 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005654:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 8005656:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005658:	05d2      	lsls	r2, r2, #23
 800565a:	4290      	cmp	r0, r2
 800565c:	d008      	beq.n	8005670 <TIM_Base_SetConfig+0x1c>
 800565e:	4a15      	ldr	r2, [pc, #84]	; (80056b4 <TIM_Base_SetConfig+0x60>)
 8005660:	4290      	cmp	r0, r2
 8005662:	d005      	beq.n	8005670 <TIM_Base_SetConfig+0x1c>
 8005664:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <TIM_Base_SetConfig+0x64>)
 8005666:	4290      	cmp	r0, r2
 8005668:	d002      	beq.n	8005670 <TIM_Base_SetConfig+0x1c>
 800566a:	4a14      	ldr	r2, [pc, #80]	; (80056bc <TIM_Base_SetConfig+0x68>)
 800566c:	4290      	cmp	r0, r2
 800566e:	d114      	bne.n	800569a <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005670:	2270      	movs	r2, #112	; 0x70
 8005672:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8005674:	684a      	ldr	r2, [r1, #4]
 8005676:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005678:	2280      	movs	r2, #128	; 0x80
 800567a:	05d2      	lsls	r2, r2, #23
 800567c:	4290      	cmp	r0, r2
 800567e:	d008      	beq.n	8005692 <TIM_Base_SetConfig+0x3e>
 8005680:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <TIM_Base_SetConfig+0x60>)
 8005682:	4290      	cmp	r0, r2
 8005684:	d005      	beq.n	8005692 <TIM_Base_SetConfig+0x3e>
 8005686:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <TIM_Base_SetConfig+0x64>)
 8005688:	4290      	cmp	r0, r2
 800568a:	d002      	beq.n	8005692 <TIM_Base_SetConfig+0x3e>
 800568c:	4a0b      	ldr	r2, [pc, #44]	; (80056bc <TIM_Base_SetConfig+0x68>)
 800568e:	4290      	cmp	r0, r2
 8005690:	d103      	bne.n	800569a <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005692:	4a0b      	ldr	r2, [pc, #44]	; (80056c0 <TIM_Base_SetConfig+0x6c>)
 8005694:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005696:	68ca      	ldr	r2, [r1, #12]
 8005698:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569a:	2280      	movs	r2, #128	; 0x80
 800569c:	4393      	bics	r3, r2
 800569e:	690a      	ldr	r2, [r1, #16]
 80056a0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80056a2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a4:	688b      	ldr	r3, [r1, #8]
 80056a6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a8:	680b      	ldr	r3, [r1, #0]
 80056aa:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ac:	2301      	movs	r3, #1
 80056ae:	6143      	str	r3, [r0, #20]
}
 80056b0:	4770      	bx	lr
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40010800 	.word	0x40010800
 80056bc:	40011400 	.word	0x40011400
 80056c0:	fffffcff 	.word	0xfffffcff

080056c4 <HAL_TIM_Base_Init>:
{
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80056c8:	2001      	movs	r0, #1
  if (htim == NULL)
 80056ca:	2c00      	cmp	r4, #0
 80056cc:	d014      	beq.n	80056f8 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 80056ce:	0025      	movs	r5, r4
 80056d0:	3539      	adds	r5, #57	; 0x39
 80056d2:	782b      	ldrb	r3, [r5, #0]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80056da:	0022      	movs	r2, r4
 80056dc:	3238      	adds	r2, #56	; 0x38
 80056de:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80056e0:	0020      	movs	r0, r4
 80056e2:	f001 fae5 	bl	8006cb0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80056e6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80056ea:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ec:	1d21      	adds	r1, r4, #4
 80056ee:	f7ff ffb1 	bl	8005654 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80056f2:	2301      	movs	r3, #1
  return HAL_OK;
 80056f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80056f6:	702b      	strb	r3, [r5, #0]
}
 80056f8:	bd70      	pop	{r4, r5, r6, pc}

080056fa <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80056fa:	0001      	movs	r1, r0
 80056fc:	2302      	movs	r3, #2
 80056fe:	3139      	adds	r1, #57	; 0x39
 8005700:	700b      	strb	r3, [r1, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005702:	6803      	ldr	r3, [r0, #0]
 8005704:	2007      	movs	r0, #7
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	2a06      	cmp	r2, #6
 800570c:	d003      	beq.n	8005716 <HAL_TIM_Base_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 800570e:	2201      	movs	r2, #1
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	4302      	orrs	r2, r0
 8005714:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005716:	2301      	movs	r3, #1
}
 8005718:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800571a:	700b      	strb	r3, [r1, #0]
}
 800571c:	4770      	bx	lr
	...

08005720 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	0001      	movs	r1, r0
 8005722:	2302      	movs	r3, #2
 8005724:	3139      	adds	r1, #57	; 0x39
 8005726:	700b      	strb	r3, [r1, #0]
  __HAL_TIM_DISABLE(htim);
 8005728:	6803      	ldr	r3, [r0, #0]
 800572a:	4a06      	ldr	r2, [pc, #24]	; (8005744 <HAL_TIM_Base_Stop+0x24>)
 800572c:	6a18      	ldr	r0, [r3, #32]
 800572e:	4210      	tst	r0, r2
 8005730:	d103      	bne.n	800573a <HAL_TIM_Base_Stop+0x1a>
 8005732:	2001      	movs	r0, #1
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	4382      	bics	r2, r0
 8005738:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800573a:	2301      	movs	r3, #1
}
 800573c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800573e:	700b      	strb	r3, [r1, #0]
}
 8005740:	4770      	bx	lr
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	00001111 	.word	0x00001111

08005748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005748:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	0004      	movs	r4, r0
 800574c:	3438      	adds	r4, #56	; 0x38
 800574e:	7822      	ldrb	r2, [r4, #0]
{
 8005750:	0003      	movs	r3, r0
 8005752:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8005754:	2a01      	cmp	r2, #1
 8005756:	d013      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800575a:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800575c:	3539      	adds	r5, #57	; 0x39
 800575e:	7028      	strb	r0, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005764:	6883      	ldr	r3, [r0, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005766:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005768:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800576c:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 800576e:	2680      	movs	r6, #128	; 0x80
 8005770:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005772:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005774:	6042      	str	r2, [r0, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005776:	6083      	str	r3, [r0, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005778:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800577a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800577c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800577e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005780:	bd70      	pop	{r4, r5, r6, pc}

08005782 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005782:	b570      	push	{r4, r5, r6, lr}
 8005784:	0005      	movs	r5, r0
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
 8005786:	2001      	movs	r0, #1
  if (huart == NULL)
 8005788:	2d00      	cmp	r5, #0
 800578a:	d012      	beq.n	80057b2 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800578c:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 800578e:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8005790:	676b      	str	r3, [r5, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005792:	682b      	ldr	r3, [r5, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4382      	bics	r2, r0
 8005798:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800579a:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 800579c:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800579e:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80057a0:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80057a2:	f001 fac1 	bl	8006d28 <HAL_UART_MspDeInit>
  huart->RxState = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 80057a6:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a8:	67ec      	str	r4, [r5, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 80057aa:	676c      	str	r4, [r5, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80057ac:	67ac      	str	r4, [r5, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80057ae:	3570      	adds	r5, #112	; 0x70
 80057b0:	702c      	strb	r4, [r5, #0]
}
 80057b2:	bd70      	pop	{r4, r5, r6, pc}

080057b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b8:	6925      	ldr	r5, [r4, #16]
 80057ba:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80057bc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057be:	432a      	orrs	r2, r5
 80057c0:	6965      	ldr	r5, [r4, #20]
 80057c2:	69c1      	ldr	r1, [r0, #28]
 80057c4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	4d81      	ldr	r5, [pc, #516]	; (80059d0 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057ca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057cc:	4028      	ands	r0, r5
 80057ce:	4302      	orrs	r2, r0
 80057d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	487f      	ldr	r0, [pc, #508]	; (80059d4 <UART_SetConfig+0x220>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057d6:	4d80      	ldr	r5, [pc, #512]	; (80059d8 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057d8:	4002      	ands	r2, r0
 80057da:	68e0      	ldr	r0, [r4, #12]
 80057dc:	4302      	orrs	r2, r0
 80057de:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e2:	42ab      	cmp	r3, r5
 80057e4:	d001      	beq.n	80057ea <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057e6:	6a22      	ldr	r2, [r4, #32]
 80057e8:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	4e7b      	ldr	r6, [pc, #492]	; (80059dc <UART_SetConfig+0x228>)
 80057ee:	4032      	ands	r2, r6
 80057f0:	4302      	orrs	r2, r0
 80057f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057f4:	4a7a      	ldr	r2, [pc, #488]	; (80059e0 <UART_SetConfig+0x22c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d113      	bne.n	8005822 <UART_SetConfig+0x6e>
 80057fa:	2203      	movs	r2, #3
 80057fc:	4b79      	ldr	r3, [pc, #484]	; (80059e4 <UART_SetConfig+0x230>)
 80057fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005800:	4013      	ands	r3, r2
 8005802:	4a79      	ldr	r2, [pc, #484]	; (80059e8 <UART_SetConfig+0x234>)
 8005804:	5cd0      	ldrb	r0, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005806:	2380      	movs	r3, #128	; 0x80
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	4299      	cmp	r1, r3
 800580c:	d100      	bne.n	8005810 <UART_SetConfig+0x5c>
 800580e:	e0d1      	b.n	80059b4 <UART_SetConfig+0x200>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8005810:	2808      	cmp	r0, #8
 8005812:	d826      	bhi.n	8005862 <UART_SetConfig+0xae>
 8005814:	f7fa fc8a 	bl	800012c <__gnu_thumb1_case_uqi>
 8005818:	259996c0 	.word	0x259996c0
 800581c:	252525b4 	.word	0x252525b4
 8005820:	b7          	.byte	0xb7
 8005821:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005822:	4a72      	ldr	r2, [pc, #456]	; (80059ec <UART_SetConfig+0x238>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d105      	bne.n	8005834 <UART_SetConfig+0x80>
 8005828:	220c      	movs	r2, #12
 800582a:	4b6e      	ldr	r3, [pc, #440]	; (80059e4 <UART_SetConfig+0x230>)
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	4013      	ands	r3, r2
 8005830:	4a6f      	ldr	r2, [pc, #444]	; (80059f0 <UART_SetConfig+0x23c>)
 8005832:	e7e7      	b.n	8005804 <UART_SetConfig+0x50>
 8005834:	4a6f      	ldr	r2, [pc, #444]	; (80059f4 <UART_SetConfig+0x240>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d100      	bne.n	800583c <UART_SetConfig+0x88>
 800583a:	e0a9      	b.n	8005990 <UART_SetConfig+0x1dc>
 800583c:	4a6e      	ldr	r2, [pc, #440]	; (80059f8 <UART_SetConfig+0x244>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d100      	bne.n	8005844 <UART_SetConfig+0x90>
 8005842:	e0a5      	b.n	8005990 <UART_SetConfig+0x1dc>
 8005844:	42ab      	cmp	r3, r5
 8005846:	d000      	beq.n	800584a <UART_SetConfig+0x96>
 8005848:	e0ad      	b.n	80059a6 <UART_SetConfig+0x1f2>
 800584a:	21c0      	movs	r1, #192	; 0xc0
 800584c:	2080      	movs	r0, #128	; 0x80
 800584e:	4a65      	ldr	r2, [pc, #404]	; (80059e4 <UART_SetConfig+0x230>)
 8005850:	0109      	lsls	r1, r1, #4
 8005852:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005854:	00c0      	lsls	r0, r0, #3
 8005856:	400b      	ands	r3, r1
 8005858:	4283      	cmp	r3, r0
 800585a:	d038      	beq.n	80058ce <UART_SetConfig+0x11a>
 800585c:	d803      	bhi.n	8005866 <UART_SetConfig+0xb2>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8005862:	2501      	movs	r5, #1
 8005864:	e00d      	b.n	8005882 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005866:	2080      	movs	r0, #128	; 0x80
 8005868:	0100      	lsls	r0, r0, #4
 800586a:	4283      	cmp	r3, r0
 800586c:	d00e      	beq.n	800588c <UART_SetConfig+0xd8>
 800586e:	428b      	cmp	r3, r1
 8005870:	d1f7      	bne.n	8005862 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005872:	2080      	movs	r0, #128	; 0x80
 8005874:	0200      	lsls	r0, r0, #8
 8005876:	e00d      	b.n	8005894 <UART_SetConfig+0xe0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005878:	f7fe ff74 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
 800587c:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 800587e:	42a8      	cmp	r0, r5
 8005880:	d108      	bne.n	8005894 <UART_SetConfig+0xe0>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005882:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8005884:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8005886:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005888:	6663      	str	r3, [r4, #100]	; 0x64
}
 800588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800588c:	6813      	ldr	r3, [r2, #0]
 800588e:	06db      	lsls	r3, r3, #27
 8005890:	d520      	bpl.n	80058d4 <UART_SetConfig+0x120>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8005892:	485a      	ldr	r0, [pc, #360]	; (80059fc <UART_SetConfig+0x248>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005894:	2203      	movs	r2, #3
 8005896:	6863      	ldr	r3, [r4, #4]
 8005898:	435a      	muls	r2, r3
 800589a:	4282      	cmp	r2, r0
 800589c:	d8e1      	bhi.n	8005862 <UART_SetConfig+0xae>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800589e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058a0:	4282      	cmp	r2, r0
 80058a2:	d3de      	bcc.n	8005862 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80058a4:	2700      	movs	r7, #0
 80058a6:	0e02      	lsrs	r2, r0, #24
 80058a8:	0201      	lsls	r1, r0, #8
 80058aa:	085e      	lsrs	r6, r3, #1
 80058ac:	1989      	adds	r1, r1, r6
 80058ae:	417a      	adcs	r2, r7
 80058b0:	0008      	movs	r0, r1
 80058b2:	0011      	movs	r1, r2
 80058b4:	001a      	movs	r2, r3
 80058b6:	003b      	movs	r3, r7
 80058b8:	f7fa fe3a 	bl	8000530 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058bc:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <UART_SetConfig+0x24c>)
 80058be:	18c2      	adds	r2, r0, r3
 80058c0:	4b50      	ldr	r3, [pc, #320]	; (8005a04 <UART_SetConfig+0x250>)
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d8cd      	bhi.n	8005862 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	003d      	movs	r5, r7
 80058ca:	60d8      	str	r0, [r3, #12]
 80058cc:	e7d9      	b.n	8005882 <UART_SetConfig+0xce>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80058ce:	f7fe fbcf 	bl	8004070 <HAL_RCC_GetSysClockFreq>
        break;
 80058d2:	e7d3      	b.n	800587c <UART_SetConfig+0xc8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80058d4:	484c      	ldr	r0, [pc, #304]	; (8005a08 <UART_SetConfig+0x254>)
 80058d6:	e7dd      	b.n	8005894 <UART_SetConfig+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80058d8:	f7fe ff44 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80058dc:	6863      	ldr	r3, [r4, #4]
 80058de:	0040      	lsls	r0, r0, #1
 80058e0:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80058e2:	18c0      	adds	r0, r0, r3
 80058e4:	6861      	ldr	r1, [r4, #4]
 80058e6:	e00b      	b.n	8005900 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80058e8:	f7fe ff4c 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 80058ec:	e7f6      	b.n	80058dc <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ee:	2510      	movs	r5, #16
 80058f0:	4b3c      	ldr	r3, [pc, #240]	; (80059e4 <UART_SetConfig+0x230>)
 80058f2:	6861      	ldr	r1, [r4, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80058f6:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f8:	4015      	ands	r5, r2
 80058fa:	d006      	beq.n	800590a <UART_SetConfig+0x156>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80058fc:	4b43      	ldr	r3, [pc, #268]	; (8005a0c <UART_SetConfig+0x258>)
 80058fe:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005900:	f7fa fc28 	bl	8000154 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005904:	2500      	movs	r5, #0
 8005906:	b283      	uxth	r3, r0
        break;
 8005908:	e004      	b.n	8005914 <UART_SetConfig+0x160>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800590a:	4b41      	ldr	r3, [pc, #260]	; (8005a10 <UART_SetConfig+0x25c>)
 800590c:	18c0      	adds	r0, r0, r3
 800590e:	f7fa fc21 	bl	8000154 <__udivsi3>
 8005912:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005914:	0019      	movs	r1, r3
 8005916:	483f      	ldr	r0, [pc, #252]	; (8005a14 <UART_SetConfig+0x260>)
 8005918:	3910      	subs	r1, #16
 800591a:	4281      	cmp	r1, r0
 800591c:	d8a1      	bhi.n	8005862 <UART_SetConfig+0xae>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800591e:	210f      	movs	r1, #15
 8005920:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005922:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005924:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005926:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 800592c:	60cb      	str	r3, [r1, #12]
 800592e:	e7a8      	b.n	8005882 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005930:	f7fe fb9e 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8005934:	e7d2      	b.n	80058dc <UART_SetConfig+0x128>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	0858      	lsrs	r0, r3, #1
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	025b      	lsls	r3, r3, #9
 800593e:	e7d0      	b.n	80058e2 <UART_SetConfig+0x12e>
  uint32_t usartdiv                   = 0x00000000U;
 8005940:	2300      	movs	r3, #0
 8005942:	e7e7      	b.n	8005914 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005944:	f7fe ff1e 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 8005948:	e028      	b.n	800599c <UART_SetConfig+0x1e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800594a:	2510      	movs	r5, #16
 800594c:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <UART_SetConfig+0x230>)
 800594e:	6861      	ldr	r1, [r4, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005952:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005954:	4015      	ands	r5, r2
 8005956:	d006      	beq.n	8005966 <UART_SetConfig+0x1b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005958:	4b28      	ldr	r3, [pc, #160]	; (80059fc <UART_SetConfig+0x248>)
 800595a:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800595c:	f7fa fbfa 	bl	8000154 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005960:	2500      	movs	r5, #0
 8005962:	b283      	uxth	r3, r0
        break;
 8005964:	e004      	b.n	8005970 <UART_SetConfig+0x1bc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005966:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <UART_SetConfig+0x254>)
 8005968:	18c0      	adds	r0, r0, r3
 800596a:	f7fa fbf3 	bl	8000154 <__udivsi3>
 800596e:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005970:	0019      	movs	r1, r3
 8005972:	4828      	ldr	r0, [pc, #160]	; (8005a14 <UART_SetConfig+0x260>)
 8005974:	3910      	subs	r1, #16
 8005976:	4281      	cmp	r1, r0
 8005978:	d900      	bls.n	800597c <UART_SetConfig+0x1c8>
 800597a:	e772      	b.n	8005862 <UART_SetConfig+0xae>
      huart->Instance->BRR = usartdiv;
 800597c:	6821      	ldr	r1, [r4, #0]
 800597e:	e7d5      	b.n	800592c <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005980:	f7fe fb76 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 8005984:	e00a      	b.n	800599c <UART_SetConfig+0x1e8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005986:	6863      	ldr	r3, [r4, #4]
 8005988:	0858      	lsrs	r0, r3, #1
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	e007      	b.n	80059a0 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	4299      	cmp	r1, r3
 8005996:	d09f      	beq.n	80058d8 <UART_SetConfig+0x124>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005998:	f7fe fee4 	bl	8004764 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800599c:	6863      	ldr	r3, [r4, #4]
 800599e:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80059a0:	18c0      	adds	r0, r0, r3
 80059a2:	6861      	ldr	r1, [r4, #4]
 80059a4:	e7da      	b.n	800595c <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a6:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 80059a8:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	4299      	cmp	r1, r3
 80059ae:	d0c7      	beq.n	8005940 <UART_SetConfig+0x18c>
  uint32_t usartdiv                   = 0x00000000U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e7dd      	b.n	8005970 <UART_SetConfig+0x1bc>
    switch (clocksource)
 80059b4:	2808      	cmp	r0, #8
 80059b6:	d900      	bls.n	80059ba <UART_SetConfig+0x206>
 80059b8:	e753      	b.n	8005862 <UART_SetConfig+0xae>
 80059ba:	f7fa fbc1 	bl	8000140 <__gnu_thumb1_case_shi>
 80059be:	ff8d      	.short	0xff8d
 80059c0:	ff98ff95 	.word	0xff98ff95
 80059c4:	ffb9ff52 	.word	0xffb9ff52
 80059c8:	ff52ff52 	.word	0xff52ff52
 80059cc:	ffbcff52 	.word	0xffbcff52
 80059d0:	efff69f3 	.word	0xefff69f3
 80059d4:	ffffcfff 	.word	0xffffcfff
 80059d8:	40004800 	.word	0x40004800
 80059dc:	fffff4ff 	.word	0xfffff4ff
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40021000 	.word	0x40021000
 80059e8:	0800a3c0 	.word	0x0800a3c0
 80059ec:	40004400 	.word	0x40004400
 80059f0:	0800a3c4 	.word	0x0800a3c4
 80059f4:	40004c00 	.word	0x40004c00
 80059f8:	40005000 	.word	0x40005000
 80059fc:	003d0900 	.word	0x003d0900
 8005a00:	fffffd00 	.word	0xfffffd00
 8005a04:	000ffcff 	.word	0x000ffcff
 8005a08:	00f42400 	.word	0x00f42400
 8005a0c:	007a1200 	.word	0x007a1200
 8005a10:	01e84800 	.word	0x01e84800
 8005a14:	0000ffef 	.word	0x0000ffef

08005a18 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a18:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005a1a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a1c:	07da      	lsls	r2, r3, #31
 8005a1e:	d506      	bpl.n	8005a2e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a20:	6801      	ldr	r1, [r0, #0]
 8005a22:	4c28      	ldr	r4, [pc, #160]	; (8005ac4 <UART_AdvFeatureConfig+0xac>)
 8005a24:	684a      	ldr	r2, [r1, #4]
 8005a26:	4022      	ands	r2, r4
 8005a28:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005a2a:	4322      	orrs	r2, r4
 8005a2c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a2e:	079a      	lsls	r2, r3, #30
 8005a30:	d506      	bpl.n	8005a40 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a32:	6801      	ldr	r1, [r0, #0]
 8005a34:	4c24      	ldr	r4, [pc, #144]	; (8005ac8 <UART_AdvFeatureConfig+0xb0>)
 8005a36:	684a      	ldr	r2, [r1, #4]
 8005a38:	4022      	ands	r2, r4
 8005a3a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005a3c:	4322      	orrs	r2, r4
 8005a3e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a40:	075a      	lsls	r2, r3, #29
 8005a42:	d506      	bpl.n	8005a52 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a44:	6801      	ldr	r1, [r0, #0]
 8005a46:	4c21      	ldr	r4, [pc, #132]	; (8005acc <UART_AdvFeatureConfig+0xb4>)
 8005a48:	684a      	ldr	r2, [r1, #4]
 8005a4a:	4022      	ands	r2, r4
 8005a4c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005a4e:	4322      	orrs	r2, r4
 8005a50:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a52:	071a      	lsls	r2, r3, #28
 8005a54:	d506      	bpl.n	8005a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a56:	6801      	ldr	r1, [r0, #0]
 8005a58:	4c1d      	ldr	r4, [pc, #116]	; (8005ad0 <UART_AdvFeatureConfig+0xb8>)
 8005a5a:	684a      	ldr	r2, [r1, #4]
 8005a5c:	4022      	ands	r2, r4
 8005a5e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005a60:	4322      	orrs	r2, r4
 8005a62:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a64:	06da      	lsls	r2, r3, #27
 8005a66:	d506      	bpl.n	8005a76 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a68:	6801      	ldr	r1, [r0, #0]
 8005a6a:	4c1a      	ldr	r4, [pc, #104]	; (8005ad4 <UART_AdvFeatureConfig+0xbc>)
 8005a6c:	688a      	ldr	r2, [r1, #8]
 8005a6e:	4022      	ands	r2, r4
 8005a70:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005a72:	4322      	orrs	r2, r4
 8005a74:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a76:	069a      	lsls	r2, r3, #26
 8005a78:	d506      	bpl.n	8005a88 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a7a:	6801      	ldr	r1, [r0, #0]
 8005a7c:	4c16      	ldr	r4, [pc, #88]	; (8005ad8 <UART_AdvFeatureConfig+0xc0>)
 8005a7e:	688a      	ldr	r2, [r1, #8]
 8005a80:	4022      	ands	r2, r4
 8005a82:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005a84:	4322      	orrs	r2, r4
 8005a86:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a88:	065a      	lsls	r2, r3, #25
 8005a8a:	d510      	bpl.n	8005aae <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a8c:	6801      	ldr	r1, [r0, #0]
 8005a8e:	4d13      	ldr	r5, [pc, #76]	; (8005adc <UART_AdvFeatureConfig+0xc4>)
 8005a90:	684a      	ldr	r2, [r1, #4]
 8005a92:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005a94:	402a      	ands	r2, r5
 8005a96:	4322      	orrs	r2, r4
 8005a98:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	0352      	lsls	r2, r2, #13
 8005a9e:	4294      	cmp	r4, r2
 8005aa0:	d105      	bne.n	8005aae <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa2:	684a      	ldr	r2, [r1, #4]
 8005aa4:	4c0e      	ldr	r4, [pc, #56]	; (8005ae0 <UART_AdvFeatureConfig+0xc8>)
 8005aa6:	4022      	ands	r2, r4
 8005aa8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005aaa:	4322      	orrs	r2, r4
 8005aac:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aae:	061b      	lsls	r3, r3, #24
 8005ab0:	d506      	bpl.n	8005ac0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab2:	6802      	ldr	r2, [r0, #0]
 8005ab4:	490b      	ldr	r1, [pc, #44]	; (8005ae4 <UART_AdvFeatureConfig+0xcc>)
 8005ab6:	6853      	ldr	r3, [r2, #4]
 8005ab8:	400b      	ands	r3, r1
 8005aba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005abc:	430b      	orrs	r3, r1
 8005abe:	6053      	str	r3, [r2, #4]
  }
}
 8005ac0:	bd30      	pop	{r4, r5, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	fffdffff 	.word	0xfffdffff
 8005ac8:	fffeffff 	.word	0xfffeffff
 8005acc:	fffbffff 	.word	0xfffbffff
 8005ad0:	ffff7fff 	.word	0xffff7fff
 8005ad4:	ffffefff 	.word	0xffffefff
 8005ad8:	ffffdfff 	.word	0xffffdfff
 8005adc:	ffefffff 	.word	0xffefffff
 8005ae0:	ff9fffff 	.word	0xff9fffff
 8005ae4:	fff7ffff 	.word	0xfff7ffff

08005ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	0004      	movs	r4, r0
 8005aec:	000e      	movs	r6, r1
 8005aee:	0015      	movs	r5, r2
 8005af0:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	69d3      	ldr	r3, [r2, #28]
 8005af6:	4033      	ands	r3, r6
 8005af8:	1b9b      	subs	r3, r3, r6
 8005afa:	4259      	negs	r1, r3
 8005afc:	414b      	adcs	r3, r1
 8005afe:	42ab      	cmp	r3, r5
 8005b00:	d001      	beq.n	8005b06 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005b02:	2000      	movs	r0, #0
 8005b04:	e01b      	b.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8005b06:	9b06      	ldr	r3, [sp, #24]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	d0f3      	beq.n	8005af4 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0c:	f7fd fa54 	bl	8002fb8 <HAL_GetTick>
 8005b10:	9b06      	ldr	r3, [sp, #24]
 8005b12:	1bc0      	subs	r0, r0, r7
 8005b14:	4283      	cmp	r3, r0
 8005b16:	d301      	bcc.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x34>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1ea      	bne.n	8005af2 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	4908      	ldr	r1, [pc, #32]	; (8005b40 <UART_WaitOnFlagUntilTimeout+0x58>)
 8005b20:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8005b22:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b24:	400a      	ands	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	31a3      	adds	r1, #163	; 0xa3
 8005b2c:	31ff      	adds	r1, #255	; 0xff
 8005b2e:	438a      	bics	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005b32:	2320      	movs	r3, #32
 8005b34:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b36:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	3470      	adds	r4, #112	; 0x70
 8005b3c:	7023      	strb	r3, [r4, #0]
}
 8005b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b40:	fffffe5f 	.word	0xfffffe5f

08005b44 <UART_CheckIdleState>:
{
 8005b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b46:	2600      	movs	r6, #0
{
 8005b48:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005b4c:	f7fd fa34 	bl	8002fb8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b50:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005b52:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	071b      	lsls	r3, r3, #28
 8005b58:	d415      	bmi.n	8005b86 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	075b      	lsls	r3, r3, #29
 8005b60:	d50a      	bpl.n	8005b78 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <UART_CheckIdleState+0x5c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	03c9      	lsls	r1, r1, #15
 8005b6c:	002b      	movs	r3, r5
 8005b6e:	0020      	movs	r0, r4
 8005b70:	f7ff ffba 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d111      	bne.n	8005b9c <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8005b78:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005b7a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b7c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b7e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005b80:	3470      	adds	r4, #112	; 0x70
 8005b82:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005b84:	e00b      	b.n	8005b9e <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <UART_CheckIdleState+0x5c>)
 8005b8a:	0032      	movs	r2, r6
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	0389      	lsls	r1, r1, #14
 8005b90:	0003      	movs	r3, r0
 8005b92:	0020      	movs	r0, r4
 8005b94:	f7ff ffa8 	bl	8005ae8 <UART_WaitOnFlagUntilTimeout>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d0de      	beq.n	8005b5a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005b9c:	2003      	movs	r0, #3
}
 8005b9e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005ba0:	01ffffff 	.word	0x01ffffff

08005ba4 <HAL_UART_Init>:
{
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005ba8:	d101      	bne.n	8005bae <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005baa:	2001      	movs	r0, #1
}
 8005bac:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005bae:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	3270      	adds	r2, #112	; 0x70
 8005bb8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005bba:	f001 f887 	bl	8006ccc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005bbe:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005bc6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005bca:	438b      	bics	r3, r1
 8005bcc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bce:	f7ff fdf1 	bl	80057b4 <UART_SetConfig>
 8005bd2:	2801      	cmp	r0, #1
 8005bd4:	d0e9      	beq.n	8005baa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005bdc:	0020      	movs	r0, r4
 8005bde:	f7ff ff1b 	bl	8005a18 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	4907      	ldr	r1, [pc, #28]	; (8005c04 <HAL_UART_Init+0x60>)
 8005be6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005be8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bea:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bec:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	438a      	bics	r2, r1
 8005bf4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005bfe:	f7ff ffa1 	bl	8005b44 <UART_CheckIdleState>
 8005c02:	e7d3      	b.n	8005bac <HAL_UART_Init+0x8>
 8005c04:	ffffb7ff 	.word	0xffffb7ff

08005c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c08:	b530      	push	{r4, r5, lr}
 8005c0a:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c0c:	2238      	movs	r2, #56	; 0x38
 8005c0e:	2100      	movs	r1, #0
 8005c10:	a810      	add	r0, sp, #64	; 0x40
 8005c12:	f002 fbe6 	bl	80083e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c16:	2214      	movs	r2, #20
 8005c18:	2100      	movs	r1, #0
 8005c1a:	a801      	add	r0, sp, #4
 8005c1c:	f002 fbe1 	bl	80083e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c20:	2228      	movs	r2, #40	; 0x28
 8005c22:	2100      	movs	r1, #0
 8005c24:	a806      	add	r0, sp, #24
 8005c26:	f002 fbdc 	bl	80083e2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c2a:	491a      	ldr	r1, [pc, #104]	; (8005c94 <SystemClock_Config+0x8c>)
 8005c2c:	4a1a      	ldr	r2, [pc, #104]	; (8005c98 <SystemClock_Config+0x90>)
 8005c2e:	680b      	ldr	r3, [r1, #0]
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c30:	2580      	movs	r5, #128	; 0x80
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c32:	401a      	ands	r2, r3
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	600b      	str	r3, [r1, #0]
  HAL_PWR_EnableBkUpAccess();
 8005c3c:	f7fe f9d0 	bl	8003fe0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8005c40:	23c0      	movs	r3, #192	; 0xc0
 8005c42:	4a16      	ldr	r2, [pc, #88]	; (8005c9c <SystemClock_Config+0x94>)
 8005c44:	015b      	lsls	r3, r3, #5
 8005c46:	6d11      	ldr	r1, [r2, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005c48:	2400      	movs	r4, #0
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	6513      	str	r3, [r2, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005c4e:	2307      	movs	r3, #7
 8005c50:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005c52:	33f9      	adds	r3, #249	; 0xf9
 8005c54:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c56:	3bff      	subs	r3, #255	; 0xff
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c58:	026d      	lsls	r5, r5, #9
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c5a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c5c:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005c5e:	330f      	adds	r3, #15
 8005c60:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c62:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005c64:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c66:	f7fe fa39 	bl	80040dc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c6a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005c6c:	0021      	movs	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c6e:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005c70:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8005c72:	3b0d      	subs	r3, #13
 8005c74:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c76:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005c78:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c7a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005c7c:	f7fe fcba 	bl	80045f4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8005c80:	232a      	movs	r3, #42	; 0x2a
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c82:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8005c84:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005c86:	940a      	str	r4, [sp, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005c88:	940c      	str	r4, [sp, #48]	; 0x30
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005c8a:	9507      	str	r5, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c8c:	f7fe fd8a 	bl	80047a4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005c90:	b01f      	add	sp, #124	; 0x7c
 8005c92:	bd30      	pop	{r4, r5, pc}
 8005c94:	40007000 	.word	0x40007000
 8005c98:	ffffe7ff 	.word	0xffffe7ff
 8005c9c:	40021000 	.word	0x40021000

08005ca0 <writeError>:

}

/* USER CODE BEGIN 4 */
void writeError(uint8_t _e, uint8_t _forceSleep)
{
 8005ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	000c      	movs	r4, r1
  char _c[9];
  sprintf(_c, errStr, _e);
 8005ca6:	a801      	add	r0, sp, #4
 8005ca8:	4907      	ldr	r1, [pc, #28]	; (8005cc8 <writeError+0x28>)
 8005caa:	f002 feb3 	bl	8008a14 <siprintf>
  glassLCD_WriteData(_c);
 8005cae:	a801      	add	r0, sp, #4
 8005cb0:	f002 f8e2 	bl	8007e78 <glassLCD_WriteData>
  glassLCD_Update();
 8005cb4:	f002 f890 	bl	8007dd8 <glassLCD_Update>
  HAL_Delay(50);
 8005cb8:	2032      	movs	r0, #50	; 0x32
 8005cba:	f7fd f983 	bl	8002fc4 <HAL_Delay>
  if (_forceSleep) HAL_PWR_EnterSTANDBYMode();
 8005cbe:	2c00      	cmp	r4, #0
 8005cc0:	d001      	beq.n	8005cc6 <writeError+0x26>
 8005cc2:	f7fe f9bb 	bl	800403c <HAL_PWR_EnterSTANDBYMode>
}
 8005cc6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8005cc8:	0800a3d1 	.word	0x0800a3d1

08005ccc <getADC>:
  *_energy = current / 40E-3 * 1000;
  *_energyJ = (1 / 1E4) * (*_energy) * 600;
}

uint32_t getADC(uint32_t _ch)
{
 8005ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t _result;
  ADC_ChannelConfTypeDef ch = {0};
 8005cce:	2208      	movs	r2, #8
{
 8005cd0:	0005      	movs	r5, r0
  ADC_ChannelConfTypeDef ch = {0};
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4668      	mov	r0, sp
 8005cd6:	f002 fb84 	bl	80083e2 <memset>

  // Calibrate ADC
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8005cda:	4c12      	ldr	r4, [pc, #72]	; (8005d24 <getADC+0x58>)
 8005cdc:	2100      	movs	r1, #0
 8005cde:	0020      	movs	r0, r4
 8005ce0:	f7fd fc7c 	bl	80035dc <HAL_ADCEx_Calibration_Start>

  // Select the channel (in order to work properly, on all channels ranks have to be set on RANK_NONE!)
  ch.Channel = _ch;
  ch.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005ce4:	2380      	movs	r3, #128	; 0x80
  HAL_ADC_ConfigChannel(&hadc, &ch);
 8005ce6:	4669      	mov	r1, sp
  ch.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005ce8:	015b      	lsls	r3, r3, #5
  HAL_ADC_ConfigChannel(&hadc, &ch);
 8005cea:	0020      	movs	r0, r4
  ch.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005cec:	9301      	str	r3, [sp, #4]
  ch.Channel = _ch;
 8005cee:	9500      	str	r5, [sp, #0]
  HAL_ADC_ConfigChannel(&hadc, &ch);
 8005cf0:	f7fd fc0e 	bl	8003510 <HAL_ADC_ConfigChannel>

  // Start ADC conversion of selected channel
  HAL_ADC_Start(&hadc);
 8005cf4:	0020      	movs	r0, r4
 8005cf6:	f7fd fb5f 	bl	80033b8 <HAL_ADC_Start>

  // Wait for conversion to be complete
  HAL_ADC_PollForConversion(&hadc, 1000);
 8005cfa:	21fa      	movs	r1, #250	; 0xfa
 8005cfc:	0020      	movs	r0, r4
 8005cfe:	0089      	lsls	r1, r1, #2
 8005d00:	f7fd fba4 	bl	800344c <HAL_ADC_PollForConversion>

  // Get the RAW ADC value
  _result = HAL_ADC_GetValue(&hadc);
 8005d04:	0020      	movs	r0, r4
 8005d06:	f7fd fbff 	bl	8003508 <HAL_ADC_GetValue>
 8005d0a:	0005      	movs	r5, r0

  // Stop the ADC
  HAL_ADC_Stop(&hadc);
 8005d0c:	0020      	movs	r0, r4
 8005d0e:	f7fd fb7f 	bl	8003410 <HAL_ADC_Stop>

  // Remove channel from rank
  ch.Rank = ADC_RANK_NONE;
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <getADC+0x5c>)
  HAL_ADC_ConfigChannel(&hadc, &ch);
 8005d14:	4669      	mov	r1, sp
 8005d16:	0020      	movs	r0, r4
  ch.Rank = ADC_RANK_NONE;
 8005d18:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc, &ch);
 8005d1a:	f7fd fbf9 	bl	8003510 <HAL_ADC_ConfigChannel>

  // Return the result
  return _result;
}
 8005d1e:	0028      	movs	r0, r5
 8005d20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	200005b4 	.word	0x200005b4
 8005d28:	00001001 	.word	0x00001001

08005d2c <getSolarData>:
{
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	000f      	movs	r7, r1
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_SET);
 8005d30:	2180      	movs	r1, #128	; 0x80
 8005d32:	2201      	movs	r2, #1
 8005d34:	0109      	lsls	r1, r1, #4
{
 8005d36:	0006      	movs	r6, r0
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_SET);
 8005d38:	4821      	ldr	r0, [pc, #132]	; (8005dc0 <getSolarData+0x94>)
 8005d3a:	f7fd fe3b 	bl	80039b4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8005d3e:	200a      	movs	r0, #10
 8005d40:	f7fd f940 	bl	8002fc4 <HAL_Delay>
  rawAdc = getADC(ADC_CHANNEL_0);
 8005d44:	2001      	movs	r0, #1
 8005d46:	f7ff ffc1 	bl	8005ccc <getADC>
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_RESET);
 8005d4a:	2180      	movs	r1, #128	; 0x80
  rawAdc = getADC(ADC_CHANNEL_0);
 8005d4c:	0004      	movs	r4, r0
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_RESET);
 8005d4e:	2200      	movs	r2, #0
 8005d50:	0109      	lsls	r1, r1, #4
 8005d52:	481b      	ldr	r0, [pc, #108]	; (8005dc0 <getSolarData+0x94>)
 8005d54:	f7fd fe2e 	bl	80039b4 <HAL_GPIO_WritePin>
  voltage = (rawAdc / 4095.0 * 3.3) - 0.004;
 8005d58:	0020      	movs	r0, r4
 8005d5a:	f7fc ffab 	bl	8002cb4 <__aeabi_ui2d>
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4b18      	ldr	r3, [pc, #96]	; (8005dc4 <getSolarData+0x98>)
 8005d62:	f7fb fd67 	bl	8001834 <__aeabi_ddiv>
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <getSolarData+0x9c>)
 8005d68:	4b18      	ldr	r3, [pc, #96]	; (8005dcc <getSolarData+0xa0>)
 8005d6a:	f7fc f997 	bl	800209c <__aeabi_dmul>
 8005d6e:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <getSolarData+0xa4>)
 8005d70:	4b18      	ldr	r3, [pc, #96]	; (8005dd4 <getSolarData+0xa8>)
 8005d72:	f7fc fc13 	bl	800259c <__aeabi_dsub>
  if (voltage < 0) voltage = 0;
 8005d76:	2200      	movs	r2, #0
 8005d78:	2300      	movs	r3, #0
  voltage = (rawAdc / 4095.0 * 3.3) - 0.004;
 8005d7a:	0004      	movs	r4, r0
 8005d7c:	000d      	movs	r5, r1
  if (voltage < 0) voltage = 0;
 8005d7e:	f7fa fb75 	bl	800046c <__aeabi_dcmplt>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d001      	beq.n	8005d8a <getSolarData+0x5e>
 8005d86:	2400      	movs	r4, #0
 8005d88:	2500      	movs	r5, #0
  current = voltage / (220 / 4.7);
 8005d8a:	0029      	movs	r1, r5
 8005d8c:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <getSolarData+0xac>)
 8005d8e:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <getSolarData+0xb0>)
 8005d90:	0020      	movs	r0, r4
 8005d92:	f7fb fd4f 	bl	8001834 <__aeabi_ddiv>
  *_energy = current / 40E-3 * 1000;
 8005d96:	4a12      	ldr	r2, [pc, #72]	; (8005de0 <getSolarData+0xb4>)
 8005d98:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <getSolarData+0xb8>)
 8005d9a:	f7fb fd4b 	bl	8001834 <__aeabi_ddiv>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <getSolarData+0xbc>)
 8005da2:	f7fc f97b 	bl	800209c <__aeabi_dmul>
  *_energyJ = (1 / 1E4) * (*_energy) * 600;
 8005da6:	4a11      	ldr	r2, [pc, #68]	; (8005dec <getSolarData+0xc0>)
  *_energy = current / 40E-3 * 1000;
 8005da8:	6038      	str	r0, [r7, #0]
 8005daa:	6079      	str	r1, [r7, #4]
  *_energyJ = (1 / 1E4) * (*_energy) * 600;
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <getSolarData+0xc4>)
 8005dae:	f7fc f975 	bl	800209c <__aeabi_dmul>
 8005db2:	2200      	movs	r2, #0
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <getSolarData+0xc8>)
 8005db6:	f7fc f971 	bl	800209c <__aeabi_dmul>
 8005dba:	6030      	str	r0, [r6, #0]
 8005dbc:	6071      	str	r1, [r6, #4]
}
 8005dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc0:	50000400 	.word	0x50000400
 8005dc4:	40affe00 	.word	0x40affe00
 8005dc8:	66666666 	.word	0x66666666
 8005dcc:	400a6666 	.word	0x400a6666
 8005dd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005dd4:	3f70624d 	.word	0x3f70624d
 8005dd8:	46cefa8d 	.word	0x46cefa8d
 8005ddc:	4047677d 	.word	0x4047677d
 8005de0:	47ae147b 	.word	0x47ae147b
 8005de4:	3fa47ae1 	.word	0x3fa47ae1
 8005de8:	408f4000 	.word	0x408f4000
 8005dec:	eb1c432d 	.word	0xeb1c432d
 8005df0:	3f1a36e2 	.word	0x3f1a36e2
 8005df4:	4082c000 	.word	0x4082c000

08005df8 <getWindSpeed>:

float getWindSpeed()
{
 8005df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // Calculation for frequency to wind speed  y = A + (B * x) (x = Frequency, y = wind speed in m/s)
  double Acoef = 0;
  double Bcoef = 0.31413320680643629774139228;

  // Turn on supply to the wind speed sensor
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_SET);
 8005dfa:	2180      	movs	r1, #128	; 0x80
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	0109      	lsls	r1, r1, #4
 8005e00:	483e      	ldr	r0, [pc, #248]	; (8005efc <getWindSpeed+0x104>)
 8005e02:	f7fd fdd7 	bl	80039b4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8005e06:	2005      	movs	r0, #5
 8005e08:	f7fd f8dc 	bl	8002fc4 <HAL_Delay>

  // Activate the timer
  HAL_TIM_Base_Start(&htim6);
 8005e0c:	4c3c      	ldr	r4, [pc, #240]	; (8005f00 <getWindSpeed+0x108>)
 8005e0e:	0020      	movs	r0, r4
 8005e10:	f7ff fc73 	bl	80056fa <HAL_TIM_Base_Start>

  // Get inital state of the pin
  uint8_t _initState = HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin);
 8005e14:	2180      	movs	r1, #128	; 0x80
 8005e16:	20a0      	movs	r0, #160	; 0xa0
 8005e18:	00c9      	lsls	r1, r1, #3
 8005e1a:	05c0      	lsls	r0, r0, #23
 8005e1c:	f7fd fdc4 	bl	80039a8 <HAL_GPIO_ReadPin>
 8005e20:	0005      	movs	r5, r0

  // Get the current sysTick time (needed for timeout)
  uint32_t _timeout = HAL_GetTick();
 8005e22:	f7fd f8c9 	bl	8002fb8 <HAL_GetTick>
 8005e26:	0006      	movs	r6, r0
  uint32_t _period = 0;

  // Wait for the edge of the signal (doesn't matter if is rising or falling)
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) == _initState) && ((HAL_GetTick() - _timeout) < 1000));
 8005e28:	2180      	movs	r1, #128	; 0x80
 8005e2a:	20a0      	movs	r0, #160	; 0xa0
 8005e2c:	00c9      	lsls	r1, r1, #3
 8005e2e:	05c0      	lsls	r0, r0, #23
 8005e30:	f7fd fdba 	bl	80039a8 <HAL_GPIO_ReadPin>
 8005e34:	4f33      	ldr	r7, [pc, #204]	; (8005f04 <getWindSpeed+0x10c>)
 8005e36:	4285      	cmp	r5, r0
 8005e38:	d006      	beq.n	8005e48 <getWindSpeed+0x50>
  if ((HAL_GetTick() - _timeout) >= 1000) return 0;
 8005e3a:	f7fd f8bd 	bl	8002fb8 <HAL_GetTick>
 8005e3e:	1b86      	subs	r6, r0, r6
 8005e40:	42be      	cmp	r6, r7
 8005e42:	d907      	bls.n	8005e54 <getWindSpeed+0x5c>
 8005e44:	2000      	movs	r0, #0
 8005e46:	e057      	b.n	8005ef8 <getWindSpeed+0x100>
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) == _initState) && ((HAL_GetTick() - _timeout) < 1000));
 8005e48:	f7fd f8b6 	bl	8002fb8 <HAL_GetTick>
 8005e4c:	1b80      	subs	r0, r0, r6
 8005e4e:	42b8      	cmp	r0, r7
 8005e50:	d9ea      	bls.n	8005e28 <getWindSpeed+0x30>
 8005e52:	e7f2      	b.n	8005e3a <getWindSpeed+0x42>

  // Reset the timer counter and measure the time until next edge of the signal
  htim6.Instance->CNT = 0;
 8005e54:	2200      	movs	r2, #0
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) != _initState) && (htim6.Instance->CNT < 65530));
 8005e56:	2680      	movs	r6, #128	; 0x80
 8005e58:	27a0      	movs	r7, #160	; 0xa0
  htim6.Instance->CNT = 0;
 8005e5a:	6823      	ldr	r3, [r4, #0]
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) != _initState) && (htim6.Instance->CNT < 65530));
 8005e5c:	00f6      	lsls	r6, r6, #3
  htim6.Instance->CNT = 0;
 8005e5e:	625a      	str	r2, [r3, #36]	; 0x24
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) != _initState) && (htim6.Instance->CNT < 65530));
 8005e60:	05ff      	lsls	r7, r7, #23
 8005e62:	0031      	movs	r1, r6
 8005e64:	0038      	movs	r0, r7
 8005e66:	f7fd fd9f 	bl	80039a8 <HAL_GPIO_ReadPin>
 8005e6a:	4285      	cmp	r5, r0
 8005e6c:	d004      	beq.n	8005e78 <getWindSpeed+0x80>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e72:	4b25      	ldr	r3, [pc, #148]	; (8005f08 <getWindSpeed+0x110>)
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d9f4      	bls.n	8005e62 <getWindSpeed+0x6a>
  _period += (htim6.Instance->CNT);
 8005e78:	6823      	ldr	r3, [r4, #0]

  // Reset the timer counter and measure the time until next edge of the signal
  htim6.Instance->CNT = 0;
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) == _initState) && (htim6.Instance->CNT < 65530));
 8005e7a:	2680      	movs	r6, #128	; 0x80
  _period += (htim6.Instance->CNT);
 8005e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) == _initState) && (htim6.Instance->CNT < 65530));
 8005e7e:	27a0      	movs	r7, #160	; 0xa0
  _period += (htim6.Instance->CNT);
 8005e80:	9201      	str	r2, [sp, #4]
  htim6.Instance->CNT = 0;
 8005e82:	2200      	movs	r2, #0
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) == _initState) && (htim6.Instance->CNT < 65530));
 8005e84:	00f6      	lsls	r6, r6, #3
  htim6.Instance->CNT = 0;
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24
  while ((HAL_GPIO_ReadPin(WS_DIN_GPIO_Port, WS_DIN_Pin) == _initState) && (htim6.Instance->CNT < 65530));
 8005e88:	05ff      	lsls	r7, r7, #23
 8005e8a:	0031      	movs	r1, r6
 8005e8c:	0038      	movs	r0, r7
 8005e8e:	f7fd fd8b 	bl	80039a8 <HAL_GPIO_ReadPin>
 8005e92:	4285      	cmp	r5, r0
 8005e94:	d104      	bne.n	8005ea0 <getWindSpeed+0xa8>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e9a:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <getWindSpeed+0x110>)
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d9f4      	bls.n	8005e8a <getWindSpeed+0x92>
  _period += (htim6.Instance->CNT);
 8005ea0:	6823      	ldr	r3, [r4, #0]

  // Stop the timer
  HAL_TIM_Base_Stop(&htim6);
 8005ea2:	0020      	movs	r0, r4
  _period += (htim6.Instance->CNT);
 8005ea4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	195d      	adds	r5, r3, r5
  HAL_TIM_Base_Stop(&htim6);
 8005eaa:	f7ff fc39 	bl	8005720 <HAL_TIM_Base_Stop>

  // Turn on supply to the wind speed sensor
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_RESET);
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	0109      	lsls	r1, r1, #4
 8005eb4:	4811      	ldr	r0, [pc, #68]	; (8005efc <getWindSpeed+0x104>)
 8005eb6:	f7fd fd7d 	bl	80039b4 <HAL_GPIO_WritePin>

  // Calculate the frequency in hertz and return the result. 0.988533017 is  calibration value (tested with function generator)
  double freqHz = ((double)(1 / (_period * 1E-6 * 15))) * 0.988533017;
 8005eba:	0028      	movs	r0, r5
 8005ebc:	f7fc fefa 	bl	8002cb4 <__aeabi_ui2d>
 8005ec0:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <getWindSpeed+0x114>)
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <getWindSpeed+0x118>)
 8005ec4:	f7fc f8ea 	bl	800209c <__aeabi_dmul>
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <getWindSpeed+0x11c>)
 8005ecc:	f7fc f8e6 	bl	800209c <__aeabi_dmul>
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	000b      	movs	r3, r1
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	4910      	ldr	r1, [pc, #64]	; (8005f18 <getWindSpeed+0x120>)
 8005ed8:	f7fb fcac 	bl	8001834 <__aeabi_ddiv>
 8005edc:	4a0f      	ldr	r2, [pc, #60]	; (8005f1c <getWindSpeed+0x124>)
 8005ede:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <getWindSpeed+0x128>)
 8005ee0:	f7fc f8dc 	bl	800209c <__aeabi_dmul>

  // Calculate and return wind speed in m/s
  return (Acoef + (freqHz * Bcoef));
 8005ee4:	4a0f      	ldr	r2, [pc, #60]	; (8005f24 <getWindSpeed+0x12c>)
 8005ee6:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <getWindSpeed+0x130>)
 8005ee8:	f7fc f8d8 	bl	800209c <__aeabi_dmul>
 8005eec:	2200      	movs	r2, #0
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f7fb f990 	bl	8001214 <__aeabi_dadd>
 8005ef4:	f7fc ff68 	bl	8002dc8 <__aeabi_d2f>
}
 8005ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	50000400 	.word	0x50000400
 8005f00:	2000047c 	.word	0x2000047c
 8005f04:	000003e7 	.word	0x000003e7
 8005f08:	0000fff9 	.word	0x0000fff9
 8005f0c:	a0b5ed8d 	.word	0xa0b5ed8d
 8005f10:	3eb0c6f7 	.word	0x3eb0c6f7
 8005f14:	402e0000 	.word	0x402e0000
 8005f18:	3ff00000 	.word	0x3ff00000
 8005f1c:	fe60ffb0 	.word	0xfe60ffb0
 8005f20:	3fefa20f 	.word	0x3fefa20f
 8005f24:	2a748f56 	.word	0x2a748f56
 8005f28:	3fd41ac2 	.word	0x3fd41ac2

08005f2c <getWindDir>:

int16_t getWindDir(uint32_t _pin, int16_t _offset)
{
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	000c      	movs	r4, r1
  // Turn on the supply to the wind direction sensor (AS5600)
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_SET);
 8005f30:	2180      	movs	r1, #128	; 0x80
{
 8005f32:	0005      	movs	r5, r0
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_SET);
 8005f34:	2201      	movs	r2, #1
 8005f36:	0109      	lsls	r1, r1, #4
 8005f38:	4817      	ldr	r0, [pc, #92]	; (8005f98 <getWindDir+0x6c>)
 8005f3a:	f7fd fd3b 	bl	80039b4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8005f3e:	200a      	movs	r0, #10
 8005f40:	f7fd f840 	bl	8002fc4 <HAL_Delay>

  int16_t _voltage = getADC(_pin);
 8005f44:	0028      	movs	r0, r5
 8005f46:	f7ff fec1 	bl	8005ccc <getADC>
  int16_t _angle;
  _voltage = 1 / 4095.0 * _voltage * 3300;
 8005f4a:	b200      	sxth	r0, r0
 8005f4c:	f7fc fe70 	bl	8002c30 <__aeabi_i2d>
 8005f50:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <getWindDir+0x70>)
 8005f52:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <getWindDir+0x74>)
 8005f54:	f7fc f8a2 	bl	800209c <__aeabi_dmul>
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <getWindDir+0x78>)
 8005f5c:	f7fc f89e 	bl	800209c <__aeabi_dmul>
 8005f60:	f7fc fe32 	bl	8002bc8 <__aeabi_d2iz>
  _angle = (int16_t) ((360.0 / 3300.0) * _voltage);
 8005f64:	b200      	sxth	r0, r0
 8005f66:	f7fc fe63 	bl	8002c30 <__aeabi_i2d>
 8005f6a:	4a0f      	ldr	r2, [pc, #60]	; (8005fa8 <getWindDir+0x7c>)
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <getWindDir+0x80>)
 8005f6e:	f7fc f895 	bl	800209c <__aeabi_dmul>
 8005f72:	f7fc fe29 	bl	8002bc8 <__aeabi_d2iz>
  _angle = _angle - _offset;
 8005f76:	1b00      	subs	r0, r0, r4
 8005f78:	b280      	uxth	r0, r0
 8005f7a:	b204      	sxth	r4, r0
  if (_angle < 0)
 8005f7c:	2c00      	cmp	r4, #0
 8005f7e:	da02      	bge.n	8005f86 <getWindDir+0x5a>
    _angle = 360 + _angle;
 8005f80:	3069      	adds	r0, #105	; 0x69
 8005f82:	30ff      	adds	r0, #255	; 0xff
 8005f84:	b204      	sxth	r4, r0

  // Turn off the supply to the wind direction sensor (AS5600)
  HAL_GPIO_WritePin(EN_3V3SW_GPIO_Port, EN_3V3SW_Pin, GPIO_PIN_RESET);
 8005f86:	2180      	movs	r1, #128	; 0x80
 8005f88:	2200      	movs	r2, #0
 8005f8a:	0109      	lsls	r1, r1, #4
 8005f8c:	4802      	ldr	r0, [pc, #8]	; (8005f98 <getWindDir+0x6c>)
 8005f8e:	f7fd fd11 	bl	80039b4 <HAL_GPIO_WritePin>

  return _angle;
}
 8005f92:	0020      	movs	r0, r4
 8005f94:	bd70      	pop	{r4, r5, r6, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	50000400 	.word	0x50000400
 8005f9c:	10010010 	.word	0x10010010
 8005fa0:	3f300100 	.word	0x3f300100
 8005fa4:	40a9c800 	.word	0x40a9c800
 8005fa8:	bed61bed 	.word	0xbed61bed
 8005fac:	3fbbed61 	.word	0x3fbbed61

08005fb0 <getBatteryVoltage>:

float getBatteryVoltage()
{
 8005fb0:	b570      	push	{r4, r5, r6, lr}
  float _result;
  HAL_GPIO_WritePin(BAT_M_EN_GPIO_Port, BAT_M_EN_Pin, GPIO_PIN_SET);
 8005fb2:	2580      	movs	r5, #128	; 0x80
 8005fb4:	24a0      	movs	r4, #160	; 0xa0
 8005fb6:	00ad      	lsls	r5, r5, #2
 8005fb8:	05e4      	lsls	r4, r4, #23
 8005fba:	0029      	movs	r1, r5
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	0020      	movs	r0, r4
 8005fc0:	f7fd fcf8 	bl	80039b4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8005fc4:	200a      	movs	r0, #10
 8005fc6:	f7fc fffd 	bl	8002fc4 <HAL_Delay>
  _result = getADC(ADC_CHANNEL_4) * 1 / 4095.0 * 3.3 * 2;
 8005fca:	480d      	ldr	r0, [pc, #52]	; (8006000 <getBatteryVoltage+0x50>)
 8005fcc:	f7ff fe7e 	bl	8005ccc <getADC>
 8005fd0:	0006      	movs	r6, r0
  HAL_GPIO_WritePin(BAT_M_EN_GPIO_Port, BAT_M_EN_Pin, GPIO_PIN_RESET);
 8005fd2:	0029      	movs	r1, r5
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	0020      	movs	r0, r4
 8005fd8:	f7fd fcec 	bl	80039b4 <HAL_GPIO_WritePin>
  _result = getADC(ADC_CHANNEL_4) * 1 / 4095.0 * 3.3 * 2;
 8005fdc:	0030      	movs	r0, r6
 8005fde:	f7fc fe69 	bl	8002cb4 <__aeabi_ui2d>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4b07      	ldr	r3, [pc, #28]	; (8006004 <getBatteryVoltage+0x54>)
 8005fe6:	f7fb fc25 	bl	8001834 <__aeabi_ddiv>
 8005fea:	4a07      	ldr	r2, [pc, #28]	; (8006008 <getBatteryVoltage+0x58>)
 8005fec:	4b07      	ldr	r3, [pc, #28]	; (800600c <getBatteryVoltage+0x5c>)
 8005fee:	f7fc f855 	bl	800209c <__aeabi_dmul>
 8005ff2:	0002      	movs	r2, r0
 8005ff4:	000b      	movs	r3, r1
 8005ff6:	f7fb f90d 	bl	8001214 <__aeabi_dadd>
 8005ffa:	f7fc fee5 	bl	8002dc8 <__aeabi_d2f>
  return _result;
}
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	10000010 	.word	0x10000010
 8006004:	40affe00 	.word	0x40affe00
 8006008:	66666666 	.word	0x66666666
 800600c:	400a6666 	.word	0x400a6666

08006010 <readWeatherData>:
{
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	0004      	movs	r4, r0
 8006014:	000d      	movs	r5, r1
  if (_flags & TEMP_MEASUREMENT) _w->tempSHT = SHT21_ReadTemperature();
 8006016:	07cb      	lsls	r3, r1, #31
 8006018:	d502      	bpl.n	8006020 <readWeatherData+0x10>
 800601a:	f001 fd5b 	bl	8007ad4 <SHT21_ReadTemperature>
 800601e:	60a0      	str	r0, [r4, #8]
  if (_flags & HUMIDITY_MEASUREMENT)
 8006020:	07ab      	lsls	r3, r5, #30
 8006022:	d509      	bpl.n	8006038 <readWeatherData+0x28>
	  _w->humidity = SHT21_ReadHumidity();
 8006024:	f001 fd3c 	bl	8007aa0 <SHT21_ReadHumidity>
	  if (_w->humidity > 100) _w->humidity = 100;
 8006028:	4e29      	ldr	r6, [pc, #164]	; (80060d0 <readWeatherData+0xc0>)
	  _w->humidity = SHT21_ReadHumidity();
 800602a:	1c07      	adds	r7, r0, #0
	  if (_w->humidity > 100) _w->humidity = 100;
 800602c:	1c31      	adds	r1, r6, #0
 800602e:	f7fa fa6b 	bl	8000508 <__aeabi_fcmpgt>
 8006032:	2800      	cmp	r0, #0
 8006034:	d14a      	bne.n	80060cc <readWeatherData+0xbc>
	  _w->humidity = SHT21_ReadHumidity();
 8006036:	6127      	str	r7, [r4, #16]
  if (_flags & PRESSURE_MEASUREMENT)
 8006038:	2604      	movs	r6, #4
 800603a:	4235      	tst	r5, r6
 800603c:	d00f      	beq.n	800605e <readWeatherData+0x4e>
    _w->pressure = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	6163      	str	r3, [r4, #20]
      _w->pressure += BMP180_ReadPressure();
 8006042:	f001 f85d 	bl	8007100 <BMP180_ReadPressure>
 8006046:	6961      	ldr	r1, [r4, #20]
 8006048:	f7fa fb88 	bl	800075c <__aeabi_fadd>
 800604c:	3e01      	subs	r6, #1
 800604e:	6160      	str	r0, [r4, #20]
    for (int i = 0; i < 4; i++)
 8006050:	2e00      	cmp	r6, #0
 8006052:	d1f6      	bne.n	8006042 <readWeatherData+0x32>
    _w->pressure /= 4;
 8006054:	21fa      	movs	r1, #250	; 0xfa
 8006056:	0589      	lsls	r1, r1, #22
 8006058:	f7fa fdba 	bl	8000bd0 <__aeabi_fmul>
 800605c:	6160      	str	r0, [r4, #20]
  if (_flags & SOLAR_MEASUREMENT) getSolarData(&(_w->solarJ), &(_w->solarW));
 800605e:	06ab      	lsls	r3, r5, #26
 8006060:	d505      	bpl.n	800606e <readWeatherData+0x5e>
 8006062:	0021      	movs	r1, r4
 8006064:	0020      	movs	r0, r4
 8006066:	3138      	adds	r1, #56	; 0x38
 8006068:	3030      	adds	r0, #48	; 0x30
 800606a:	f7ff fe5f 	bl	8005d2c <getSolarData>
  if (_flags & UV_MEASUREMENT)
 800606e:	072b      	lsls	r3, r5, #28
 8006070:	d515      	bpl.n	800609e <readWeatherData+0x8e>
    Si1147_ForceUV();
 8006072:	f001 fe3b 	bl	8007cec <Si1147_ForceUV>
    _w->uv = Si1147_GetUV();
 8006076:	f001 fe55 	bl	8007d24 <Si1147_GetUV>
 800607a:	6020      	str	r0, [r4, #0]
    Si1147_ForceUV();
 800607c:	f001 fe36 	bl	8007cec <Si1147_ForceUV>
    _w->light = Si1147_GetVis() * 0.282 * 16.5;
 8006080:	f001 fe64 	bl	8007d4c <Si1147_GetVis>
 8006084:	f7fc fdd4 	bl	8002c30 <__aeabi_i2d>
 8006088:	4a12      	ldr	r2, [pc, #72]	; (80060d4 <readWeatherData+0xc4>)
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <readWeatherData+0xc8>)
 800608c:	f7fc f806 	bl	800209c <__aeabi_dmul>
 8006090:	2200      	movs	r2, #0
 8006092:	4b12      	ldr	r3, [pc, #72]	; (80060dc <readWeatherData+0xcc>)
 8006094:	f7fc f802 	bl	800209c <__aeabi_dmul>
 8006098:	f7fc fe96 	bl	8002dc8 <__aeabi_d2f>
 800609c:	61a0      	str	r0, [r4, #24]
  if (_flags & WINDSPEED_MEASUREMENT) _w->windSpeed = getWindSpeed();
 800609e:	066b      	lsls	r3, r5, #25
 80060a0:	d502      	bpl.n	80060a8 <readWeatherData+0x98>
 80060a2:	f7ff fea9 	bl	8005df8 <getWindSpeed>
 80060a6:	61e0      	str	r0, [r4, #28]
  if (_flags & WINDDIR_MEASUREMENT) _w->windDir = getWindDir(ADC_CHANNEL_1, windDirCalibration);
 80060a8:	062b      	lsls	r3, r5, #24
 80060aa:	d506      	bpl.n	80060ba <readWeatherData+0xaa>
 80060ac:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <readWeatherData+0xd0>)
 80060ae:	480d      	ldr	r0, [pc, #52]	; (80060e4 <readWeatherData+0xd4>)
 80060b0:	2100      	movs	r1, #0
 80060b2:	5e59      	ldrsh	r1, [r3, r1]
 80060b4:	f7ff ff3a 	bl	8005f2c <getWindDir>
 80060b8:	80a0      	strh	r0, [r4, #4]
  if (_flags & BATTERY_MEASUREMENT) _w->battery = getBatteryVoltage();
 80060ba:	05eb      	lsls	r3, r5, #23
 80060bc:	d502      	bpl.n	80060c4 <readWeatherData+0xb4>
 80060be:	f7ff ff77 	bl	8005fb0 <getBatteryVoltage>
 80060c2:	6260      	str	r0, [r4, #36]	; 0x24
  _w->epoch = (uint32_t)RTC_GetTime();
 80060c4:	f001 ff30 	bl	8007f28 <RTC_GetTime>
 80060c8:	62a0      	str	r0, [r4, #40]	; 0x28
}
 80060ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  if (_w->humidity > 100) _w->humidity = 100;
 80060cc:	6126      	str	r6, [r4, #16]
 80060ce:	e7b3      	b.n	8006038 <readWeatherData+0x28>
 80060d0:	42c80000 	.word	0x42c80000
 80060d4:	ba5e353f 	.word	0xba5e353f
 80060d8:	3fd20c49 	.word	0x3fd20c49
 80060dc:	40308000 	.word	0x40308000
 80060e0:	200002ac 	.word	0x200002ac
 80060e4:	04000002 	.word	0x04000002

080060e8 <main>:
{
 80060e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ea:	b0b3      	sub	sp, #204	; 0xcc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060ec:	ae28      	add	r6, sp, #160	; 0xa0
  HAL_Init();
 80060ee:	f7fc ff43 	bl	8002f78 <HAL_Init>
  SystemClock_Config();
 80060f2:	f7ff fd89 	bl	8005c08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f6:	2214      	movs	r2, #20
 80060f8:	2100      	movs	r1, #0
 80060fa:	0030      	movs	r0, r6
 80060fc:	f002 f971 	bl	80083e2 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006100:	2104      	movs	r1, #4
 8006102:	4bf5      	ldr	r3, [pc, #980]	; (80064d8 <main+0x3f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006104:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006108:	2402      	movs	r4, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800610a:	430a      	orrs	r2, r1
 800610c:	62da      	str	r2, [r3, #44]	; 0x2c
 800610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, EN_3V3SW_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8006110:	48f2      	ldr	r0, [pc, #968]	; (80064dc <main+0x3f4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006112:	400a      	ands	r2, r1
 8006114:	9205      	str	r2, [sp, #20]
 8006116:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611a:	317c      	adds	r1, #124	; 0x7c
 800611c:	430a      	orrs	r2, r1
 800611e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006122:	2700      	movs	r7, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006124:	400a      	ands	r2, r1
  HAL_GPIO_WritePin(GPIOB, EN_3V3SW_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8006126:	2185      	movs	r1, #133	; 0x85
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006128:	9206      	str	r2, [sp, #24]
 800612a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800612c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, EN_3V3SW_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 800612e:	0109      	lsls	r1, r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006130:	432a      	orrs	r2, r5
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	402a      	ands	r2, r5
 8006138:	9207      	str	r2, [sp, #28]
 800613a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800613c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613e:	4322      	orrs	r2, r4
 8006140:	62da      	str	r2, [r3, #44]	; 0x2c
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, EN_3V3SW_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8006144:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006146:	4023      	ands	r3, r4
 8006148:	9308      	str	r3, [sp, #32]
 800614a:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, EN_3V3SW_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 800614c:	f7fd fc32 	bl	80039b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BAT_M_EN_GPIO_Port, BAT_M_EN_Pin, GPIO_PIN_RESET);
 8006150:	2180      	movs	r1, #128	; 0x80
 8006152:	20a0      	movs	r0, #160	; 0xa0
 8006154:	2200      	movs	r2, #0
 8006156:	0089      	lsls	r1, r1, #2
 8006158:	05c0      	lsls	r0, r0, #23
 800615a:	f7fd fc2b 	bl	80039b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800615e:	4be0      	ldr	r3, [pc, #896]	; (80064e0 <main+0x3f8>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006160:	0031      	movs	r1, r6
 8006162:	48de      	ldr	r0, [pc, #888]	; (80064dc <main+0x3f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006164:	9428      	str	r4, [sp, #160]	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006166:	6073      	str	r3, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006168:	60b5      	str	r5, [r6, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800616a:	f7fd fadb 	bl	8003724 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_3V3SW_Pin;
 800616e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(EN_3V3SW_GPIO_Port, &GPIO_InitStruct);
 8006170:	0031      	movs	r1, r6
  GPIO_InitStruct.Pin = EN_3V3SW_Pin;
 8006172:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(EN_3V3SW_GPIO_Port, &GPIO_InitStruct);
 8006174:	48d9      	ldr	r0, [pc, #868]	; (80064dc <main+0x3f4>)
  GPIO_InitStruct.Pin = EN_3V3SW_Pin;
 8006176:	9328      	str	r3, [sp, #160]	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006178:	6075      	str	r5, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617a:	60b7      	str	r7, [r6, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800617c:	60f7      	str	r7, [r6, #12]
  HAL_GPIO_Init(EN_3V3SW_GPIO_Port, &GPIO_InitStruct);
 800617e:	f7fd fad1 	bl	8003724 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006182:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006184:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	9328      	str	r3, [sp, #160]	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800618a:	4bd5      	ldr	r3, [pc, #852]	; (80064e0 <main+0x3f8>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800618c:	0031      	movs	r1, r6
 800618e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006190:	6073      	str	r3, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006192:	60b5      	str	r5, [r6, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006194:	f7fd fac6 	bl	8003724 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BAT_M_EN_Pin;
 8006198:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BAT_M_EN_GPIO_Port, &GPIO_InitStruct);
 800619a:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BAT_M_EN_Pin;
 800619c:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(BAT_M_EN_GPIO_Port, &GPIO_InitStruct);
 800619e:	0031      	movs	r1, r6
 80061a0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BAT_M_EN_Pin;
 80061a2:	9328      	str	r3, [sp, #160]	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061a4:	6075      	str	r5, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a6:	60b7      	str	r7, [r6, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061a8:	60f7      	str	r7, [r6, #12]
  HAL_GPIO_Init(BAT_M_EN_GPIO_Port, &GPIO_InitStruct);
 80061aa:	f7fd fabb 	bl	8003724 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WS_DIN_Pin;
 80061ae:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(WS_DIN_GPIO_Port, &GPIO_InitStruct);
 80061b0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = WS_DIN_Pin;
 80061b2:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(WS_DIN_GPIO_Port, &GPIO_InitStruct);
 80061b4:	0031      	movs	r1, r6
 80061b6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = WS_DIN_Pin;
 80061b8:	9328      	str	r3, [sp, #160]	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061ba:	6077      	str	r7, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061bc:	60b7      	str	r7, [r6, #8]
  HAL_GPIO_Init(WS_DIN_GPIO_Port, &GPIO_InitStruct);
 80061be:	f7fd fab1 	bl	8003724 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80061c2:	2350      	movs	r3, #80	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061c4:	0031      	movs	r1, r6
 80061c6:	48c5      	ldr	r0, [pc, #788]	; (80064dc <main+0x3f4>)
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80061c8:	9328      	str	r3, [sp, #160]	; 0xa0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061ca:	60f4      	str	r4, [r6, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061cc:	6075      	str	r5, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ce:	60b7      	str	r7, [r6, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061d0:	f7fd faa8 	bl	8003724 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SI1147_INT_Pin;
 80061d4:	2320      	movs	r3, #32
  HAL_GPIO_Init(SI1147_INT_GPIO_Port, &GPIO_InitStruct);
 80061d6:	0031      	movs	r1, r6
 80061d8:	48c0      	ldr	r0, [pc, #768]	; (80064dc <main+0x3f4>)
  GPIO_InitStruct.Pin = SI1147_INT_Pin;
 80061da:	9328      	str	r3, [sp, #160]	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061dc:	6077      	str	r7, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061de:	60b5      	str	r5, [r6, #8]
  HAL_GPIO_Init(SI1147_INT_GPIO_Port, &GPIO_InitStruct);
 80061e0:	f7fd faa0 	bl	8003724 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 80061e4:	003a      	movs	r2, r7
 80061e6:	0029      	movs	r1, r5
 80061e8:	2005      	movs	r0, #5
 80061ea:	f7fd fa47 	bl	800367c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80061ee:	2005      	movs	r0, #5
 80061f0:	f7fd fa74 	bl	80036dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80061f4:	003a      	movs	r2, r7
 80061f6:	0029      	movs	r1, r5
 80061f8:	2007      	movs	r0, #7
 80061fa:	f7fd fa3f 	bl	800367c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80061fe:	2007      	movs	r0, #7
 8006200:	f7fd fa6c 	bl	80036dc <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8006204:	4cb7      	ldr	r4, [pc, #732]	; (80064e4 <main+0x3fc>)
 8006206:	4bb8      	ldr	r3, [pc, #736]	; (80064e8 <main+0x400>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006208:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 800620a:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800620c:	4bb7      	ldr	r3, [pc, #732]	; (80064ec <main+0x404>)
  hi2c1.Init.OwnAddress1 = 0;
 800620e:	60a7      	str	r7, [r4, #8]
  hi2c1.Init.Timing = 0x00000E14;
 8006210:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006212:	60e5      	str	r5, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006214:	6127      	str	r7, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006216:	6167      	str	r7, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006218:	61a7      	str	r7, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800621a:	61e7      	str	r7, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800621c:	6227      	str	r7, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800621e:	f7fd fcf7 	bl	8003c10 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006222:	0039      	movs	r1, r7
 8006224:	0020      	movs	r0, r4
 8006226:	f7fd fe91 	bl	8003f4c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800622a:	0039      	movs	r1, r7
 800622c:	0020      	movs	r0, r4
 800622e:	f7fd feb3 	bl	8003f98 <HAL_I2CEx_ConfigDigitalFilter>
  RTC_TimeTypeDef sTime = {0};
 8006232:	2214      	movs	r2, #20
 8006234:	0039      	movs	r1, r7
 8006236:	a820      	add	r0, sp, #128	; 0x80
 8006238:	f002 f8d3 	bl	80083e2 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 800623c:	2228      	movs	r2, #40	; 0x28
 800623e:	0039      	movs	r1, r7
 8006240:	0030      	movs	r0, r6
  RTC_DateTypeDef sDate = {0};
 8006242:	9718      	str	r7, [sp, #96]	; 0x60
  RTC_AlarmTypeDef sAlarm = {0};
 8006244:	f002 f8cd 	bl	80083e2 <memset>
  hrtc.Instance = RTC;
 8006248:	4ca9      	ldr	r4, [pc, #676]	; (80064f0 <main+0x408>)
 800624a:	4baa      	ldr	r3, [pc, #680]	; (80064f4 <main+0x40c>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800624c:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 800624e:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8006250:	237f      	movs	r3, #127	; 0x7f
 8006252:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8006254:	3380      	adds	r3, #128	; 0x80
 8006256:	60e3      	str	r3, [r4, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006258:	6067      	str	r7, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800625a:	6127      	str	r7, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800625c:	6167      	str	r7, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800625e:	61a7      	str	r7, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006260:	61e7      	str	r7, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006262:	f7fe fc4f 	bl	8004b04 <HAL_RTC_Init>
  sTime.Hours = 0;
 8006266:	2278      	movs	r2, #120	; 0x78
 8006268:	ab02      	add	r3, sp, #8
 800626a:	189b      	adds	r3, r3, r2
 800626c:	701f      	strb	r7, [r3, #0]
  sTime.Minutes = 0;
 800626e:	1952      	adds	r2, r2, r5
 8006270:	ab02      	add	r3, sp, #8
 8006272:	189b      	adds	r3, r3, r2
 8006274:	701f      	strb	r7, [r3, #0]
  sTime.Seconds = 0;
 8006276:	1952      	adds	r2, r2, r5
 8006278:	ab02      	add	r3, sp, #8
 800627a:	189b      	adds	r3, r3, r2
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800627c:	a920      	add	r1, sp, #128	; 0x80
 800627e:	003a      	movs	r2, r7
 8006280:	0020      	movs	r0, r4
  sTime.Seconds = 0;
 8006282:	701f      	strb	r7, [r3, #0]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006284:	9723      	str	r7, [sp, #140]	; 0x8c
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006286:	9724      	str	r7, [sp, #144]	; 0x90
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8006288:	f7fe fca4 	bl	8004bd4 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800628c:	2258      	movs	r2, #88	; 0x58
 800628e:	ab02      	add	r3, sp, #8
 8006290:	189b      	adds	r3, r3, r2
 8006292:	701d      	strb	r5, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8006294:	1952      	adds	r2, r2, r5
 8006296:	ab02      	add	r3, sp, #8
 8006298:	189b      	adds	r3, r3, r2
 800629a:	701d      	strb	r5, [r3, #0]
  sDate.Date = 1;
 800629c:	1952      	adds	r2, r2, r5
 800629e:	ab02      	add	r3, sp, #8
 80062a0:	189b      	adds	r3, r3, r2
 80062a2:	701d      	strb	r5, [r3, #0]
  sDate.Year = 0;
 80062a4:	1952      	adds	r2, r2, r5
 80062a6:	ab02      	add	r3, sp, #8
 80062a8:	189b      	adds	r3, r3, r2
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80062aa:	a918      	add	r1, sp, #96	; 0x60
 80062ac:	003a      	movs	r2, r7
 80062ae:	0020      	movs	r0, r4
  sDate.Year = 0;
 80062b0:	701f      	strb	r7, [r3, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80062b2:	f7fe fd0d 	bl	8004cd0 <HAL_RTC_SetDate>
  sAlarm.AlarmDateWeekDay = 1;
 80062b6:	2399      	movs	r3, #153	; 0x99
 80062b8:	aa02      	add	r2, sp, #8
 80062ba:	189b      	adds	r3, r3, r2
 80062bc:	77dd      	strb	r5, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 80062be:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80062c0:	003a      	movs	r2, r7
 80062c2:	0031      	movs	r1, r6
  sAlarm.Alarm = RTC_ALARM_A;
 80062c4:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80062c6:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 80062c8:	6273      	str	r3, [r6, #36]	; 0x24
  sAlarm.AlarmTime.Hours = 0;
 80062ca:	7037      	strb	r7, [r6, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80062cc:	7077      	strb	r7, [r6, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80062ce:	70b7      	strb	r7, [r6, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80062d0:	6077      	str	r7, [r6, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80062d2:	60f7      	str	r7, [r6, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80062d4:	6137      	str	r7, [r6, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80062d6:	6177      	str	r7, [r6, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80062d8:	61b7      	str	r7, [r6, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80062da:	61f7      	str	r7, [r6, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80062dc:	f7fe fd64 	bl	8004da8 <HAL_RTC_SetAlarm_IT>
  hspi1.Instance = SPI1;
 80062e0:	4885      	ldr	r0, [pc, #532]	; (80064f8 <main+0x410>)
 80062e2:	4b86      	ldr	r3, [pc, #536]	; (80064fc <main+0x414>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80062e4:	6087      	str	r7, [r0, #8]
  hspi1.Instance = SPI1;
 80062e6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80062e8:	2382      	movs	r3, #130	; 0x82
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	6043      	str	r3, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80062ee:	33fc      	adds	r3, #252	; 0xfc
 80062f0:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80062f2:	3bfa      	subs	r3, #250	; 0xfa
 80062f4:	3bff      	subs	r3, #255	; 0xff
 80062f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80062f8:	60c7      	str	r7, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80062fa:	6107      	str	r7, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80062fc:	6147      	str	r7, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062fe:	61c7      	str	r7, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006300:	6207      	str	r7, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006302:	6247      	str	r7, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006304:	6287      	str	r7, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006306:	f7fe fefb 	bl	8005100 <HAL_SPI_Init>
  huart2.Instance = USART2;
 800630a:	487d      	ldr	r0, [pc, #500]	; (8006500 <main+0x418>)
 800630c:	4b7d      	ldr	r3, [pc, #500]	; (8006504 <main+0x41c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800630e:	6087      	str	r7, [r0, #8]
  huart2.Instance = USART2;
 8006310:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8006312:	23e1      	movs	r3, #225	; 0xe1
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006318:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800631a:	60c7      	str	r7, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800631c:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800631e:	6107      	str	r7, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006320:	6187      	str	r7, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006322:	61c7      	str	r7, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006324:	6207      	str	r7, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006326:	6247      	str	r7, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006328:	f7ff fc3c 	bl	8005ba4 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800632c:	2208      	movs	r2, #8
 800632e:	0039      	movs	r1, r7
 8006330:	0030      	movs	r0, r6
 8006332:	f002 f856 	bl	80083e2 <memset>
  hadc.Instance = ADC1;
 8006336:	4c74      	ldr	r4, [pc, #464]	; (8006508 <main+0x420>)
 8006338:	4b74      	ldr	r3, [pc, #464]	; (800650c <main+0x424>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800633a:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 800633c:	6023      	str	r3, [r4, #0]
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800633e:	230c      	movs	r3, #12
 8006340:	6423      	str	r3, [r4, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8006342:	3374      	adds	r3, #116	; 0x74
 8006344:	6463      	str	r3, [r4, #68]	; 0x44
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8006346:	2390      	movs	r3, #144	; 0x90
 8006348:	039b      	lsls	r3, r3, #14
 800634a:	6063      	str	r3, [r4, #4]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800634c:	2303      	movs	r3, #3
 800634e:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ContinuousConvMode = DISABLE;
 8006350:	1963      	adds	r3, r4, r5
 8006352:	77df      	strb	r7, [r3, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8006354:	1ca3      	adds	r3, r4, #2
 8006356:	77df      	strb	r7, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006358:	23c2      	movs	r3, #194	; 0xc2
 800635a:	33ff      	adds	r3, #255	; 0xff
 800635c:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800635e:	0023      	movs	r3, r4
 8006360:	332c      	adds	r3, #44	; 0x2c
 8006362:	701f      	strb	r7, [r3, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006364:	2304      	movs	r3, #4
  hadc.Init.OversamplingMode = ENABLE;
 8006366:	63e5      	str	r5, [r4, #60]	; 0x3c
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006368:	6163      	str	r3, [r4, #20]
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800636a:	64a7      	str	r7, [r4, #72]	; 0x48
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800636c:	60a7      	str	r7, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800636e:	6125      	str	r5, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006370:	60e7      	str	r7, [r4, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006372:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006374:	6327      	str	r7, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006376:	61a7      	str	r7, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006378:	6367      	str	r7, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800637a:	61e7      	str	r7, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800637c:	f7fc fef0 	bl	8003160 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006380:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006382:	0031      	movs	r1, r6
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006384:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006386:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006388:	6073      	str	r3, [r6, #4]
  sConfig.Channel = ADC_CHANNEL_0;
 800638a:	9528      	str	r5, [sp, #160]	; 0xa0
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800638c:	f7fd f8c0 	bl	8003510 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8006390:	4b5f      	ldr	r3, [pc, #380]	; (8006510 <main+0x428>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006392:	0031      	movs	r1, r6
 8006394:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8006396:	9328      	str	r3, [sp, #160]	; 0xa0
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006398:	f7fd f8ba 	bl	8003510 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 800639c:	4b5d      	ldr	r3, [pc, #372]	; (8006514 <main+0x42c>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800639e:	0031      	movs	r1, r6
 80063a0:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80063a2:	9328      	str	r3, [sp, #160]	; 0xa0
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80063a4:	f7fd f8b4 	bl	8003510 <HAL_ADC_ConfigChannel>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063a8:	2208      	movs	r2, #8
 80063aa:	0039      	movs	r1, r7
 80063ac:	0030      	movs	r0, r6
 80063ae:	f002 f818 	bl	80083e2 <memset>
  htim6.Instance = TIM6;
 80063b2:	4c59      	ldr	r4, [pc, #356]	; (8006518 <main+0x430>)
 80063b4:	4b59      	ldr	r3, [pc, #356]	; (800651c <main+0x434>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80063b6:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 80063b8:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 60;
 80063ba:	233c      	movs	r3, #60	; 0x3c
 80063bc:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 65535;
 80063be:	4b58      	ldr	r3, [pc, #352]	; (8006520 <main+0x438>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063c0:	60a7      	str	r7, [r4, #8]
  htim6.Init.Period = 65535;
 80063c2:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063c4:	6167      	str	r7, [r4, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80063c6:	f7ff f97d 	bl	80056c4 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80063ca:	0031      	movs	r1, r6
 80063cc:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063ce:	9728      	str	r7, [sp, #160]	; 0xa0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063d0:	6077      	str	r7, [r6, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80063d2:	f7ff f9b9 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
  glassLCD_Begin();
 80063d6:	f001 fd9d 	bl	8007f14 <glassLCD_Begin>
  glassLCD_WriteData((char*) lcdTest);
 80063da:	4852      	ldr	r0, [pc, #328]	; (8006524 <main+0x43c>)
 80063dc:	f001 fd4c 	bl	8007e78 <glassLCD_WriteData>
  glassLCD_SetDot(0b11111111);
 80063e0:	20ff      	movs	r0, #255	; 0xff
 80063e2:	f001 fd65 	bl	8007eb0 <glassLCD_SetDot>
  glassLCD_WriteArrow(0b11111111);
 80063e6:	20ff      	movs	r0, #255	; 0xff
 80063e8:	f001 fd68 	bl	8007ebc <glassLCD_WriteArrow>
  glassLCD_Update();
 80063ec:	f001 fcf4 	bl	8007dd8 <glassLCD_Update>
  HAL_Delay(2000);
 80063f0:	20fa      	movs	r0, #250	; 0xfa
 80063f2:	00c0      	lsls	r0, r0, #3
 80063f4:	f7fc fde6 	bl	8002fc4 <HAL_Delay>
  getADC(ADC_CHANNEL_0);
 80063f8:	0028      	movs	r0, r5
 80063fa:	f7ff fc67 	bl	8005ccc <getADC>
  getADC(ADC_CHANNEL_1);
 80063fe:	4844      	ldr	r0, [pc, #272]	; (8006510 <main+0x428>)
 8006400:	f7ff fc64 	bl	8005ccc <getADC>
  getADC(ADC_CHANNEL_4);
 8006404:	4843      	ldr	r0, [pc, #268]	; (8006514 <main+0x42c>)
 8006406:	f7ff fc61 	bl	8005ccc <getADC>
  if (!BMP180_Init()) writeError(BMP180_ERROR, DEEP_SLEEP);
 800640a:	f000 fd07 	bl	8006e1c <BMP180_Init>
 800640e:	42b8      	cmp	r0, r7
 8006410:	d103      	bne.n	800641a <main+0x332>
 8006412:	0029      	movs	r1, r5
 8006414:	0028      	movs	r0, r5
 8006416:	f7ff fc43 	bl	8005ca0 <writeError>
  if (!SHT21_Init()) writeError(SHT21_ERROR, DEEP_SLEEP);
 800641a:	f001 fb0d 	bl	8007a38 <SHT21_Init>
 800641e:	2800      	cmp	r0, #0
 8006420:	d103      	bne.n	800642a <main+0x342>
 8006422:	2101      	movs	r1, #1
 8006424:	3002      	adds	r0, #2
 8006426:	f7ff fc3b 	bl	8005ca0 <writeError>
  if (!Si1147_Init()) writeError(SI1147_ERROR, DEEP_SLEEP);
 800642a:	f001 fbe3 	bl	8007bf4 <Si1147_Init>
 800642e:	2800      	cmp	r0, #0
 8006430:	d103      	bne.n	800643a <main+0x352>
 8006432:	2101      	movs	r1, #1
 8006434:	3003      	adds	r0, #3
 8006436:	f7ff fc33 	bl	8005ca0 <writeError>
  RF24_init(NRF24_CE_GPIO_Port, NRF24_CE_Pin, NRF24_CSN_GPIO_Port, NRF24_CSN_Pin);
 800643a:	4a28      	ldr	r2, [pc, #160]	; (80064dc <main+0x3f4>)
 800643c:	2340      	movs	r3, #64	; 0x40
 800643e:	2110      	movs	r1, #16
 8006440:	0010      	movs	r0, r2
 8006442:	f001 f88d 	bl	8007560 <RF24_init>
  if (!RF24_begin()) writeError(NRF24_ERROR, DEEP_SLEEP);
 8006446:	f001 fa8d 	bl	8007964 <RF24_begin>
 800644a:	2800      	cmp	r0, #0
 800644c:	d103      	bne.n	8006456 <main+0x36e>
 800644e:	2101      	movs	r1, #1
 8006450:	3004      	adds	r0, #4
 8006452:	f7ff fc25 	bl	8005ca0 <writeError>
  Si1147_SetUV();
 8006456:	f001 fc0f 	bl	8007c78 <Si1147_SetUV>
  RTC_SetTime(1609459200);
 800645a:	4833      	ldr	r0, [pc, #204]	; (8006528 <main+0x440>)
 800645c:	f001 fda6 	bl	8007fac <RTC_SetTime>
  communication_Setup();
 8006460:	f001 fc84 	bl	8007d6c <communication_Setup>
  uint8_t rxBuffer[32] = {0};
 8006464:	2220      	movs	r2, #32
 8006466:	2100      	movs	r1, #0
 8006468:	a818      	add	r0, sp, #96	; 0x60
 800646a:	f001 ffba 	bl	80083e2 <memset>
 800646e:	27b4      	movs	r7, #180	; 0xb4
    if (communication_Transmit(&syncStruct, sizeof(syncStruct), rxBuffer))
 8006470:	4c2e      	ldr	r4, [pc, #184]	; (800652c <main+0x444>)
 8006472:	aa18      	add	r2, sp, #96	; 0x60
 8006474:	2110      	movs	r1, #16
 8006476:	0020      	movs	r0, r4
 8006478:	f001 fc98 	bl	8007dac <communication_Transmit>
 800647c:	1e05      	subs	r5, r0, #0
 800647e:	d00d      	beq.n	800649c <main+0x3b4>
      if (rxBuffer[0] == SYNC_HEADER)
 8006480:	2258      	movs	r2, #88	; 0x58
 8006482:	ab02      	add	r3, sp, #8
 8006484:	189b      	adds	r3, r3, r2
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2500      	movs	r5, #0
 800648a:	2b35      	cmp	r3, #53	; 0x35
 800648c:	d106      	bne.n	800649c <main+0x3b4>
        memcpy(&syncStruct, rxBuffer, sizeof(syncStruct));
 800648e:	0023      	movs	r3, r4
 8006490:	aa18      	add	r2, sp, #96	; 0x60
 8006492:	ca23      	ldmia	r2!, {r0, r1, r5}
 8006494:	c323      	stmia	r3!, {r0, r1, r5}
        syncSuccess = 1;
 8006496:	2501      	movs	r5, #1
        memcpy(&syncStruct, rxBuffer, sizeof(syncStruct));
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	601a      	str	r2, [r3, #0]
    sprintf(lcdTemp, "SYNC %3d", syncTimeout--);
 800649c:	003a      	movs	r2, r7
 800649e:	4924      	ldr	r1, [pc, #144]	; (8006530 <main+0x448>)
 80064a0:	0030      	movs	r0, r6
 80064a2:	f002 fab7 	bl	8008a14 <siprintf>
    glassLCD_WriteData(lcdTemp);
 80064a6:	0030      	movs	r0, r6
 80064a8:	f001 fce6 	bl	8007e78 <glassLCD_WriteData>
    glassLCD_Update();
 80064ac:	f001 fc94 	bl	8007dd8 <glassLCD_Update>
    HAL_Delay(1000);
 80064b0:	20fa      	movs	r0, #250	; 0xfa
 80064b2:	0080      	lsls	r0, r0, #2
 80064b4:	f7fc fd86 	bl	8002fc4 <HAL_Delay>
  while (!syncSuccess && syncTimeout > 0)
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	d102      	bne.n	80064c2 <main+0x3da>
 80064bc:	3f01      	subs	r7, #1
 80064be:	2f00      	cmp	r7, #0
 80064c0:	d1d6      	bne.n	8006470 <main+0x388>
  RF24_flush_rx();
 80064c2:	f001 f829 	bl	8007518 <RF24_flush_rx>
  RF24_flush_tx();
 80064c6:	f001 f833 	bl	8007530 <RF24_flush_tx>
  RF24_powerDown();
 80064ca:	f001 f8bf 	bl	800764c <RF24_powerDown>
 80064ce:	4f19      	ldr	r7, [pc, #100]	; (8006534 <main+0x44c>)
  if (syncSuccess)
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	d100      	bne.n	80064d6 <main+0x3ee>
 80064d4:	e0d7      	b.n	8006686 <main+0x59e>
 80064d6:	e02f      	b.n	8006538 <main+0x450>
 80064d8:	40021000 	.word	0x40021000
 80064dc:	50000400 	.word	0x50000400
 80064e0:	10110000 	.word	0x10110000
 80064e4:	20000378 	.word	0x20000378
 80064e8:	40005400 	.word	0x40005400
 80064ec:	00000e14 	.word	0x00000e14
 80064f0:	20000458 	.word	0x20000458
 80064f4:	40002800 	.word	0x40002800
 80064f8:	200004cc 	.word	0x200004cc
 80064fc:	40013000 	.word	0x40013000
 8006500:	20000530 	.word	0x20000530
 8006504:	40004400 	.word	0x40004400
 8006508:	200005b4 	.word	0x200005b4
 800650c:	40012400 	.word	0x40012400
 8006510:	04000002 	.word	0x04000002
 8006514:	10000010 	.word	0x10000010
 8006518:	2000047c 	.word	0x2000047c
 800651c:	40001000 	.word	0x40001000
 8006520:	0000ffff 	.word	0x0000ffff
 8006524:	0800a3da 	.word	0x0800a3da
 8006528:	5fee6600 	.word	0x5fee6600
 800652c:	20000008 	.word	0x20000008
 8006530:	0800a3e3 	.word	0x0800a3e3
 8006534:	200004b8 	.word	0x200004b8
    RTC_SetTime(syncStruct.myEpoch);
 8006538:	6860      	ldr	r0, [r4, #4]
 800653a:	f001 fd37 	bl	8007fac <RTC_SetTime>
    RTC_SetAlarmEpoch(syncStruct.sendEpoch, RTC_ALARMMASK_DATEWEEKDAY);
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	68e0      	ldr	r0, [r4, #12]
 8006542:	0609      	lsls	r1, r1, #24
 8006544:	f001 fd6e 	bl	8008024 <RTC_SetAlarmEpoch>
    sendInterval = syncStruct.sendEpoch - syncStruct.myEpoch;
 8006548:	6862      	ldr	r2, [r4, #4]
 800654a:	68e3      	ldr	r3, [r4, #12]
    glassLCD_WriteData("SYNC OK");
 800654c:	48de      	ldr	r0, [pc, #888]	; (80068c8 <main+0x7e0>)
    sendInterval = syncStruct.sendEpoch - syncStruct.myEpoch;
 800654e:	1a9b      	subs	r3, r3, r2
    firstTimeSync = 1;
 8006550:	2201      	movs	r2, #1
    sendInterval = syncStruct.sendEpoch - syncStruct.myEpoch;
 8006552:	603b      	str	r3, [r7, #0]
    firstTimeSync = 1;
 8006554:	4bdd      	ldr	r3, [pc, #884]	; (80068cc <main+0x7e4>)
 8006556:	701a      	strb	r2, [r3, #0]
    glassLCD_WriteData("SYNC OK");
 8006558:	f001 fc8e 	bl	8007e78 <glassLCD_WriteData>
    glassLCD_Update();
 800655c:	f001 fc3c 	bl	8007dd8 <glassLCD_Update>
    HAL_Delay(1000);
 8006560:	20fa      	movs	r0, #250	; 0xfa
 8006562:	0080      	lsls	r0, r0, #2
 8006564:	f7fc fd2e 	bl	8002fc4 <HAL_Delay>
    hTime = RTC_EpochToHuman(syncStruct.myEpoch);
 8006568:	6861      	ldr	r1, [r4, #4]
 800656a:	0030      	movs	r0, r6
 800656c:	f001 fd06 	bl	8007f7c <RTC_EpochToHuman>
    sprintf(lcdTemp, " %2d%02d%02d", hTime.tm_hour, hTime.tm_min, hTime.tm_sec);
 8006570:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006572:	49d7      	ldr	r1, [pc, #860]	; (80068d0 <main+0x7e8>)
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	6873      	ldr	r3, [r6, #4]
 8006578:	68b2      	ldr	r2, [r6, #8]
 800657a:	48d6      	ldr	r0, [pc, #856]	; (80068d4 <main+0x7ec>)
 800657c:	f002 fa4a 	bl	8008a14 <siprintf>
    glassLCD_WriteData(lcdTemp);
 8006580:	48d4      	ldr	r0, [pc, #848]	; (80068d4 <main+0x7ec>)
 8006582:	f001 fc79 	bl	8007e78 <glassLCD_WriteData>
    glassLCD_SetDot(0b00101000);
 8006586:	2028      	movs	r0, #40	; 0x28
 8006588:	f001 fc92 	bl	8007eb0 <glassLCD_SetDot>
    glassLCD_Update();
 800658c:	f001 fc24 	bl	8007dd8 <glassLCD_Update>
    HAL_Delay(1000);
 8006590:	20fa      	movs	r0, #250	; 0xfa
    HAL_Delay(1000);
 8006592:	27fa      	movs	r7, #250	; 0xfa
    HAL_Delay(1000);
 8006594:	0080      	lsls	r0, r0, #2
 8006596:	f7fc fd15 	bl	8002fc4 <HAL_Delay>
        syncSuccess = 1;
 800659a:	2405      	movs	r4, #5
    HAL_Delay(1000);
 800659c:	00bf      	lsls	r7, r7, #2
    sprintf(lcdTemp, "D CAL %d", 5 - i);
 800659e:	0022      	movs	r2, r4
 80065a0:	49cd      	ldr	r1, [pc, #820]	; (80068d8 <main+0x7f0>)
 80065a2:	48cc      	ldr	r0, [pc, #816]	; (80068d4 <main+0x7ec>)
 80065a4:	f002 fa36 	bl	8008a14 <siprintf>
    glassLCD_WriteData(lcdTemp);
 80065a8:	48ca      	ldr	r0, [pc, #808]	; (80068d4 <main+0x7ec>)
 80065aa:	f001 fc65 	bl	8007e78 <glassLCD_WriteData>
    glassLCD_Update();
 80065ae:	f001 fc13 	bl	8007dd8 <glassLCD_Update>
    windDirCalibration += getWindDir(ADC_CHANNEL_1, 0);
 80065b2:	2100      	movs	r1, #0
 80065b4:	48c9      	ldr	r0, [pc, #804]	; (80068dc <main+0x7f4>)
 80065b6:	f7ff fcb9 	bl	8005f2c <getWindDir>
 80065ba:	4dc9      	ldr	r5, [pc, #804]	; (80068e0 <main+0x7f8>)
 80065bc:	3c01      	subs	r4, #1
 80065be:	882b      	ldrh	r3, [r5, #0]
 80065c0:	1818      	adds	r0, r3, r0
 80065c2:	8028      	strh	r0, [r5, #0]
    HAL_Delay(1000);
 80065c4:	0038      	movs	r0, r7
 80065c6:	f7fc fcfd 	bl	8002fc4 <HAL_Delay>
  for (int i = 0; i < 5; i++)
 80065ca:	2c00      	cmp	r4, #0
 80065cc:	d1e7      	bne.n	800659e <main+0x4b6>
  windDirCalibration /= 5;
 80065ce:	2300      	movs	r3, #0
 80065d0:	5ee8      	ldrsh	r0, [r5, r3]
 80065d2:	2105      	movs	r1, #5
 80065d4:	f7f9 fe48 	bl	8000268 <__divsi3>
  readWeatherData(&currentWeatherData, ALL_MEASUREMENTS);
 80065d8:	49c2      	ldr	r1, [pc, #776]	; (80068e4 <main+0x7fc>)
  windDirCalibration /= 5;
 80065da:	8028      	strh	r0, [r5, #0]
  readWeatherData(&currentWeatherData, ALL_MEASUREMENTS);
 80065dc:	48c2      	ldr	r0, [pc, #776]	; (80068e8 <main+0x800>)
 80065de:	f7ff fd17 	bl	8006010 <readWeatherData>
  uint8_t k = 0;
 80065e2:	9402      	str	r4, [sp, #8]
    if (k == 0)
 80065e4:	9b02      	ldr	r3, [sp, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d15f      	bne.n	80066aa <main+0x5c2>
      int16_t t = round(currentWeatherData.tempSHT * 10);
 80065ea:	4cbf      	ldr	r4, [pc, #764]	; (80068e8 <main+0x800>)
 80065ec:	49bf      	ldr	r1, [pc, #764]	; (80068ec <main+0x804>)
 80065ee:	68a0      	ldr	r0, [r4, #8]
 80065f0:	f7fa faee 	bl	8000bd0 <__aeabi_fmul>
 80065f4:	f7fc fb96 	bl	8002d24 <__aeabi_f2d>
 80065f8:	f003 fe2a 	bl	800a250 <round>
 80065fc:	f7fc fae4 	bl	8002bc8 <__aeabi_d2iz>
      int16_t h = round(currentWeatherData.humidity * ((currentWeatherData.humidity >= 100) ? 1 : 10));
 8006600:	6924      	ldr	r4, [r4, #16]
      int16_t t = round(currentWeatherData.tempSHT * 10);
 8006602:	b207      	sxth	r7, r0
      int16_t h = round(currentWeatherData.humidity * ((currentWeatherData.humidity >= 100) ? 1 : 10));
 8006604:	49ba      	ldr	r1, [pc, #744]	; (80068f0 <main+0x808>)
 8006606:	1c20      	adds	r0, r4, #0
 8006608:	f7f9 ff88 	bl	800051c <__aeabi_fcmpge>
 800660c:	2800      	cmp	r0, #0
 800660e:	d149      	bne.n	80066a4 <main+0x5bc>
 8006610:	48b6      	ldr	r0, [pc, #728]	; (80068ec <main+0x804>)
 8006612:	1c21      	adds	r1, r4, #0
 8006614:	f7fa fadc 	bl	8000bd0 <__aeabi_fmul>
 8006618:	f7fc fb84 	bl	8002d24 <__aeabi_f2d>
 800661c:	f003 fe18 	bl	800a250 <round>
 8006620:	f7fc fad2 	bl	8002bc8 <__aeabi_d2iz>
      sprintf(lcdTemp, "%3d%01d %2d%01d", t / 10, abs(t % 10), abs(h / 10), abs(h % 10));
 8006624:	210a      	movs	r1, #10
      int16_t h = round(currentWeatherData.humidity * ((currentWeatherData.humidity >= 100) ? 1 : 10));
 8006626:	b205      	sxth	r5, r0
      sprintf(lcdTemp, "%3d%01d %2d%01d", t / 10, abs(t % 10), abs(h / 10), abs(h % 10));
 8006628:	0038      	movs	r0, r7
 800662a:	f7f9 ff03 	bl	8000434 <__aeabi_idivmod>
 800662e:	b20c      	sxth	r4, r1
 8006630:	17e3      	asrs	r3, r4, #31
 8006632:	18e4      	adds	r4, r4, r3
 8006634:	210a      	movs	r1, #10
 8006636:	0038      	movs	r0, r7
 8006638:	405c      	eors	r4, r3
 800663a:	f7f9 fe15 	bl	8000268 <__divsi3>
 800663e:	210a      	movs	r1, #10
 8006640:	b207      	sxth	r7, r0
 8006642:	0028      	movs	r0, r5
 8006644:	f7f9 fef6 	bl	8000434 <__aeabi_idivmod>
 8006648:	b209      	sxth	r1, r1
 800664a:	17cb      	asrs	r3, r1, #31
 800664c:	18c9      	adds	r1, r1, r3
 800664e:	4059      	eors	r1, r3
 8006650:	9101      	str	r1, [sp, #4]
 8006652:	0028      	movs	r0, r5
 8006654:	210a      	movs	r1, #10
 8006656:	f7f9 fe07 	bl	8000268 <__divsi3>
 800665a:	b200      	sxth	r0, r0
 800665c:	17c3      	asrs	r3, r0, #31
 800665e:	18c0      	adds	r0, r0, r3
 8006660:	4058      	eors	r0, r3
 8006662:	9000      	str	r0, [sp, #0]
 8006664:	0023      	movs	r3, r4
 8006666:	003a      	movs	r2, r7
 8006668:	49a2      	ldr	r1, [pc, #648]	; (80068f4 <main+0x80c>)
 800666a:	489a      	ldr	r0, [pc, #616]	; (80068d4 <main+0x7ec>)
 800666c:	f002 f9d2 	bl	8008a14 <siprintf>
      lcdDot = (currentWeatherData.humidity >= 100) ? 0b00100000 : 0b00100010;
 8006670:	4b9d      	ldr	r3, [pc, #628]	; (80068e8 <main+0x800>)
 8006672:	499f      	ldr	r1, [pc, #636]	; (80068f0 <main+0x808>)
 8006674:	6918      	ldr	r0, [r3, #16]
 8006676:	f7f9 ff51 	bl	800051c <__aeabi_fcmpge>
 800667a:	2520      	movs	r5, #32
 800667c:	2800      	cmp	r0, #0
 800667e:	d100      	bne.n	8006682 <main+0x59a>
 8006680:	3502      	adds	r5, #2
      lcdDot = 0b00010000;
 8006682:	2780      	movs	r7, #128	; 0x80
 8006684:	e032      	b.n	80066ec <main+0x604>
    sendInterval = 300;
 8006686:	2396      	movs	r3, #150	; 0x96
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	603b      	str	r3, [r7, #0]
    RTC_SetAlarmEpoch(RTC_GetTime() + sendInterval, RTC_ALARMMASK_DATEWEEKDAY);
 800668c:	f001 fc4c 	bl	8007f28 <RTC_GetTime>
 8006690:	2180      	movs	r1, #128	; 0x80
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	0609      	lsls	r1, r1, #24
 8006696:	18c0      	adds	r0, r0, r3
 8006698:	f001 fcc4 	bl	8008024 <RTC_SetAlarmEpoch>
    glassLCD_WriteData("NO SYNC");
 800669c:	4896      	ldr	r0, [pc, #600]	; (80068f8 <main+0x810>)
 800669e:	f001 fbeb 	bl	8007e78 <glassLCD_WriteData>
 80066a2:	e773      	b.n	800658c <main+0x4a4>
      int16_t h = round(currentWeatherData.humidity * ((currentWeatherData.humidity >= 100) ? 1 : 10));
 80066a4:	20fe      	movs	r0, #254	; 0xfe
 80066a6:	0580      	lsls	r0, r0, #22
 80066a8:	e7b3      	b.n	8006612 <main+0x52a>
    if (k == 1)
 80066aa:	9b02      	ldr	r3, [sp, #8]
 80066ac:	4c89      	ldr	r4, [pc, #548]	; (80068d4 <main+0x7ec>)
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d168      	bne.n	8006784 <main+0x69c>
      uint16_t p = round(currentWeatherData.pressure * 10);
 80066b2:	4b8d      	ldr	r3, [pc, #564]	; (80068e8 <main+0x800>)
 80066b4:	498d      	ldr	r1, [pc, #564]	; (80068ec <main+0x804>)
 80066b6:	6958      	ldr	r0, [r3, #20]
 80066b8:	f7fa fa8a 	bl	8000bd0 <__aeabi_fmul>
 80066bc:	f7fc fb32 	bl	8002d24 <__aeabi_f2d>
 80066c0:	f003 fdc6 	bl	800a250 <round>
 80066c4:	f7f9 ff6c 	bl	80005a0 <__aeabi_d2uiz>
 80066c8:	b285      	uxth	r5, r0
      sprintf(lcdTemp, "%4d%1d", abs(p / 10), abs(p % 10));
 80066ca:	0028      	movs	r0, r5
 80066cc:	210a      	movs	r1, #10
 80066ce:	f7f9 fdc7 	bl	8000260 <__aeabi_uidivmod>
 80066d2:	0028      	movs	r0, r5
 80066d4:	b28f      	uxth	r7, r1
 80066d6:	210a      	movs	r1, #10
 80066d8:	f7f9 fd3c 	bl	8000154 <__udivsi3>
 80066dc:	003b      	movs	r3, r7
 80066de:	b282      	uxth	r2, r0
 80066e0:	4986      	ldr	r1, [pc, #536]	; (80068fc <main+0x814>)
 80066e2:	0020      	movs	r0, r4
 80066e4:	f002 f996 	bl	8008a14 <siprintf>
      lcdArrow = 0b01000000;
 80066e8:	2740      	movs	r7, #64	; 0x40
      lcdDot = 0b00010000;
 80066ea:	2510      	movs	r5, #16
    glassLCD_WriteData(lcdTemp);
 80066ec:	4879      	ldr	r0, [pc, #484]	; (80068d4 <main+0x7ec>)
 80066ee:	f001 fbc3 	bl	8007e78 <glassLCD_WriteData>
    glassLCD_SetDot(lcdDot);
 80066f2:	0028      	movs	r0, r5
 80066f4:	f001 fbdc 	bl	8007eb0 <glassLCD_SetDot>
    glassLCD_WriteArrow(lcdArrow);
 80066f8:	0038      	movs	r0, r7
 80066fa:	f001 fbdf 	bl	8007ebc <glassLCD_WriteArrow>
    glassLCD_Update();
 80066fe:	f001 fb6b 	bl	8007dd8 <glassLCD_Update>
    Sleep_LightSleep();
 8006702:	f001 fcc7 	bl	8008094 <Sleep_LightSleep>
    if (alarmInterruptFlag == 1)
 8006706:	4b7e      	ldr	r3, [pc, #504]	; (8006900 <main+0x818>)
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	2a01      	cmp	r2, #1
 800670c:	d11a      	bne.n	8006744 <main+0x65c>
      alarmInterruptFlag = 0;
 800670e:	2500      	movs	r5, #0
      readWeatherData(&weatherData, ALL_MEASUREMENTS);
 8006710:	4c7c      	ldr	r4, [pc, #496]	; (8006904 <main+0x81c>)
 8006712:	4974      	ldr	r1, [pc, #464]	; (80068e4 <main+0x7fc>)
 8006714:	0020      	movs	r0, r4
      alarmInterruptFlag = 0;
 8006716:	701d      	strb	r5, [r3, #0]
      readWeatherData(&weatherData, ALL_MEASUREMENTS);
 8006718:	f7ff fc7a 	bl	8006010 <readWeatherData>
      currentWeatherData = weatherData;
 800671c:	2240      	movs	r2, #64	; 0x40
 800671e:	0021      	movs	r1, r4
 8006720:	4871      	ldr	r0, [pc, #452]	; (80068e8 <main+0x800>)
 8006722:	f001 fe55 	bl	80083d0 <memcpy>
      if (firstTimeSync)
 8006726:	4b69      	ldr	r3, [pc, #420]	; (80068cc <main+0x7e4>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	42ab      	cmp	r3, r5
 800672c:	d000      	beq.n	8006730 <main+0x648>
 800672e:	e12e      	b.n	800698e <main+0x8a6>
        RTC_SetAlarmEpoch(RTC_GetTime() + sendInterval - 25,
 8006730:	f001 fbfa 	bl	8007f28 <RTC_GetTime>
 8006734:	2180      	movs	r1, #128	; 0x80
 8006736:	4b74      	ldr	r3, [pc, #464]	; (8006908 <main+0x820>)
 8006738:	0609      	lsls	r1, r1, #24
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3b19      	subs	r3, #25
 800673e:	1818      	adds	r0, r3, r0
 8006740:	f001 fc70 	bl	8008024 <RTC_SetAlarmEpoch>
    if (interruptButton & GPIO_PIN_8)
 8006744:	4c71      	ldr	r4, [pc, #452]	; (800690c <main+0x824>)
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	05db      	lsls	r3, r3, #23
 800674a:	d50b      	bpl.n	8006764 <main+0x67c>
      interruptButton &= ~(GPIO_PIN_8);
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	4a70      	ldr	r2, [pc, #448]	; (8006910 <main+0x828>)
      k++;
 8006750:	9802      	ldr	r0, [sp, #8]
      interruptButton &= ~(GPIO_PIN_8);
 8006752:	4013      	ands	r3, r2
      k++;
 8006754:	3001      	adds	r0, #1
      interruptButton &= ~(GPIO_PIN_8);
 8006756:	6023      	str	r3, [r4, #0]
      k++;
 8006758:	b2c0      	uxtb	r0, r0
      k = k % 7;
 800675a:	2107      	movs	r1, #7
 800675c:	f7f9 fd80 	bl	8000260 <__aeabi_uidivmod>
 8006760:	b2cb      	uxtb	r3, r1
 8006762:	9302      	str	r3, [sp, #8]
    if (interruptButton & GPIO_PIN_1)
 8006764:	2202      	movs	r2, #2
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	4213      	tst	r3, r2
 800676a:	d100      	bne.n	800676e <main+0x686>
 800676c:	e73a      	b.n	80065e4 <main+0x4fc>
      interruptButton &= ~(GPIO_PIN_1);
 800676e:	6823      	ldr	r3, [r4, #0]
      readWeatherData(&currentWeatherData, measurementTable[k]);
 8006770:	485d      	ldr	r0, [pc, #372]	; (80068e8 <main+0x800>)
      interruptButton &= ~(GPIO_PIN_1);
 8006772:	4393      	bics	r3, r2
 8006774:	6023      	str	r3, [r4, #0]
      readWeatherData(&currentWeatherData, measurementTable[k]);
 8006776:	9b02      	ldr	r3, [sp, #8]
 8006778:	005a      	lsls	r2, r3, #1
 800677a:	4b66      	ldr	r3, [pc, #408]	; (8006914 <main+0x82c>)
 800677c:	5ad1      	ldrh	r1, [r2, r3]
 800677e:	f7ff fc47 	bl	8006010 <readWeatherData>
 8006782:	e72f      	b.n	80065e4 <main+0x4fc>
    if (k == 2)
 8006784:	9b02      	ldr	r3, [sp, #8]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d126      	bne.n	80067d8 <main+0x6f0>
      int16_t uv = (currentWeatherData.uv * 10);
 800678a:	4f57      	ldr	r7, [pc, #348]	; (80068e8 <main+0x800>)
 800678c:	4957      	ldr	r1, [pc, #348]	; (80068ec <main+0x804>)
 800678e:	6838      	ldr	r0, [r7, #0]
 8006790:	f7fa fa1e 	bl	8000bd0 <__aeabi_fmul>
 8006794:	f7fa fcd8 	bl	8001148 <__aeabi_f2iz>
 8006798:	b205      	sxth	r5, r0
      sprintf(lcdTemp, "%2d%1d %4d", abs(uv / 10), abs(uv % 10), vis);
 800679a:	0028      	movs	r0, r5
 800679c:	210a      	movs	r1, #10
 800679e:	f7f9 fe49 	bl	8000434 <__aeabi_idivmod>
 80067a2:	b20b      	sxth	r3, r1
 80067a4:	17da      	asrs	r2, r3, #31
 80067a6:	189b      	adds	r3, r3, r2
 80067a8:	4053      	eors	r3, r2
 80067aa:	210a      	movs	r1, #10
 80067ac:	0028      	movs	r0, r5
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	f7f9 fd5a 	bl	8000268 <__divsi3>
 80067b4:	b205      	sxth	r5, r0
 80067b6:	17eb      	asrs	r3, r5, #31
      int16_t vis = currentWeatherData.light;
 80067b8:	69b8      	ldr	r0, [r7, #24]
      sprintf(lcdTemp, "%2d%1d %4d", abs(uv / 10), abs(uv % 10), vis);
 80067ba:	18ed      	adds	r5, r5, r3
 80067bc:	405d      	eors	r5, r3
      int16_t vis = currentWeatherData.light;
 80067be:	f7fa fcc3 	bl	8001148 <__aeabi_f2iz>
      sprintf(lcdTemp, "%2d%1d %4d", abs(uv / 10), abs(uv % 10), vis);
 80067c2:	b200      	sxth	r0, r0
 80067c4:	9000      	str	r0, [sp, #0]
 80067c6:	002a      	movs	r2, r5
 80067c8:	9b03      	ldr	r3, [sp, #12]
 80067ca:	4953      	ldr	r1, [pc, #332]	; (8006918 <main+0x830>)
 80067cc:	0020      	movs	r0, r4
 80067ce:	f002 f921 	bl	8008a14 <siprintf>
      lcdDot = 0b01000000;
 80067d2:	2540      	movs	r5, #64	; 0x40
      lcdArrow = 0b00100000;
 80067d4:	2720      	movs	r7, #32
 80067d6:	e789      	b.n	80066ec <main+0x604>
    if (k == 3)
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d127      	bne.n	800682e <main+0x746>
      int energyJ = round(currentWeatherData.solarJ * 10);
 80067de:	4f42      	ldr	r7, [pc, #264]	; (80068e8 <main+0x800>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067e6:	4b4d      	ldr	r3, [pc, #308]	; (800691c <main+0x834>)
 80067e8:	f7fb fc58 	bl	800209c <__aeabi_dmul>
 80067ec:	f003 fd30 	bl	800a250 <round>
 80067f0:	f7fc f9ea 	bl	8002bc8 <__aeabi_d2iz>
      sprintf(lcdTemp, "%2d%1d %4d", abs(energyJ / 10), abs(energyJ % 10), (int) (currentWeatherData.solarW));
 80067f4:	210a      	movs	r1, #10
      int energyJ = round(currentWeatherData.solarJ * 10);
 80067f6:	0005      	movs	r5, r0
      sprintf(lcdTemp, "%2d%1d %4d", abs(energyJ / 10), abs(energyJ % 10), (int) (currentWeatherData.solarW));
 80067f8:	f7f9 fe1c 	bl	8000434 <__aeabi_idivmod>
 80067fc:	17ca      	asrs	r2, r1, #31
 80067fe:	188b      	adds	r3, r1, r2
 8006800:	4053      	eors	r3, r2
 8006802:	210a      	movs	r1, #10
 8006804:	0028      	movs	r0, r5
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	f7f9 fd2e 	bl	8000268 <__divsi3>
 800680c:	17c3      	asrs	r3, r0, #31
 800680e:	18c5      	adds	r5, r0, r3
 8006810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006814:	405d      	eors	r5, r3
 8006816:	f7fc f9d7 	bl	8002bc8 <__aeabi_d2iz>
 800681a:	002a      	movs	r2, r5
 800681c:	9000      	str	r0, [sp, #0]
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	493d      	ldr	r1, [pc, #244]	; (8006918 <main+0x830>)
 8006822:	0020      	movs	r0, r4
 8006824:	f002 f8f6 	bl	8008a14 <siprintf>
      lcdArrow = 0b00010000;
 8006828:	2710      	movs	r7, #16
      lcdDot = 0b01000000;
 800682a:	2540      	movs	r5, #64	; 0x40
 800682c:	e75e      	b.n	80066ec <main+0x604>
    if (k == 4)
 800682e:	9b02      	ldr	r3, [sp, #8]
 8006830:	2b04      	cmp	r3, #4
 8006832:	d120      	bne.n	8006876 <main+0x78e>
      int wind = round(currentWeatherData.windSpeed * 10);
 8006834:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <main+0x800>)
 8006836:	492d      	ldr	r1, [pc, #180]	; (80068ec <main+0x804>)
 8006838:	69d8      	ldr	r0, [r3, #28]
 800683a:	f7fa f9c9 	bl	8000bd0 <__aeabi_fmul>
 800683e:	f7fc fa71 	bl	8002d24 <__aeabi_f2d>
 8006842:	f003 fd05 	bl	800a250 <round>
 8006846:	f7fc f9bf 	bl	8002bc8 <__aeabi_d2iz>
      sprintf(lcdTemp, "%3d%1d", abs(wind / 10), abs(wind % 10));
 800684a:	210a      	movs	r1, #10
      int wind = round(currentWeatherData.windSpeed * 10);
 800684c:	0007      	movs	r7, r0
      sprintf(lcdTemp, "%3d%1d", abs(wind / 10), abs(wind % 10));
 800684e:	f7f9 fdf1 	bl	8000434 <__aeabi_idivmod>
 8006852:	17cb      	asrs	r3, r1, #31
 8006854:	18cd      	adds	r5, r1, r3
 8006856:	0038      	movs	r0, r7
 8006858:	210a      	movs	r1, #10
 800685a:	405d      	eors	r5, r3
 800685c:	f7f9 fd04 	bl	8000268 <__divsi3>
 8006860:	17c3      	asrs	r3, r0, #31
 8006862:	18c2      	adds	r2, r0, r3
 8006864:	405a      	eors	r2, r3
 8006866:	492e      	ldr	r1, [pc, #184]	; (8006920 <main+0x838>)
 8006868:	002b      	movs	r3, r5
 800686a:	0020      	movs	r0, r4
 800686c:	f002 f8d2 	bl	8008a14 <siprintf>
      lcdArrow = 0b00001000;
 8006870:	2708      	movs	r7, #8
      lcdDot = 0b00100000;
 8006872:	2520      	movs	r5, #32
 8006874:	e73a      	b.n	80066ec <main+0x604>
    uint8_t lcdArrow = 0;
 8006876:	2500      	movs	r5, #0
    if (k == 5)
 8006878:	9b02      	ldr	r3, [sp, #8]
    uint8_t lcdDot = 0;
 800687a:	002f      	movs	r7, r5
    if (k == 5)
 800687c:	2b05      	cmp	r3, #5
 800687e:	d15b      	bne.n	8006938 <main+0x850>
      sprintf(lcdTemp, "%3s %3d", windStr[(int) ((currentWeatherData.windDir / 22.5) + 0.5) % 16], currentWeatherData.windDir);
 8006880:	4b19      	ldr	r3, [pc, #100]	; (80068e8 <main+0x800>)
 8006882:	2404      	movs	r4, #4
 8006884:	5f1c      	ldrsh	r4, [r3, r4]
 8006886:	0020      	movs	r0, r4
 8006888:	f7fc f9d2 	bl	8002c30 <__aeabi_i2d>
 800688c:	2200      	movs	r2, #0
 800688e:	4b25      	ldr	r3, [pc, #148]	; (8006924 <main+0x83c>)
 8006890:	f7fa ffd0 	bl	8001834 <__aeabi_ddiv>
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <main+0x840>)
 8006896:	2200      	movs	r2, #0
 8006898:	f7fa fcbc 	bl	8001214 <__aeabi_dadd>
 800689c:	f7fc f994 	bl	8002bc8 <__aeabi_d2iz>
 80068a0:	4b22      	ldr	r3, [pc, #136]	; (800692c <main+0x844>)
 80068a2:	4018      	ands	r0, r3
 80068a4:	42a8      	cmp	r0, r5
 80068a6:	da04      	bge.n	80068b2 <main+0x7ca>
 80068a8:	2310      	movs	r3, #16
 80068aa:	3801      	subs	r0, #1
 80068ac:	425b      	negs	r3, r3
 80068ae:	4318      	orrs	r0, r3
 80068b0:	3001      	adds	r0, #1
 80068b2:	4a1f      	ldr	r2, [pc, #124]	; (8006930 <main+0x848>)
 80068b4:	0080      	lsls	r0, r0, #2
 80068b6:	5882      	ldr	r2, [r0, r2]
 80068b8:	0023      	movs	r3, r4
 80068ba:	491e      	ldr	r1, [pc, #120]	; (8006934 <main+0x84c>)
 80068bc:	4805      	ldr	r0, [pc, #20]	; (80068d4 <main+0x7ec>)
 80068be:	f002 f8a9 	bl	8008a14 <siprintf>
      lcdArrow = 0b00000100;
 80068c2:	2704      	movs	r7, #4
 80068c4:	e712      	b.n	80066ec <main+0x604>
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	0800a3ec 	.word	0x0800a3ec
 80068cc:	200002a5 	.word	0x200002a5
 80068d0:	0800a3f4 	.word	0x0800a3f4
 80068d4:	20000361 	.word	0x20000361
 80068d8:	0800a409 	.word	0x0800a409
 80068dc:	04000002 	.word	0x04000002
 80068e0:	200002ac 	.word	0x200002ac
 80068e4:	000001ff 	.word	0x000001ff
 80068e8:	200003d0 	.word	0x200003d0
 80068ec:	41200000 	.word	0x41200000
 80068f0:	42c80000 	.word	0x42c80000
 80068f4:	0800a412 	.word	0x0800a412
 80068f8:	0800a401 	.word	0x0800a401
 80068fc:	0800a422 	.word	0x0800a422
 8006900:	200002a4 	.word	0x200002a4
 8006904:	20000418 	.word	0x20000418
 8006908:	200004b8 	.word	0x200004b8
 800690c:	200002a8 	.word	0x200002a8
 8006910:	fffffeff 	.word	0xfffffeff
 8006914:	0800a45c 	.word	0x0800a45c
 8006918:	0800a429 	.word	0x0800a429
 800691c:	40240000 	.word	0x40240000
 8006920:	0800a434 	.word	0x0800a434
 8006924:	40368000 	.word	0x40368000
 8006928:	3fe00000 	.word	0x3fe00000
 800692c:	8000000f 	.word	0x8000000f
 8006930:	20000018 	.word	0x20000018
 8006934:	0800a43b 	.word	0x0800a43b
    if (k == 6)
 8006938:	9b02      	ldr	r3, [sp, #8]
 800693a:	2b06      	cmp	r3, #6
 800693c:	d000      	beq.n	8006940 <main+0x858>
 800693e:	e6d5      	b.n	80066ec <main+0x604>
      uint16_t batt = round((currentWeatherData.battery) * 100);
 8006940:	4b55      	ldr	r3, [pc, #340]	; (8006a98 <main+0x9b0>)
 8006942:	4956      	ldr	r1, [pc, #344]	; (8006a9c <main+0x9b4>)
 8006944:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006946:	f7fa f943 	bl	8000bd0 <__aeabi_fmul>
 800694a:	f7fc f9eb 	bl	8002d24 <__aeabi_f2d>
 800694e:	f003 fc7f 	bl	800a250 <round>
 8006952:	f7f9 fe25 	bl	80005a0 <__aeabi_d2uiz>
 8006956:	b285      	uxth	r5, r0
      struct tm t = RTC_EpochToHuman(RTC_GetTime());
 8006958:	f001 fae6 	bl	8007f28 <RTC_GetTime>
 800695c:	0001      	movs	r1, r0
 800695e:	0030      	movs	r0, r6
 8006960:	f001 fb0c 	bl	8007f7c <RTC_EpochToHuman>
      sprintf(lcdTemp, "%2d%02d %1d%02d", t.tm_hour, t.tm_min, batt / 100, abs(batt % 100));
 8006964:	0028      	movs	r0, r5
 8006966:	2164      	movs	r1, #100	; 0x64
 8006968:	f7f9 fc7a 	bl	8000260 <__aeabi_uidivmod>
 800696c:	b289      	uxth	r1, r1
 800696e:	9101      	str	r1, [sp, #4]
 8006970:	0028      	movs	r0, r5
 8006972:	2164      	movs	r1, #100	; 0x64
 8006974:	f7f9 fbee 	bl	8000154 <__udivsi3>
 8006978:	b280      	uxth	r0, r0
 800697a:	9000      	str	r0, [sp, #0]
 800697c:	6873      	ldr	r3, [r6, #4]
 800697e:	68b2      	ldr	r2, [r6, #8]
 8006980:	4947      	ldr	r1, [pc, #284]	; (8006aa0 <main+0x9b8>)
 8006982:	0020      	movs	r0, r4
 8006984:	f002 f846 	bl	8008a14 <siprintf>
      lcdArrow = 0b00000010;
 8006988:	2702      	movs	r7, #2
      lcdDot = 0b01000100;
 800698a:	2544      	movs	r5, #68	; 0x44
 800698c:	e6ae      	b.n	80066ec <main+0x604>
        RF24_powerUp();
 800698e:	f000 fe6d 	bl	800766c <RF24_powerUp>
        communication_Setup();
 8006992:	f001 f9eb 	bl	8007d6c <communication_Setup>
        uint8_t rxBuffer[32] = {0};
 8006996:	2220      	movs	r2, #32
 8006998:	0029      	movs	r1, r5
 800699a:	a820      	add	r0, sp, #128	; 0x80
 800699c:	f001 fd21 	bl	80083e2 <memset>
        struct data1StructHandle data1 = {DATA1_HEADER};
 80069a0:	2220      	movs	r2, #32
 80069a2:	0029      	movs	r1, r5
 80069a4:	0030      	movs	r0, r6
 80069a6:	f001 fd1c 	bl	80083e2 <memset>
 80069aa:	2311      	movs	r3, #17
        struct data2StructHandle data2 = {DATA2_HEADER};
 80069ac:	af10      	add	r7, sp, #64	; 0x40
 80069ae:	2220      	movs	r2, #32
 80069b0:	0029      	movs	r1, r5
 80069b2:	0038      	movs	r0, r7
        struct data1StructHandle data1 = {DATA1_HEADER};
 80069b4:	7033      	strb	r3, [r6, #0]
        struct data2StructHandle data2 = {DATA2_HEADER};
 80069b6:	f001 fd14 	bl	80083e2 <memset>
 80069ba:	2322      	movs	r3, #34	; 0x22
        data1.uv = weatherData.uv * 100;
 80069bc:	4937      	ldr	r1, [pc, #220]	; (8006a9c <main+0x9b4>)
        struct data2StructHandle data2 = {DATA2_HEADER};
 80069be:	703b      	strb	r3, [r7, #0]
        data1.uv = weatherData.uv * 100;
 80069c0:	6820      	ldr	r0, [r4, #0]
        size_t dataStructListSize[2] = {sizeof(data1), sizeof(data2)};
 80069c2:	3b02      	subs	r3, #2
 80069c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c6:	930c      	str	r3, [sp, #48]	; 0x30
        void* dataStructList[2] = {&data1, &data2};
 80069c8:	9609      	str	r6, [sp, #36]	; 0x24
 80069ca:	970a      	str	r7, [sp, #40]	; 0x28
        data1.uv = weatherData.uv * 100;
 80069cc:	f7fa f900 	bl	8000bd0 <__aeabi_fmul>
 80069d0:	f7f9 fdce 	bl	8000570 <__aeabi_f2uiz>
 80069d4:	8070      	strh	r0, [r6, #2]
        data1.windDir = weatherData.windDir;
 80069d6:	88a3      	ldrh	r3, [r4, #4]
 80069d8:	80b3      	strh	r3, [r6, #4]
        data1.tempSHT = weatherData.tempSHT;
 80069da:	68a3      	ldr	r3, [r4, #8]
 80069dc:	60b3      	str	r3, [r6, #8]
        data1.tempSoil = weatherData.tempSoil;
 80069de:	68e3      	ldr	r3, [r4, #12]
 80069e0:	60f3      	str	r3, [r6, #12]
        data1.humidity = weatherData.humidity;
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	6133      	str	r3, [r6, #16]
        data1.pressure = weatherData.pressure;
 80069e6:	6963      	ldr	r3, [r4, #20]
 80069e8:	6173      	str	r3, [r6, #20]
        data1.light = weatherData.light;
 80069ea:	69a3      	ldr	r3, [r4, #24]
 80069ec:	61b3      	str	r3, [r6, #24]
        data1.windSpeed = weatherData.windSpeed;
 80069ee:	69e3      	ldr	r3, [r4, #28]
 80069f0:	61f3      	str	r3, [r6, #28]
        data2.rain = weatherData.rain;
 80069f2:	6a23      	ldr	r3, [r4, #32]
 80069f4:	607b      	str	r3, [r7, #4]
        data2.battery = weatherData.battery;
 80069f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f8:	60bb      	str	r3, [r7, #8]
        data2.epoch = weatherData.epoch;
 80069fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069fc:	60fb      	str	r3, [r7, #12]
        data2.solarJ = weatherData.solarJ;
 80069fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a02:	613a      	str	r2, [r7, #16]
 8006a04:	617b      	str	r3, [r7, #20]
        data2.solarW = weatherData.solarW;
 8006a06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a08:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	61fc      	str	r4, [r7, #28]
 8006a0e:	2419      	movs	r4, #25
          if (communication_Transmit(dataStructList[dataSent], dataStructListSize[dataSent], rxBuffer))
 8006a10:	00ab      	lsls	r3, r5, #2
 8006a12:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a14:	5899      	ldr	r1, [r3, r2]
 8006a16:	af20      	add	r7, sp, #128	; 0x80
 8006a18:	a809      	add	r0, sp, #36	; 0x24
 8006a1a:	b2c9      	uxtb	r1, r1
 8006a1c:	003a      	movs	r2, r7
 8006a1e:	5818      	ldr	r0, [r3, r0]
 8006a20:	f001 f9c4 	bl	8007dac <communication_Transmit>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d00b      	beq.n	8006a40 <main+0x958>
            if (rxBuffer[0] == SYNC_HEADER)
 8006a28:	783b      	ldrb	r3, [r7, #0]
 8006a2a:	2b35      	cmp	r3, #53	; 0x35
 8006a2c:	d108      	bne.n	8006a40 <main+0x958>
              memcpy(&syncStruct, rxBuffer, sizeof(syncStruct));
 8006a2e:	0039      	movs	r1, r7
 8006a30:	4b1c      	ldr	r3, [pc, #112]	; (8006aa4 <main+0x9bc>)
              dataSent++;
 8006a32:	3501      	adds	r5, #1
              memcpy(&syncStruct, rxBuffer, sizeof(syncStruct));
 8006a34:	c985      	ldmia	r1!, {r0, r2, r7}
 8006a36:	c385      	stmia	r3!, {r0, r2, r7}
 8006a38:	001a      	movs	r2, r3
 8006a3a:	680b      	ldr	r3, [r1, #0]
              dataSent++;
 8006a3c:	b2ed      	uxtb	r5, r5
              memcpy(&syncStruct, rxBuffer, sizeof(syncStruct));
 8006a3e:	6013      	str	r3, [r2, #0]
          sprintf(temp, "SEND %d", sendTimeout--);
 8006a40:	0022      	movs	r2, r4
 8006a42:	4919      	ldr	r1, [pc, #100]	; (8006aa8 <main+0x9c0>)
 8006a44:	a80d      	add	r0, sp, #52	; 0x34
 8006a46:	f001 ffe5 	bl	8008a14 <siprintf>
          glassLCD_WriteData(temp);
 8006a4a:	a80d      	add	r0, sp, #52	; 0x34
 8006a4c:	f001 fa14 	bl	8007e78 <glassLCD_WriteData>
          glassLCD_Update();
 8006a50:	f001 f9c2 	bl	8007dd8 <glassLCD_Update>
          HAL_Delay(1000);
 8006a54:	20fa      	movs	r0, #250	; 0xfa
 8006a56:	0080      	lsls	r0, r0, #2
 8006a58:	f7fc fab4 	bl	8002fc4 <HAL_Delay>
        while (dataSent < 2 && sendTimeout > 0)
 8006a5c:	2d01      	cmp	r5, #1
 8006a5e:	d917      	bls.n	8006a90 <main+0x9a8>
        RF24_flush_rx();
 8006a60:	f000 fd5a 	bl	8007518 <RF24_flush_rx>
        RF24_flush_tx();
 8006a64:	f000 fd64 	bl	8007530 <RF24_flush_tx>
        RF24_powerDown();
 8006a68:	f000 fdf0 	bl	800764c <RF24_powerDown>
      if (dataSent == 0)
 8006a6c:	2d00      	cmp	r5, #0
 8006a6e:	d100      	bne.n	8006a72 <main+0x98a>
 8006a70:	e65e      	b.n	8006730 <main+0x648>
        RTC_SetTime(syncStruct.myEpoch);
 8006a72:	4c0c      	ldr	r4, [pc, #48]	; (8006aa4 <main+0x9bc>)
 8006a74:	6860      	ldr	r0, [r4, #4]
 8006a76:	f001 fa99 	bl	8007fac <RTC_SetTime>
        RTC_SetAlarmEpoch(syncStruct.sendEpoch, RTC_ALARMMASK_DATEWEEKDAY);
 8006a7a:	2180      	movs	r1, #128	; 0x80
 8006a7c:	68e0      	ldr	r0, [r4, #12]
 8006a7e:	0609      	lsls	r1, r1, #24
 8006a80:	f001 fad0 	bl	8008024 <RTC_SetAlarmEpoch>
        sendInterval = syncStruct.sendEpoch - syncStruct.myEpoch;
 8006a84:	6862      	ldr	r2, [r4, #4]
 8006a86:	68e3      	ldr	r3, [r4, #12]
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	4a08      	ldr	r2, [pc, #32]	; (8006aac <main+0x9c4>)
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	e659      	b.n	8006744 <main+0x65c>
 8006a90:	3c01      	subs	r4, #1
        while (dataSent < 2 && sendTimeout > 0)
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	d1bc      	bne.n	8006a10 <main+0x928>
 8006a96:	e7e3      	b.n	8006a60 <main+0x978>
 8006a98:	200003d0 	.word	0x200003d0
 8006a9c:	42c80000 	.word	0x42c80000
 8006aa0:	0800a443 	.word	0x0800a443
 8006aa4:	20000008 	.word	0x20000008
 8006aa8:	0800a453 	.word	0x0800a453
 8006aac:	200004b8 	.word	0x200004b8

08006ab0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  interruptButton |= GPIO_Pin;
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <HAL_GPIO_EXTI_Callback+0xc>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	4310      	orrs	r0, r2
 8006ab6:	6018      	str	r0, [r3, #0]
}
 8006ab8:	4770      	bx	lr
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	200002a8 	.word	0x200002a8

08006ac0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
  alarmInterruptFlag = 1;
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4b01      	ldr	r3, [pc, #4]	; (8006ac8 <HAL_RTC_AlarmAEventCallback+0x8>)
 8006ac4:	701a      	strb	r2, [r3, #0]
}
 8006ac6:	4770      	bx	lr
 8006ac8:	200002a4 	.word	0x200002a4

08006acc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006acc:	2201      	movs	r2, #1
 8006ace:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <HAL_MspInit+0x18>)
 8006ad0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ad6:	2280      	movs	r2, #128	; 0x80
 8006ad8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006ada:	0552      	lsls	r2, r2, #21
 8006adc:	430a      	orrs	r2, r1
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ae0:	4770      	bx	lr
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	40021000 	.word	0x40021000

08006ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	0004      	movs	r4, r0
 8006aec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aee:	2214      	movs	r2, #20
 8006af0:	2100      	movs	r1, #0
 8006af2:	a801      	add	r0, sp, #4
 8006af4:	f001 fc75 	bl	80083e2 <memset>
  if(hadc->Instance==ADC1)
 8006af8:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <HAL_ADC_MspInit+0x4c>)
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d116      	bne.n	8006b2e <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006b00:	2280      	movs	r2, #128	; 0x80
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <HAL_ADC_MspInit+0x50>)
 8006b04:	0092      	lsls	r2, r2, #2
 8006b06:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b08:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006b0a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b0c:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006b0e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b12:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b14:	430a      	orrs	r2, r1
 8006b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	400b      	ands	r3, r1
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8006b20:	2313      	movs	r3, #19
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b22:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8006b24:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b26:	3b10      	subs	r3, #16
 8006b28:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b2a:	f7fc fdfb 	bl	8003724 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006b2e:	b006      	add	sp, #24
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	40012400 	.word	0x40012400
 8006b38:	40021000 	.word	0x40021000

08006b3c <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8006b3c:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <HAL_ADC_MspDeInit+0x20>)
 8006b3e:	6802      	ldr	r2, [r0, #0]
{
 8006b40:	b510      	push	{r4, lr}
  if(hadc->Instance==ADC1)
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d109      	bne.n	8006b5a <HAL_ADC_MspDeInit+0x1e>
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4);
 8006b46:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006b48:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <HAL_ADC_MspDeInit+0x24>)
 8006b4a:	4906      	ldr	r1, [pc, #24]	; (8006b64 <HAL_ADC_MspDeInit+0x28>)
 8006b4c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4);
 8006b4e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_DISABLE();
 8006b50:	400b      	ands	r3, r1
 8006b52:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4);
 8006b54:	2113      	movs	r1, #19
 8006b56:	f7fc fea7 	bl	80038a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8006b5a:	bd10      	pop	{r4, pc}
 8006b5c:	40012400 	.word	0x40012400
 8006b60:	40021000 	.word	0x40021000
 8006b64:	fffffdff 	.word	0xfffffdff

08006b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	0004      	movs	r4, r0
 8006b6c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b6e:	2214      	movs	r2, #20
 8006b70:	2100      	movs	r1, #0
 8006b72:	a801      	add	r0, sp, #4
 8006b74:	f001 fc35 	bl	80083e2 <memset>
  if(hi2c->Instance==I2C1)
 8006b78:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <HAL_I2C_MspInit+0x58>)
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d11c      	bne.n	8006bba <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b80:	2102      	movs	r1, #2
 8006b82:	4c10      	ldr	r4, [pc, #64]	; (8006bc4 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b84:	4810      	ldr	r0, [pc, #64]	; (8006bc8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b8e:	400b      	ands	r3, r1
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006b94:	23c0      	movs	r3, #192	; 0xc0
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b9a:	2312      	movs	r3, #18
 8006b9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b9e:	3b11      	subs	r3, #17
 8006ba0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ba2:	185b      	adds	r3, r3, r1
 8006ba4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006ba8:	3301      	adds	r3, #1
 8006baa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bac:	f7fc fdba 	bl	8003724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006bb4:	039b      	lsls	r3, r3, #14
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006bba:	b006      	add	sp, #24
 8006bbc:	bd10      	pop	{r4, pc}
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	40005400 	.word	0x40005400
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	50000400 	.word	0x50000400

08006bcc <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8006bcc:	4b07      	ldr	r3, [pc, #28]	; (8006bec <HAL_I2C_MspDeInit+0x20>)
 8006bce:	6802      	ldr	r2, [r0, #0]
{
 8006bd0:	b510      	push	{r4, lr}
  if(hi2c->Instance==I2C1)
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d109      	bne.n	8006bea <HAL_I2C_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006bd6:	4a06      	ldr	r2, [pc, #24]	; (8006bf0 <HAL_I2C_MspDeInit+0x24>)
 8006bd8:	4906      	ldr	r1, [pc, #24]	; (8006bf4 <HAL_I2C_MspDeInit+0x28>)
 8006bda:	6b93      	ldr	r3, [r2, #56]	; 0x38
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8006bdc:	4806      	ldr	r0, [pc, #24]	; (8006bf8 <HAL_I2C_MspDeInit+0x2c>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006bde:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8006be0:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006be2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8006be4:	0089      	lsls	r1, r1, #2
 8006be6:	f7fc fe5f 	bl	80038a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8006bea:	bd10      	pop	{r4, pc}
 8006bec:	40005400 	.word	0x40005400
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	ffdfffff 	.word	0xffdfffff
 8006bf8:	50000400 	.word	0x50000400

08006bfc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <HAL_RTC_MspInit+0x28>)
 8006bfe:	6802      	ldr	r2, [r0, #0]
{
 8006c00:	b510      	push	{r4, lr}
  if(hrtc->Instance==RTC)
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d10d      	bne.n	8006c22 <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006c06:	2380      	movs	r3, #128	; 0x80
 8006c08:	4a07      	ldr	r2, [pc, #28]	; (8006c28 <HAL_RTC_MspInit+0x2c>)
 8006c0a:	02db      	lsls	r3, r3, #11
 8006c0c:	6d11      	ldr	r1, [r2, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8006c0e:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8006c14:	2200      	movs	r2, #0
 8006c16:	0011      	movs	r1, r2
 8006c18:	f7fc fd30 	bl	800367c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8006c1c:	2002      	movs	r0, #2
 8006c1e:	f7fc fd5d 	bl	80036dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006c22:	bd10      	pop	{r4, pc}
 8006c24:	40002800 	.word	0x40002800
 8006c28:	40021000 	.word	0x40021000

08006c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	0004      	movs	r4, r0
 8006c30:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c32:	2214      	movs	r2, #20
 8006c34:	2100      	movs	r1, #0
 8006c36:	a801      	add	r0, sp, #4
 8006c38:	f001 fbd3 	bl	80083e2 <memset>
  if(hspi->Instance==SPI1)
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <HAL_SPI_MspInit+0x50>)
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d118      	bne.n	8006c76 <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c44:	2280      	movs	r2, #128	; 0x80
 8006c46:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <HAL_SPI_MspInit+0x54>)
 8006c48:	0152      	lsls	r2, r2, #5
 8006c4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c4c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c4e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c50:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c52:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c56:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	400b      	ands	r3, r1
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006c64:	23e0      	movs	r3, #224	; 0xe0
 8006c66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c68:	3bde      	subs	r3, #222	; 0xde
 8006c6a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c6c:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c6e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c70:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c72:	f7fc fd57 	bl	8003724 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006c76:	b006      	add	sp, #24
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	40013000 	.word	0x40013000
 8006c80:	40021000 	.word	0x40021000

08006c84 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <HAL_SPI_MspDeInit+0x20>)
 8006c86:	6802      	ldr	r2, [r0, #0]
{
 8006c88:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d109      	bne.n	8006ca2 <HAL_SPI_MspDeInit+0x1e>
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8006c8e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_DISABLE();
 8006c90:	4a05      	ldr	r2, [pc, #20]	; (8006ca8 <HAL_SPI_MspDeInit+0x24>)
 8006c92:	4906      	ldr	r1, [pc, #24]	; (8006cac <HAL_SPI_MspDeInit+0x28>)
 8006c94:	6b53      	ldr	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8006c96:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_DISABLE();
 8006c98:	400b      	ands	r3, r1
 8006c9a:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8006c9c:	21e0      	movs	r1, #224	; 0xe0
 8006c9e:	f7fc fe03 	bl	80038a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8006ca2:	bd10      	pop	{r4, pc}
 8006ca4:	40013000 	.word	0x40013000
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	ffffefff 	.word	0xffffefff

08006cb0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <HAL_TIM_Base_MspInit+0x14>)
 8006cb2:	6802      	ldr	r2, [r0, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d104      	bne.n	8006cc2 <HAL_TIM_Base_MspInit+0x12>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006cb8:	2310      	movs	r3, #16
 8006cba:	4a03      	ldr	r2, [pc, #12]	; (8006cc8 <HAL_TIM_Base_MspInit+0x18>)
 8006cbc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8006cc2:	4770      	bx	lr
 8006cc4:	40001000 	.word	0x40001000
 8006cc8:	40021000 	.word	0x40021000

08006ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	0004      	movs	r4, r0
 8006cd0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd2:	2214      	movs	r2, #20
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	a801      	add	r0, sp, #4
 8006cd8:	f001 fb83 	bl	80083e2 <memset>
  if(huart->Instance==USART2)
 8006cdc:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <HAL_UART_MspInit+0x54>)
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d11a      	bne.n	8006d1a <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ce4:	2280      	movs	r2, #128	; 0x80
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <HAL_UART_MspInit+0x58>)
 8006ce8:	0292      	lsls	r2, r2, #10
 8006cea:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cec:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cee:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf0:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	400b      	ands	r3, r1
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006d04:	230c      	movs	r3, #12
 8006d06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d08:	3b0a      	subs	r3, #10
 8006d0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d0c:	185b      	adds	r3, r3, r1
 8006d0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8006d10:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d12:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8006d14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d16:	f7fc fd05 	bl	8003724 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006d1a:	b006      	add	sp, #24
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	40004400 	.word	0x40004400
 8006d24:	40021000 	.word	0x40021000

08006d28 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8006d28:	4b07      	ldr	r3, [pc, #28]	; (8006d48 <HAL_UART_MspDeInit+0x20>)
 8006d2a:	6802      	ldr	r2, [r0, #0]
{
 8006d2c:	b510      	push	{r4, lr}
  if(huart->Instance==USART2)
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d109      	bne.n	8006d46 <HAL_UART_MspDeInit+0x1e>
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006d32:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8006d34:	4a05      	ldr	r2, [pc, #20]	; (8006d4c <HAL_UART_MspDeInit+0x24>)
 8006d36:	4906      	ldr	r1, [pc, #24]	; (8006d50 <HAL_UART_MspDeInit+0x28>)
 8006d38:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006d3a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8006d3c:	400b      	ands	r3, r1
 8006d3e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8006d40:	210c      	movs	r1, #12
 8006d42:	f7fc fdb1 	bl	80038a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8006d46:	bd10      	pop	{r4, pc}
 8006d48:	40004400 	.word	0x40004400
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	fffdffff 	.word	0xfffdffff

08006d54 <NMI_Handler>:
 8006d54:	4770      	bx	lr

08006d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d56:	e7fe      	b.n	8006d56 <HardFault_Handler>

08006d58 <SVC_Handler>:
 8006d58:	4770      	bx	lr

08006d5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d5a:	4770      	bx	lr

08006d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d5e:	f7fc f91f 	bl	8002fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d62:	bd10      	pop	{r4, pc}

08006d64 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8006d64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006d66:	4802      	ldr	r0, [pc, #8]	; (8006d70 <RTC_IRQHandler+0xc>)
 8006d68:	f7fd fe66 	bl	8004a38 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	46c0      	nop			; (mov r8, r8)
 8006d70:	20000458 	.word	0x20000458

08006d74 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8006d74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006d76:	2002      	movs	r0, #2
 8006d78:	f7fc fe22 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8006d7c:	bd10      	pop	{r4, pc}

08006d7e <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006d7e:	2080      	movs	r0, #128	; 0x80
{
 8006d80:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006d82:	0040      	lsls	r0, r0, #1
 8006d84:	f7fc fe1c 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8006d88:	bd10      	pop	{r4, pc}
	...

08006d8c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <_sbrk+0x2c>)
{
 8006d8e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8006d90:	6819      	ldr	r1, [r3, #0]
{
 8006d92:	0002      	movs	r2, r0
	if (heap_end == 0)
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d101      	bne.n	8006d9c <_sbrk+0x10>
		heap_end = &end;
 8006d98:	4908      	ldr	r1, [pc, #32]	; (8006dbc <_sbrk+0x30>)
 8006d9a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8006d9c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8006d9e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006da0:	1882      	adds	r2, r0, r2
 8006da2:	428a      	cmp	r2, r1
 8006da4:	d906      	bls.n	8006db4 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006da6:	f001 f9d3 	bl	8008150 <__errno>
 8006daa:	230c      	movs	r3, #12
 8006dac:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006dae:	2001      	movs	r0, #1
 8006db0:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8006db2:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8006db4:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8006db6:	e7fc      	b.n	8006db2 <_sbrk+0x26>
 8006db8:	200002b4 	.word	0x200002b4
 8006dbc:	20000618 	.word	0x20000618

08006dc0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006dc0:	2280      	movs	r2, #128	; 0x80
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <SystemInit+0x44>)
 8006dc4:	0052      	lsls	r2, r2, #1
 8006dc6:	6819      	ldr	r1, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	490e      	ldr	r1, [pc, #56]	; (8006e08 <SystemInit+0x48>)
 8006dd0:	400a      	ands	r2, r1
 8006dd2:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	490d      	ldr	r1, [pc, #52]	; (8006e0c <SystemInit+0x4c>)
 8006dd8:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006dda:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006ddc:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	438a      	bics	r2, r1
 8006de2:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	490a      	ldr	r1, [pc, #40]	; (8006e10 <SystemInit+0x50>)
 8006de8:	400a      	ands	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	4909      	ldr	r1, [pc, #36]	; (8006e14 <SystemInit+0x54>)
 8006df0:	400a      	ands	r2, r1
 8006df2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006df4:	2200      	movs	r2, #0
 8006df6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006df8:	2280      	movs	r2, #128	; 0x80
 8006dfa:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <SystemInit+0x58>)
 8006dfc:	0512      	lsls	r2, r2, #20
 8006dfe:	609a      	str	r2, [r3, #8]
#endif
}
 8006e00:	4770      	bx	lr
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	40021000 	.word	0x40021000
 8006e08:	88ff400c 	.word	0x88ff400c
 8006e0c:	fef6fff6 	.word	0xfef6fff6
 8006e10:	fffbffff 	.word	0xfffbffff
 8006e14:	ff02ffff 	.word	0xff02ffff
 8006e18:	e000ed00 	.word	0xe000ed00

08006e1c <BMP180_Init>:
static int16_t AC1,AC2,AC3,VB1,VB2,MB,MC,MD;
static uint16_t AC4,AC5,AC6;
static double c5,c6,mc,md,xx0,xx1,xx2,yy0,yy1,yy2,p0,p1,p2;

uint8_t BMP180_Init()
{
 8006e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t _calData[22];
	double c3,c4,b1;

	// Set data pointer to calibration data
	_calData[0] = 0xAA;
	uint8_t _error = HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 8006e1e:	26fa      	movs	r6, #250	; 0xfa
	_calData[0] = 0xAA;
 8006e20:	23aa      	movs	r3, #170	; 0xaa
{
 8006e22:	b095      	sub	sp, #84	; 0x54
	uint8_t _error = HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 8006e24:	4d67      	ldr	r5, [pc, #412]	; (8006fc4 <BMP180_Init+0x1a8>)
	_calData[0] = 0xAA;
 8006e26:	ac0e      	add	r4, sp, #56	; 0x38
	uint8_t _error = HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 8006e28:	00b6      	lsls	r6, r6, #2
	_calData[0] = 0xAA;
 8006e2a:	7023      	strb	r3, [r4, #0]
	uint8_t _error = HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 8006e2c:	0022      	movs	r2, r4
 8006e2e:	9600      	str	r6, [sp, #0]
 8006e30:	3ba9      	subs	r3, #169	; 0xa9
 8006e32:	21ee      	movs	r1, #238	; 0xee
 8006e34:	0028      	movs	r0, r5
 8006e36:	f7fc ff5b 	bl	8003cf0 <HAL_I2C_Master_Transmit>

	// Get all calibration data
	_error |= HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _calData, 22, 1000);
 8006e3a:	9600      	str	r6, [sp, #0]
	uint8_t _error = HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _calData, 1, 1000);
 8006e3c:	9008      	str	r0, [sp, #32]
	_error |= HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _calData, 22, 1000);
 8006e3e:	0022      	movs	r2, r4
 8006e40:	2316      	movs	r3, #22
 8006e42:	21ee      	movs	r1, #238	; 0xee
 8006e44:	0028      	movs	r0, r5
 8006e46:	f7fc ffe9 	bl	8003e1c <HAL_I2C_Master_Receive>

	AC1 = (_calData[0] << 8) | _calData[1];
 8006e4a:	7822      	ldrb	r2, [r4, #0]
	_error |= HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _calData, 22, 1000);
 8006e4c:	9009      	str	r0, [sp, #36]	; 0x24
	AC1 = (_calData[0] << 8) | _calData[1];
 8006e4e:	7863      	ldrb	r3, [r4, #1]
 8006e50:	0212      	lsls	r2, r2, #8
 8006e52:	4313      	orrs	r3, r2
 8006e54:	b21b      	sxth	r3, r3
 8006e56:	9303      	str	r3, [sp, #12]
	AC2 = (_calData[2] << 8) | _calData[3];
 8006e58:	78a2      	ldrb	r2, [r4, #2]
 8006e5a:	78e3      	ldrb	r3, [r4, #3]
 8006e5c:	0212      	lsls	r2, r2, #8
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	b21b      	sxth	r3, r3
 8006e62:	9304      	str	r3, [sp, #16]
	AC3 = (_calData[4] << 8) | _calData[5];
	AC4 = (_calData[6] << 8) | _calData[7];
	AC5 = (_calData[8] << 8) | _calData[9];
	AC6 = (_calData[10] << 8) | _calData[11];
 8006e64:	7aa7      	ldrb	r7, [r4, #10]
 8006e66:	7ae3      	ldrb	r3, [r4, #11]
 8006e68:	023f      	lsls	r7, r7, #8
 8006e6a:	433b      	orrs	r3, r7
 8006e6c:	9305      	str	r3, [sp, #20]
	VB1 = (_calData[12] << 8) | _calData[13];
	VB2 = (_calData[14] << 8) | _calData[15];
 8006e6e:	7ba2      	ldrb	r2, [r4, #14]
 8006e70:	7be3      	ldrb	r3, [r4, #15]
 8006e72:	0212      	lsls	r2, r2, #8
 8006e74:	4313      	orrs	r3, r2
 8006e76:	b21b      	sxth	r3, r3
 8006e78:	9306      	str	r3, [sp, #24]
	MB = (_calData[16] << 8) | _calData[17];
	MC = (_calData[18] << 8) | _calData[19];
 8006e7a:	7ca3      	ldrb	r3, [r4, #18]
 8006e7c:	7ce6      	ldrb	r6, [r4, #19]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	431e      	orrs	r6, r3
 8006e82:	b233      	sxth	r3, r6
 8006e84:	9307      	str	r3, [sp, #28]
	MD = (_calData[20] << 8) | _calData[21];
 8006e86:	7d23      	ldrb	r3, [r4, #20]
 8006e88:	7d65      	ldrb	r5, [r4, #21]
 8006e8a:	021b      	lsls	r3, r3, #8
 8006e8c:	431d      	orrs	r5, r3
	AC3 = (_calData[4] << 8) | _calData[5];
 8006e8e:	7923      	ldrb	r3, [r4, #4]
 8006e90:	7960      	ldrb	r0, [r4, #5]
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	4318      	orrs	r0, r3

	c3 = 160.0 * pow(2,-15) * AC3;
 8006e96:	b200      	sxth	r0, r0
 8006e98:	f7fb feca 	bl	8002c30 <__aeabi_i2d>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4b4a      	ldr	r3, [pc, #296]	; (8006fc8 <BMP180_Init+0x1ac>)
 8006ea0:	f7fb f8fc 	bl	800209c <__aeabi_dmul>
 8006ea4:	900a      	str	r0, [sp, #40]	; 0x28
 8006ea6:	910b      	str	r1, [sp, #44]	; 0x2c
	AC4 = (_calData[6] << 8) | _calData[7];
 8006ea8:	79a3      	ldrb	r3, [r4, #6]
 8006eaa:	79e0      	ldrb	r0, [r4, #7]
 8006eac:	021b      	lsls	r3, r3, #8
	c4 = pow(10,-3) * pow(2,-15) * AC4;
 8006eae:	4318      	orrs	r0, r3
 8006eb0:	f7fb febe 	bl	8002c30 <__aeabi_i2d>
 8006eb4:	4a45      	ldr	r2, [pc, #276]	; (8006fcc <BMP180_Init+0x1b0>)
 8006eb6:	4b46      	ldr	r3, [pc, #280]	; (8006fd0 <BMP180_Init+0x1b4>)
 8006eb8:	f7fb f8f0 	bl	800209c <__aeabi_dmul>
	VB1 = (_calData[12] << 8) | _calData[13];
 8006ebc:	7b23      	ldrb	r3, [r4, #12]
	c4 = pow(10,-3) * pow(2,-15) * AC4;
 8006ebe:	0006      	movs	r6, r0
	VB1 = (_calData[12] << 8) | _calData[13];
 8006ec0:	7b60      	ldrb	r0, [r4, #13]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	4318      	orrs	r0, r3
	b1 = pow(160,2) * pow(2,-30) * VB1;
 8006ec6:	b200      	sxth	r0, r0
	c4 = pow(10,-3) * pow(2,-15) * AC4;
 8006ec8:	000f      	movs	r7, r1
	b1 = pow(160,2) * pow(2,-30) * VB1;
 8006eca:	f7fb feb1 	bl	8002c30 <__aeabi_i2d>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	4b40      	ldr	r3, [pc, #256]	; (8006fd4 <BMP180_Init+0x1b8>)
 8006ed2:	f7fb f8e3 	bl	800209c <__aeabi_dmul>
 8006ed6:	900c      	str	r0, [sp, #48]	; 0x30
 8006ed8:	910d      	str	r1, [sp, #52]	; 0x34
	AC5 = (_calData[8] << 8) | _calData[9];
 8006eda:	7a23      	ldrb	r3, [r4, #8]
 8006edc:	7a60      	ldrb	r0, [r4, #9]
 8006ede:	021b      	lsls	r3, r3, #8
	c5 = (pow(2,-15) / 160) * AC5;
 8006ee0:	4318      	orrs	r0, r3
 8006ee2:	f7fb fea5 	bl	8002c30 <__aeabi_i2d>
 8006ee6:	4a3c      	ldr	r2, [pc, #240]	; (8006fd8 <BMP180_Init+0x1bc>)
 8006ee8:	4b3c      	ldr	r3, [pc, #240]	; (8006fdc <BMP180_Init+0x1c0>)
 8006eea:	f7fb f8d7 	bl	800209c <__aeabi_dmul>
 8006eee:	4b3c      	ldr	r3, [pc, #240]	; (8006fe0 <BMP180_Init+0x1c4>)
	MD = (_calData[20] << 8) | _calData[21];
 8006ef0:	b22d      	sxth	r5, r5
	c5 = (pow(2,-15) / 160) * AC5;
 8006ef2:	6018      	str	r0, [r3, #0]
 8006ef4:	6059      	str	r1, [r3, #4]
	c6 = AC6;
 8006ef6:	9805      	ldr	r0, [sp, #20]
 8006ef8:	f7fb fedc 	bl	8002cb4 <__aeabi_ui2d>
 8006efc:	4b39      	ldr	r3, [pc, #228]	; (8006fe4 <BMP180_Init+0x1c8>)
 8006efe:	6018      	str	r0, [r3, #0]
 8006f00:	6059      	str	r1, [r3, #4]
	mc = (pow(2,11) / pow(160,2)) * MC;
 8006f02:	9807      	ldr	r0, [sp, #28]
 8006f04:	f7fb fe94 	bl	8002c30 <__aeabi_i2d>
 8006f08:	4a37      	ldr	r2, [pc, #220]	; (8006fe8 <BMP180_Init+0x1cc>)
 8006f0a:	4b38      	ldr	r3, [pc, #224]	; (8006fec <BMP180_Init+0x1d0>)
 8006f0c:	f7fb f8c6 	bl	800209c <__aeabi_dmul>
 8006f10:	4b37      	ldr	r3, [pc, #220]	; (8006ff0 <BMP180_Init+0x1d4>)
 8006f12:	6018      	str	r0, [r3, #0]
 8006f14:	6059      	str	r1, [r3, #4]
	md = MD / 160.0;
 8006f16:	0028      	movs	r0, r5
 8006f18:	f7fb fe8a 	bl	8002c30 <__aeabi_i2d>
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4b35      	ldr	r3, [pc, #212]	; (8006ff4 <BMP180_Init+0x1d8>)
 8006f20:	f7fa fc88 	bl	8001834 <__aeabi_ddiv>
 8006f24:	4b34      	ldr	r3, [pc, #208]	; (8006ff8 <BMP180_Init+0x1dc>)
 8006f26:	6018      	str	r0, [r3, #0]
 8006f28:	6059      	str	r1, [r3, #4]
	xx0 = AC1;
 8006f2a:	9803      	ldr	r0, [sp, #12]
 8006f2c:	f7fb fe80 	bl	8002c30 <__aeabi_i2d>
 8006f30:	4b32      	ldr	r3, [pc, #200]	; (8006ffc <BMP180_Init+0x1e0>)
 8006f32:	6018      	str	r0, [r3, #0]
 8006f34:	6059      	str	r1, [r3, #4]
	xx1 = 160.0 * pow(2,-13) * AC2;
 8006f36:	9804      	ldr	r0, [sp, #16]
 8006f38:	f7fb fe7a 	bl	8002c30 <__aeabi_i2d>
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4b30      	ldr	r3, [pc, #192]	; (8007000 <BMP180_Init+0x1e4>)
 8006f40:	f7fb f8ac 	bl	800209c <__aeabi_dmul>
 8006f44:	4b2f      	ldr	r3, [pc, #188]	; (8007004 <BMP180_Init+0x1e8>)
 8006f46:	6018      	str	r0, [r3, #0]
 8006f48:	6059      	str	r1, [r3, #4]
	xx2 = pow(160,2) * pow(2,-25) * VB2;
 8006f4a:	9806      	ldr	r0, [sp, #24]
 8006f4c:	f7fb fe70 	bl	8002c30 <__aeabi_i2d>
 8006f50:	2200      	movs	r2, #0
 8006f52:	4b2d      	ldr	r3, [pc, #180]	; (8007008 <BMP180_Init+0x1ec>)
 8006f54:	f7fb f8a2 	bl	800209c <__aeabi_dmul>
 8006f58:	4b2c      	ldr	r3, [pc, #176]	; (800700c <BMP180_Init+0x1f0>)
	yy0 = c4 * pow(2,15);
 8006f5a:	2200      	movs	r2, #0
	xx2 = pow(160,2) * pow(2,-25) * VB2;
 8006f5c:	6018      	str	r0, [r3, #0]
 8006f5e:	6059      	str	r1, [r3, #4]
	yy0 = c4 * pow(2,15);
 8006f60:	4b2b      	ldr	r3, [pc, #172]	; (8007010 <BMP180_Init+0x1f4>)
 8006f62:	0030      	movs	r0, r6
 8006f64:	0039      	movs	r1, r7
 8006f66:	f7fb f899 	bl	800209c <__aeabi_dmul>
 8006f6a:	4b2a      	ldr	r3, [pc, #168]	; (8007014 <BMP180_Init+0x1f8>)
	yy1 = c4 * c3;
 8006f6c:	0032      	movs	r2, r6
	yy0 = c4 * pow(2,15);
 8006f6e:	6018      	str	r0, [r3, #0]
 8006f70:	6059      	str	r1, [r3, #4]
	yy1 = c4 * c3;
 8006f72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f76:	003b      	movs	r3, r7
 8006f78:	f7fb f890 	bl	800209c <__aeabi_dmul>
 8006f7c:	4b26      	ldr	r3, [pc, #152]	; (8007018 <BMP180_Init+0x1fc>)
 8006f7e:	6018      	str	r0, [r3, #0]
 8006f80:	6059      	str	r1, [r3, #4]
	yy2 = c4 * b1;
 8006f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f86:	0030      	movs	r0, r6
 8006f88:	0039      	movs	r1, r7
 8006f8a:	f7fb f887 	bl	800209c <__aeabi_dmul>
 8006f8e:	4b23      	ldr	r3, [pc, #140]	; (800701c <BMP180_Init+0x200>)
 8006f90:	6018      	str	r0, [r3, #0]
 8006f92:	6059      	str	r1, [r3, #4]
	p0 = (3791.0 - 8.0) / 1600.0;
 8006f94:	4b22      	ldr	r3, [pc, #136]	; (8007020 <BMP180_Init+0x204>)
 8006f96:	4823      	ldr	r0, [pc, #140]	; (8007024 <BMP180_Init+0x208>)
 8006f98:	4923      	ldr	r1, [pc, #140]	; (8007028 <BMP180_Init+0x20c>)
 8006f9a:	6018      	str	r0, [r3, #0]
 8006f9c:	6059      	str	r1, [r3, #4]
	p1 = 1.0 - 7357.0 * pow(2,-20);
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	4b22      	ldr	r3, [pc, #136]	; (800702c <BMP180_Init+0x210>)
 8006fa2:	4923      	ldr	r1, [pc, #140]	; (8007030 <BMP180_Init+0x214>)
 8006fa4:	6018      	str	r0, [r3, #0]
 8006fa6:	6059      	str	r1, [r3, #4]
	p2 = 3038.0 * 100.0 * pow(2,-36);
 8006fa8:	2000      	movs	r0, #0
 8006faa:	4922      	ldr	r1, [pc, #136]	; (8007034 <BMP180_Init+0x218>)
 8006fac:	4b22      	ldr	r3, [pc, #136]	; (8007038 <BMP180_Init+0x21c>)
 8006fae:	6018      	str	r0, [r3, #0]
 8006fb0:	6059      	str	r1, [r3, #4]
	_error |= HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _calData, 22, 1000);
 8006fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb4:	9808      	ldr	r0, [sp, #32]
 8006fb6:	4318      	orrs	r0, r3
	return (_error == 0?1:0);
 8006fb8:	b2c0      	uxtb	r0, r0
 8006fba:	4243      	negs	r3, r0
 8006fbc:	4158      	adcs	r0, r3
 8006fbe:	b2c0      	uxtb	r0, r0
}
 8006fc0:	b015      	add	sp, #84	; 0x54
 8006fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc4:	20000378 	.word	0x20000378
 8006fc8:	3f740000 	.word	0x3f740000
 8006fcc:	d2f1a9fc 	.word	0xd2f1a9fc
 8006fd0:	3e60624d 	.word	0x3e60624d
 8006fd4:	3ef90000 	.word	0x3ef90000
 8006fd8:	9999999a 	.word	0x9999999a
 8006fdc:	3e899999 	.word	0x3e899999
 8006fe0:	200002b8 	.word	0x200002b8
 8006fe4:	200002c0 	.word	0x200002c0
 8006fe8:	47ae147b 	.word	0x47ae147b
 8006fec:	3fb47ae1 	.word	0x3fb47ae1
 8006ff0:	200002c8 	.word	0x200002c8
 8006ff4:	40640000 	.word	0x40640000
 8006ff8:	200002d0 	.word	0x200002d0
 8006ffc:	200002f0 	.word	0x200002f0
 8007000:	3f940000 	.word	0x3f940000
 8007004:	200002f8 	.word	0x200002f8
 8007008:	3f490000 	.word	0x3f490000
 800700c:	20000300 	.word	0x20000300
 8007010:	40e00000 	.word	0x40e00000
 8007014:	20000308 	.word	0x20000308
 8007018:	20000310 	.word	0x20000310
 800701c:	20000318 	.word	0x20000318
 8007020:	200002d8 	.word	0x200002d8
 8007024:	70a3d70a 	.word	0x70a3d70a
 8007028:	4002ea3d 	.word	0x4002ea3d
 800702c:	200002e0 	.word	0x200002e0
 8007030:	3fefc686 	.word	0x3fefc686
 8007034:	3ed28ae0 	.word	0x3ed28ae0
 8007038:	200002e8 	.word	0x200002e8

0800703c <BMP180_ReadTemperatue>:

float BMP180_ReadTemperatue()
{
 800703c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned char _data[2];
	double tu, a;

	// Send request to read temperature
	_data[0] = BMP180_REG_CONTROL;
 800703e:	23f4      	movs	r3, #244	; 0xf4
	_data[1] = BMP180_COMMAND_TEMPERATURE;
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8007040:	26fa      	movs	r6, #250	; 0xfa
{
 8007042:	b085      	sub	sp, #20
	_data[0] = BMP180_REG_CONTROL;
 8007044:	ac03      	add	r4, sp, #12
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8007046:	4d28      	ldr	r5, [pc, #160]	; (80070e8 <BMP180_ReadTemperatue+0xac>)
	_data[0] = BMP180_REG_CONTROL;
 8007048:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 800704a:	00b6      	lsls	r6, r6, #2
	_data[1] = BMP180_COMMAND_TEMPERATURE;
 800704c:	3bc6      	subs	r3, #198	; 0xc6
 800704e:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8007050:	0022      	movs	r2, r4
 8007052:	9600      	str	r6, [sp, #0]
 8007054:	3b2c      	subs	r3, #44	; 0x2c
 8007056:	21ee      	movs	r1, #238	; 0xee
 8007058:	0028      	movs	r0, r5
 800705a:	f7fc fe49 	bl	8003cf0 <HAL_I2C_Master_Transmit>

	// Wait a little to make temperature measurement
	HAL_Delay(5);
 800705e:	2005      	movs	r0, #5
 8007060:	f7fb ffb0 	bl	8002fc4 <HAL_Delay>

	// Get temp data
	_data[0] = BMP180_REG_RESULT;
 8007064:	23f6      	movs	r3, #246	; 0xf6
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 1, 1000);
 8007066:	0022      	movs	r2, r4
	_data[0] = BMP180_REG_RESULT;
 8007068:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 1, 1000);
 800706a:	21ee      	movs	r1, #238	; 0xee
 800706c:	9600      	str	r6, [sp, #0]
 800706e:	3bf5      	subs	r3, #245	; 0xf5
 8007070:	0028      	movs	r0, r5
 8007072:	f7fc fe3d 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8007076:	0022      	movs	r2, r4
 8007078:	9600      	str	r6, [sp, #0]
 800707a:	2302      	movs	r3, #2
 800707c:	21ee      	movs	r1, #238	; 0xee
 800707e:	0028      	movs	r0, r5
 8007080:	f7fc fecc 	bl	8003e1c <HAL_I2C_Master_Receive>

	// Calculate temp with cal. data
	tu = (_data[0] * 256.0) + _data[1];
 8007084:	7820      	ldrb	r0, [r4, #0]
 8007086:	f7fb fdd3 	bl	8002c30 <__aeabi_i2d>
 800708a:	2200      	movs	r2, #0
 800708c:	4b17      	ldr	r3, [pc, #92]	; (80070ec <BMP180_ReadTemperatue+0xb0>)
 800708e:	f7fb f805 	bl	800209c <__aeabi_dmul>
 8007092:	0006      	movs	r6, r0
 8007094:	7860      	ldrb	r0, [r4, #1]
 8007096:	000f      	movs	r7, r1
 8007098:	f7fb fdca 	bl	8002c30 <__aeabi_i2d>
 800709c:	0002      	movs	r2, r0
 800709e:	000b      	movs	r3, r1
 80070a0:	0030      	movs	r0, r6
 80070a2:	0039      	movs	r1, r7
 80070a4:	f7fa f8b6 	bl	8001214 <__aeabi_dadd>
	a = c5 * (tu - c6);
 80070a8:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <BMP180_ReadTemperatue+0xb4>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f7fb fa75 	bl	800259c <__aeabi_dsub>
 80070b2:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <BMP180_ReadTemperatue+0xb8>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f7fa fff0 	bl	800209c <__aeabi_dmul>

	return (a + (mc / (a + md)));
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <BMP180_ReadTemperatue+0xbc>)
	a = c5 * (tu - c6);
 80070be:	0004      	movs	r4, r0
	return (a + (mc / (a + md)));
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
	a = c5 * (tu - c6);
 80070c4:	000d      	movs	r5, r1
	return (a + (mc / (a + md)));
 80070c6:	f7fa f8a5 	bl	8001214 <__aeabi_dadd>
 80070ca:	000b      	movs	r3, r1
 80070cc:	490b      	ldr	r1, [pc, #44]	; (80070fc <BMP180_ReadTemperatue+0xc0>)
 80070ce:	0002      	movs	r2, r0
 80070d0:	6808      	ldr	r0, [r1, #0]
 80070d2:	6849      	ldr	r1, [r1, #4]
 80070d4:	f7fa fbae 	bl	8001834 <__aeabi_ddiv>
 80070d8:	0022      	movs	r2, r4
 80070da:	002b      	movs	r3, r5
 80070dc:	f7fa f89a 	bl	8001214 <__aeabi_dadd>
 80070e0:	f7fb fe72 	bl	8002dc8 <__aeabi_d2f>
}
 80070e4:	b005      	add	sp, #20
 80070e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070e8:	20000378 	.word	0x20000378
 80070ec:	40700000 	.word	0x40700000
 80070f0:	200002c0 	.word	0x200002c0
 80070f4:	200002b8 	.word	0x200002b8
 80070f8:	200002d0 	.word	0x200002d0
 80070fc:	200002c8 	.word	0x200002c8

08007100 <BMP180_ReadPressure>:

float BMP180_ReadPressure()
{
 8007100:	b5f0      	push	{r4, r5, r6, r7, lr}
	double T = BMP180_ReadTemperatue();

	// Now send request to read pressure with highest resolution
	_data[0] = BMP180_REG_CONTROL;
	_data[1] = BMP180_COMMAND_PRESSURE3;
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8007102:	26fa      	movs	r6, #250	; 0xfa
{
 8007104:	b089      	sub	sp, #36	; 0x24
	double T = BMP180_ReadTemperatue();
 8007106:	f7ff ff99 	bl	800703c <BMP180_ReadTemperatue>
	_data[0] = BMP180_REG_CONTROL;
 800710a:	23f4      	movs	r3, #244	; 0xf4
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 800710c:	4d5c      	ldr	r5, [pc, #368]	; (8007280 <BMP180_ReadPressure+0x180>)
	_data[0] = BMP180_REG_CONTROL;
 800710e:	ac07      	add	r4, sp, #28
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8007110:	00b6      	lsls	r6, r6, #2
	_data[0] = BMP180_REG_CONTROL;
 8007112:	7023      	strb	r3, [r4, #0]
	_data[1] = BMP180_COMMAND_PRESSURE3;
 8007114:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 8007116:	0022      	movs	r2, r4
	double T = BMP180_ReadTemperatue();
 8007118:	1c07      	adds	r7, r0, #0
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 2, 1000);
 800711a:	9600      	str	r6, [sp, #0]
 800711c:	3bf2      	subs	r3, #242	; 0xf2
 800711e:	21ee      	movs	r1, #238	; 0xee
 8007120:	0028      	movs	r0, r5
 8007122:	f7fc fde5 	bl	8003cf0 <HAL_I2C_Master_Transmit>

	// Wait a little to make pressure measurement
	HAL_Delay(26);
 8007126:	201a      	movs	r0, #26
 8007128:	f7fb ff4c 	bl	8002fc4 <HAL_Delay>

	// Get pressure data
	_data[0] = BMP180_REG_RESULT;
 800712c:	23f6      	movs	r3, #246	; 0xf6
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 1, 1000);
 800712e:	0022      	movs	r2, r4
	_data[0] = BMP180_REG_RESULT;
 8007130:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, BMP180_ADDR, _data, 1, 1000);
 8007132:	21ee      	movs	r1, #238	; 0xee
 8007134:	9600      	str	r6, [sp, #0]
 8007136:	3bf5      	subs	r3, #245	; 0xf5
 8007138:	0028      	movs	r0, r5
 800713a:	f7fc fdd9 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP180_ADDR, _data, 3, 1000);
 800713e:	0022      	movs	r2, r4
 8007140:	9600      	str	r6, [sp, #0]
 8007142:	2303      	movs	r3, #3
 8007144:	21ee      	movs	r1, #238	; 0xee
 8007146:	0028      	movs	r0, r5
 8007148:	f7fc fe68 	bl	8003e1c <HAL_I2C_Master_Receive>
	double T = BMP180_ReadTemperatue();
 800714c:	1c38      	adds	r0, r7, #0
 800714e:	f7fb fde9 	bl	8002d24 <__aeabi_f2d>

	// Calculate pressure with cal. data
	pu = (_data[0] * 256.0) + _data[1] + (_data[2]/256.0);
	s = T - 25.0;
 8007152:	2200      	movs	r2, #0
 8007154:	4b4b      	ldr	r3, [pc, #300]	; (8007284 <BMP180_ReadPressure+0x184>)
 8007156:	f7fb fa21 	bl	800259c <__aeabi_dsub>
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 800715a:	0002      	movs	r2, r0
 800715c:	000b      	movs	r3, r1
	s = T - 25.0;
 800715e:	9002      	str	r0, [sp, #8]
 8007160:	9103      	str	r1, [sp, #12]
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 8007162:	f7fa ff9b 	bl	800209c <__aeabi_dmul>
 8007166:	9004      	str	r0, [sp, #16]
 8007168:	9105      	str	r1, [sp, #20]
	pu = (_data[0] * 256.0) + _data[1] + (_data[2]/256.0);
 800716a:	7820      	ldrb	r0, [r4, #0]
 800716c:	f7fb fd60 	bl	8002c30 <__aeabi_i2d>
 8007170:	2200      	movs	r2, #0
 8007172:	4b45      	ldr	r3, [pc, #276]	; (8007288 <BMP180_ReadPressure+0x188>)
 8007174:	f7fa ff92 	bl	800209c <__aeabi_dmul>
 8007178:	0006      	movs	r6, r0
 800717a:	7860      	ldrb	r0, [r4, #1]
 800717c:	000f      	movs	r7, r1
 800717e:	f7fb fd57 	bl	8002c30 <__aeabi_i2d>
 8007182:	0002      	movs	r2, r0
 8007184:	000b      	movs	r3, r1
 8007186:	0030      	movs	r0, r6
 8007188:	0039      	movs	r1, r7
 800718a:	f7fa f843 	bl	8001214 <__aeabi_dadd>
 800718e:	0006      	movs	r6, r0
 8007190:	78a0      	ldrb	r0, [r4, #2]
 8007192:	000f      	movs	r7, r1
 8007194:	f7fb fd4c 	bl	8002c30 <__aeabi_i2d>
 8007198:	2200      	movs	r2, #0
 800719a:	4b3c      	ldr	r3, [pc, #240]	; (800728c <BMP180_ReadPressure+0x18c>)
 800719c:	f7fa ff7e 	bl	800209c <__aeabi_dmul>
 80071a0:	0002      	movs	r2, r0
 80071a2:	000b      	movs	r3, r1
 80071a4:	0030      	movs	r0, r6
 80071a6:	0039      	movs	r1, r7
 80071a8:	f7fa f834 	bl	8001214 <__aeabi_dadd>
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 80071ac:	4b38      	ldr	r3, [pc, #224]	; (8007290 <BMP180_ReadPressure+0x190>)
	pu = (_data[0] * 256.0) + _data[1] + (_data[2]/256.0);
 80071ae:	0006      	movs	r6, r0
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
	pu = (_data[0] * 256.0) + _data[1] + (_data[2]/256.0);
 80071b4:	000f      	movs	r7, r1
	x = (xx2 * pow(s,2)) + (xx1 * s) + xx0;
 80071b6:	9804      	ldr	r0, [sp, #16]
 80071b8:	9905      	ldr	r1, [sp, #20]
 80071ba:	f7fa ff6f 	bl	800209c <__aeabi_dmul>
 80071be:	4b35      	ldr	r3, [pc, #212]	; (8007294 <BMP180_ReadPressure+0x194>)
 80071c0:	0004      	movs	r4, r0
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	000d      	movs	r5, r1
 80071c8:	9802      	ldr	r0, [sp, #8]
 80071ca:	9903      	ldr	r1, [sp, #12]
 80071cc:	f7fa ff66 	bl	800209c <__aeabi_dmul>
 80071d0:	0002      	movs	r2, r0
 80071d2:	000b      	movs	r3, r1
 80071d4:	0020      	movs	r0, r4
 80071d6:	0029      	movs	r1, r5
 80071d8:	f7fa f81c 	bl	8001214 <__aeabi_dadd>
 80071dc:	4b2e      	ldr	r3, [pc, #184]	; (8007298 <BMP180_ReadPressure+0x198>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f7fa f817 	bl	8001214 <__aeabi_dadd>
 80071e6:	0002      	movs	r2, r0
 80071e8:	000b      	movs	r3, r1
	y = (yy2 * pow(s,2)) + (yy1 * s) + yy0;
	z = (pu - x) / y;
 80071ea:	0030      	movs	r0, r6
 80071ec:	0039      	movs	r1, r7
 80071ee:	f7fb f9d5 	bl	800259c <__aeabi_dsub>
	y = (yy2 * pow(s,2)) + (yy1 * s) + yy0;
 80071f2:	4b2a      	ldr	r3, [pc, #168]	; (800729c <BMP180_ReadPressure+0x19c>)
	z = (pu - x) / y;
 80071f4:	0006      	movs	r6, r0
	y = (yy2 * pow(s,2)) + (yy1 * s) + yy0;
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
	z = (pu - x) / y;
 80071fa:	000f      	movs	r7, r1
	y = (yy2 * pow(s,2)) + (yy1 * s) + yy0;
 80071fc:	9804      	ldr	r0, [sp, #16]
 80071fe:	9905      	ldr	r1, [sp, #20]
 8007200:	f7fa ff4c 	bl	800209c <__aeabi_dmul>
 8007204:	4b26      	ldr	r3, [pc, #152]	; (80072a0 <BMP180_ReadPressure+0x1a0>)
 8007206:	0004      	movs	r4, r0
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	000d      	movs	r5, r1
 800720e:	9802      	ldr	r0, [sp, #8]
 8007210:	9903      	ldr	r1, [sp, #12]
 8007212:	f7fa ff43 	bl	800209c <__aeabi_dmul>
 8007216:	0002      	movs	r2, r0
 8007218:	000b      	movs	r3, r1
 800721a:	0020      	movs	r0, r4
 800721c:	0029      	movs	r1, r5
 800721e:	f7f9 fff9 	bl	8001214 <__aeabi_dadd>
 8007222:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <BMP180_ReadPressure+0x1a4>)
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f7f9 fff4 	bl	8001214 <__aeabi_dadd>
 800722c:	0002      	movs	r2, r0
 800722e:	000b      	movs	r3, r1
	z = (pu - x) / y;
 8007230:	0030      	movs	r0, r6
 8007232:	0039      	movs	r1, r7
 8007234:	f7fa fafe 	bl	8001834 <__aeabi_ddiv>
	return ((p2 * pow(z,2)) + (p1 * z) + p0);
 8007238:	0002      	movs	r2, r0
 800723a:	000b      	movs	r3, r1
	z = (pu - x) / y;
 800723c:	0004      	movs	r4, r0
 800723e:	000d      	movs	r5, r1
	return ((p2 * pow(z,2)) + (p1 * z) + p0);
 8007240:	f7fa ff2c 	bl	800209c <__aeabi_dmul>
 8007244:	4b18      	ldr	r3, [pc, #96]	; (80072a8 <BMP180_ReadPressure+0x1a8>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f7fa ff27 	bl	800209c <__aeabi_dmul>
 800724e:	4b17      	ldr	r3, [pc, #92]	; (80072ac <BMP180_ReadPressure+0x1ac>)
 8007250:	0006      	movs	r6, r0
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	000f      	movs	r7, r1
 8007258:	0020      	movs	r0, r4
 800725a:	0029      	movs	r1, r5
 800725c:	f7fa ff1e 	bl	800209c <__aeabi_dmul>
 8007260:	0002      	movs	r2, r0
 8007262:	000b      	movs	r3, r1
 8007264:	0030      	movs	r0, r6
 8007266:	0039      	movs	r1, r7
 8007268:	f7f9 ffd4 	bl	8001214 <__aeabi_dadd>
 800726c:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <BMP180_ReadPressure+0x1b0>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f7f9 ffcf 	bl	8001214 <__aeabi_dadd>
 8007276:	f7fb fda7 	bl	8002dc8 <__aeabi_d2f>
}
 800727a:	b009      	add	sp, #36	; 0x24
 800727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	20000378 	.word	0x20000378
 8007284:	40390000 	.word	0x40390000
 8007288:	40700000 	.word	0x40700000
 800728c:	3f700000 	.word	0x3f700000
 8007290:	20000300 	.word	0x20000300
 8007294:	200002f8 	.word	0x200002f8
 8007298:	200002f0 	.word	0x200002f0
 800729c:	20000318 	.word	0x20000318
 80072a0:	20000310 	.word	0x20000310
 80072a4:	20000308 	.word	0x20000308
 80072a8:	200002e8 	.word	0x200002e8
 80072ac:	200002e0 	.word	0x200002e0
 80072b0:	200002d8 	.word	0x200002d8

080072b4 <RF24_csn>:
//}
/****************************************************************************/

void RF24_csn(uint8_t mode)
{
    HAL_GPIO_WritePin(csn_port, csn_pin, mode);
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <RF24_csn+0x18>)
{
 80072b6:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(csn_port, csn_pin, mode);
 80072b8:	8819      	ldrh	r1, [r3, #0]
 80072ba:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <RF24_csn+0x1c>)
{
 80072bc:	0002      	movs	r2, r0
    HAL_GPIO_WritePin(csn_port, csn_pin, mode);
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	f7fc fb78 	bl	80039b4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80072c4:	2001      	movs	r0, #1
 80072c6:	f7fb fe7d 	bl	8002fc4 <HAL_Delay>
}
 80072ca:	bd10      	pop	{r4, pc}
 80072cc:	20000410 	.word	0x20000410
 80072d0:	20000528 	.word	0x20000528

080072d4 <RF24_ce>:

/****************************************************************************/

void RF24_ce(uint8_t level)
{
    HAL_GPIO_WritePin(ce_port, ce_pin, level);
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <RF24_ce+0x18>)
{
 80072d6:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ce_port, ce_pin, level);
 80072d8:	8819      	ldrh	r1, [r3, #0]
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <RF24_ce+0x1c>)
{
 80072dc:	0002      	movs	r2, r0
    HAL_GPIO_WritePin(ce_port, ce_pin, level);
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	f7fc fb68 	bl	80039b4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80072e4:	2001      	movs	r0, #1
 80072e6:	f7fb fe6d 	bl	8002fc4 <HAL_Delay>
}
 80072ea:	bd10      	pop	{r4, pc}
 80072ec:	200004c2 	.word	0x200004c2
 80072f0:	200003c8 	.word	0x200003c8

080072f4 <RF24_beginTransaction>:

/****************************************************************************/

void RF24_beginTransaction()
{
 80072f4:	b510      	push	{r4, lr}
    //_SPI->beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE0));
    RF24_csn(0);
 80072f6:	2000      	movs	r0, #0
 80072f8:	f7ff ffdc 	bl	80072b4 <RF24_csn>
}
 80072fc:	bd10      	pop	{r4, pc}

080072fe <RF24_endTransaction>:

/****************************************************************************/

void RF24_endTransaction()
{
 80072fe:	b510      	push	{r4, lr}
    //_SPI->endTransaction();
    RF24_csn(1);
 8007300:	2001      	movs	r0, #1
 8007302:	f7ff ffd7 	bl	80072b4 <RF24_csn>
}
 8007306:	bd10      	pop	{r4, pc}

08007308 <RF24_read_register>:
}

/****************************************************************************/

uint8_t RF24_read_register(uint8_t reg)
{
 8007308:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t result;
    uint8_t _dummyReg = 0xff;
 800730a:	260e      	movs	r6, #14
    uint8_t _data = R_REGISTER | reg;
 800730c:	240f      	movs	r4, #15
    uint8_t _dummyReg = 0xff;
 800730e:	23ff      	movs	r3, #255	; 0xff
{
 8007310:	b085      	sub	sp, #20
    uint8_t _data = R_REGISTER | reg;
 8007312:	446c      	add	r4, sp
    uint8_t _dummyReg = 0xff;
 8007314:	446e      	add	r6, sp
    RF24_beginTransaction();
    //status = _SPI->transfer(R_REGISTER | reg);
    //result = _SPI->transfer(0xff);

    HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 8007316:	27fa      	movs	r7, #250	; 0xfa
    uint8_t _dummyReg = 0xff;
 8007318:	7033      	strb	r3, [r6, #0]
    uint8_t _data = R_REGISTER | reg;
 800731a:	7020      	strb	r0, [r4, #0]
    RF24_beginTransaction();
 800731c:	f7ff ffea 	bl	80072f4 <RF24_beginTransaction>
    HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 8007320:	0021      	movs	r1, r4
    HAL_SPI_TransmitReceive(&hspi1, &_dummyReg, &result, sizeof(uint8_t), 1000);
 8007322:	240d      	movs	r4, #13
    HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 8007324:	4d0a      	ldr	r5, [pc, #40]	; (8007350 <RF24_read_register+0x48>)
 8007326:	00bf      	lsls	r7, r7, #2
    HAL_SPI_TransmitReceive(&hspi1, &_dummyReg, &result, sizeof(uint8_t), 1000);
 8007328:	446c      	add	r4, sp
    HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 800732a:	9700      	str	r7, [sp, #0]
 800732c:	2301      	movs	r3, #1
 800732e:	4a09      	ldr	r2, [pc, #36]	; (8007354 <RF24_read_register+0x4c>)
 8007330:	0028      	movs	r0, r5
 8007332:	f7fd fff3 	bl	800531c <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &_dummyReg, &result, sizeof(uint8_t), 1000);
 8007336:	2301      	movs	r3, #1
 8007338:	0022      	movs	r2, r4
 800733a:	0031      	movs	r1, r6
 800733c:	9700      	str	r7, [sp, #0]
 800733e:	0028      	movs	r0, r5
 8007340:	f7fd ffec 	bl	800531c <HAL_SPI_TransmitReceive>
    RF24_endTransaction();
 8007344:	f7ff ffdb 	bl	80072fe <RF24_endTransaction>

    return result;
 8007348:	7820      	ldrb	r0, [r4, #0]
}
 800734a:	b005      	add	sp, #20
 800734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	200004cc 	.word	0x200004cc
 8007354:	20000610 	.word	0x20000610

08007358 <RF24_write_registers>:

/****************************************************************************/

void RF24_write_registers(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8007358:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t _data = W_REGISTER | reg;
 800735a:	260f      	movs	r6, #15
{
 800735c:	b087      	sub	sp, #28
    uint8_t _data = W_REGISTER | reg;
 800735e:	ab02      	add	r3, sp, #8
 8007360:	18f6      	adds	r6, r6, r3
 8007362:	2320      	movs	r3, #32
    RF24_beginTransaction();
    //status = _SPI->transfer(W_REGISTER | reg);
    HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 8007364:	25fa      	movs	r5, #250	; 0xfa
    uint8_t _data = W_REGISTER | reg;
 8007366:	4318      	orrs	r0, r3
{
 8007368:	000f      	movs	r7, r1
 800736a:	9203      	str	r2, [sp, #12]
    uint8_t _data = W_REGISTER | reg;
 800736c:	7030      	strb	r0, [r6, #0]
    RF24_beginTransaction();
 800736e:	f7ff ffc1 	bl	80072f4 <RF24_beginTransaction>
    HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 8007372:	4c0a      	ldr	r4, [pc, #40]	; (800739c <RF24_write_registers+0x44>)
 8007374:	00ad      	lsls	r5, r5, #2
 8007376:	0031      	movs	r1, r6
 8007378:	9500      	str	r5, [sp, #0]
 800737a:	2301      	movs	r3, #1
 800737c:	4a08      	ldr	r2, [pc, #32]	; (80073a0 <RF24_write_registers+0x48>)
 800737e:	0020      	movs	r0, r4
 8007380:	f7fd ffcc 	bl	800531c <HAL_SPI_TransmitReceive>
    //while (len--) {
    //    _SPI->transfer(*buf++);
    //}
    HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 1000);
 8007384:	466b      	mov	r3, sp
 8007386:	0039      	movs	r1, r7
 8007388:	899a      	ldrh	r2, [r3, #12]
 800738a:	0020      	movs	r0, r4
 800738c:	002b      	movs	r3, r5
 800738e:	f7fd ff0e 	bl	80051ae <HAL_SPI_Transmit>
    RF24_endTransaction();
 8007392:	f7ff ffb4 	bl	80072fe <RF24_endTransaction>
}
 8007396:	b007      	add	sp, #28
 8007398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	200004cc 	.word	0x200004cc
 80073a0:	20000610 	.word	0x20000610

080073a4 <RF24_write_register>:

/****************************************************************************/

void RF24_write_register(uint8_t reg, uint8_t value, uint8_t is_cmd_only)
{
 80073a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t _data = W_REGISTER | reg;
 80073a6:	2320      	movs	r3, #32
{
 80073a8:	270f      	movs	r7, #15
    uint8_t _data = W_REGISTER | reg;
 80073aa:	2616      	movs	r6, #22
 80073ac:	25fa      	movs	r5, #250	; 0xfa
{
 80073ae:	b087      	sub	sp, #28
 80073b0:	446f      	add	r7, sp
    uint8_t _data = W_REGISTER | reg;
 80073b2:	446e      	add	r6, sp
 80073b4:	4318      	orrs	r0, r3
{
 80073b6:	7039      	strb	r1, [r7, #0]
    uint8_t _data = W_REGISTER | reg;
 80073b8:	7030      	strb	r0, [r6, #0]
 80073ba:	4c10      	ldr	r4, [pc, #64]	; (80073fc <RF24_write_register+0x58>)
 80073bc:	00ad      	lsls	r5, r5, #2
    uint8_t _dummyReg;
    if (is_cmd_only) {
 80073be:	2a00      	cmp	r2, #0
 80073c0:	d00c      	beq.n	80073dc <RF24_write_register+0x38>
        RF24_beginTransaction();
 80073c2:	f7ff ff97 	bl	80072f4 <RF24_beginTransaction>
    //    status = _SPI->transfer(W_REGISTER | reg);
        HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 80073c6:	2301      	movs	r3, #1
 80073c8:	0031      	movs	r1, r6
 80073ca:	4a0d      	ldr	r2, [pc, #52]	; (8007400 <RF24_write_register+0x5c>)
 80073cc:	9500      	str	r5, [sp, #0]
    else {
        RF24_beginTransaction();
    //    status = _SPI->transfer(W_REGISTER | reg);
    //    _SPI->transfer(value);
        HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
        HAL_SPI_TransmitReceive(&hspi1, &value, &_dummyReg, sizeof(uint8_t), 1000);
 80073ce:	0020      	movs	r0, r4
 80073d0:	f7fd ffa4 	bl	800531c <HAL_SPI_TransmitReceive>
        RF24_endTransaction();
 80073d4:	f7ff ff93 	bl	80072fe <RF24_endTransaction>
    }
}
 80073d8:	b007      	add	sp, #28
 80073da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        RF24_beginTransaction();
 80073dc:	f7ff ff8a 	bl	80072f4 <RF24_beginTransaction>
        HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 80073e0:	2301      	movs	r3, #1
 80073e2:	4a07      	ldr	r2, [pc, #28]	; (8007400 <RF24_write_register+0x5c>)
 80073e4:	0031      	movs	r1, r6
 80073e6:	9500      	str	r5, [sp, #0]
 80073e8:	0020      	movs	r0, r4
 80073ea:	f7fd ff97 	bl	800531c <HAL_SPI_TransmitReceive>
        HAL_SPI_TransmitReceive(&hspi1, &value, &_dummyReg, sizeof(uint8_t), 1000);
 80073ee:	2217      	movs	r2, #23
 80073f0:	9500      	str	r5, [sp, #0]
 80073f2:	2301      	movs	r3, #1
 80073f4:	446a      	add	r2, sp
 80073f6:	0039      	movs	r1, r7
 80073f8:	e7e9      	b.n	80073ce <RF24_write_register+0x2a>
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	200004cc 	.word	0x200004cc
 8007400:	20000610 	.word	0x20000610

08007404 <RF24_write_payload>:

/****************************************************************************/

void RF24_write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
 8007404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007406:	270f      	movs	r7, #15
 8007408:	b08f      	sub	sp, #60	; 0x3c
 800740a:	ab02      	add	r3, sp, #8
 800740c:	18ff      	adds	r7, r7, r3
 800740e:	9004      	str	r0, [sp, #16]
 8007410:	703a      	strb	r2, [r7, #0]
 8007412:	000d      	movs	r5, r1
    const uint8_t* current = (const uint8_t*)(buf);
    uint8_t _dummyReg[32];
    memset(_dummyReg, 0, 32);
 8007414:	2220      	movs	r2, #32
 8007416:	2100      	movs	r1, #0
 8007418:	a806      	add	r0, sp, #24
 800741a:	f000 ffe2 	bl	80083e2 <memset>

    uint8_t blank_len = !data_len ? 1 : 0;
    if (!dynamic_payloads_enabled) {
 800741e:	4b1a      	ldr	r3, [pc, #104]	; (8007488 <RF24_write_payload+0x84>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d126      	bne.n	8007474 <RF24_write_payload+0x70>
        data_len = rf24_min(data_len, payload_size);
 8007426:	4b19      	ldr	r3, [pc, #100]	; (800748c <RF24_write_payload+0x88>)
 8007428:	1c2c      	adds	r4, r5, #0
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	429d      	cmp	r5, r3
 800742e:	d900      	bls.n	8007432 <RF24_write_payload+0x2e>
 8007430:	1c1c      	adds	r4, r3, #0
 8007432:	b2e4      	uxtb	r4, r4
        blank_len = payload_size - data_len;
 8007434:	1b1b      	subs	r3, r3, r4
 8007436:	b2db      	uxtb	r3, r3
 8007438:	9303      	str	r3, [sp, #12]
        data_len = rf24_min(data_len, 32);
    }

    RF24_beginTransaction();
    //status = _SPI->transfer(writeType);
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeType, &status, sizeof(uint8_t), 1000);
 800743a:	26fa      	movs	r6, #250	; 0xfa
    RF24_beginTransaction();
 800743c:	f7ff ff5a 	bl	80072f4 <RF24_beginTransaction>
    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeType, &status, sizeof(uint8_t), 1000);
 8007440:	4d13      	ldr	r5, [pc, #76]	; (8007490 <RF24_write_payload+0x8c>)
 8007442:	00b6      	lsls	r6, r6, #2
 8007444:	0039      	movs	r1, r7
 8007446:	9600      	str	r6, [sp, #0]
 8007448:	2301      	movs	r3, #1
 800744a:	4a12      	ldr	r2, [pc, #72]	; (8007494 <RF24_write_payload+0x90>)
 800744c:	0028      	movs	r0, r5
 800744e:	f7fd ff65 	bl	800531c <HAL_SPI_TransmitReceive>
    //while (data_len--) {
    //    _SPI->transfer(*current++);
    //}
    HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
 8007452:	b2a2      	uxth	r2, r4
 8007454:	0033      	movs	r3, r6
 8007456:	9904      	ldr	r1, [sp, #16]
 8007458:	0028      	movs	r0, r5
 800745a:	f7fd fea8 	bl	80051ae <HAL_SPI_Transmit>
    //while (blank_len--) {
    //    _SPI->transfer(0);
    //}
    HAL_SPI_Transmit(&hspi1, _dummyReg, blank_len, 1000);
 800745e:	466b      	mov	r3, sp
 8007460:	a906      	add	r1, sp, #24
 8007462:	899a      	ldrh	r2, [r3, #12]
 8007464:	0028      	movs	r0, r5
 8007466:	0033      	movs	r3, r6
 8007468:	f7fd fea1 	bl	80051ae <HAL_SPI_Transmit>
    RF24_endTransaction();
 800746c:	f7ff ff47 	bl	80072fe <RF24_endTransaction>
}
 8007470:	b00f      	add	sp, #60	; 0x3c
 8007472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t blank_len = !data_len ? 1 : 0;
 8007474:	426a      	negs	r2, r5
 8007476:	416a      	adcs	r2, r5
 8007478:	b2d3      	uxtb	r3, r2
 800747a:	9303      	str	r3, [sp, #12]
        data_len = rf24_min(data_len, 32);
 800747c:	1c2c      	adds	r4, r5, #0
 800747e:	2d20      	cmp	r5, #32
 8007480:	d900      	bls.n	8007484 <RF24_write_payload+0x80>
 8007482:	2420      	movs	r4, #32
 8007484:	b2e4      	uxtb	r4, r4
 8007486:	e7d8      	b.n	800743a <RF24_write_payload+0x36>
 8007488:	20000375 	.word	0x20000375
 800748c:	200005b0 	.word	0x200005b0
 8007490:	200004cc 	.word	0x200004cc
 8007494:	20000610 	.word	0x20000610

08007498 <RF24_read_payload>:

/****************************************************************************/

void RF24_read_payload(void* buf, uint8_t data_len)
{
 8007498:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* current = (uint8_t*)(buf);
    uint8_t _dummyReg[32];
    uint8_t _reg;

    uint8_t blank_len = 0;
    if (!dynamic_payloads_enabled) {
 800749a:	4b1b      	ldr	r3, [pc, #108]	; (8007508 <RF24_read_payload+0x70>)
{
 800749c:	b08f      	sub	sp, #60	; 0x3c
    if (!dynamic_payloads_enabled) {
 800749e:	781b      	ldrb	r3, [r3, #0]
{
 80074a0:	9003      	str	r0, [sp, #12]
    if (!dynamic_payloads_enabled) {
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d128      	bne.n	80074f8 <RF24_read_payload+0x60>
        data_len = rf24_min(data_len, payload_size);
 80074a6:	4b19      	ldr	r3, [pc, #100]	; (800750c <RF24_read_payload+0x74>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	1c1c      	adds	r4, r3, #0
 80074ac:	428b      	cmp	r3, r1
 80074ae:	d900      	bls.n	80074b2 <RF24_read_payload+0x1a>
 80074b0:	1c0c      	adds	r4, r1, #0
 80074b2:	b2e4      	uxtb	r4, r4
        blank_len = payload_size - data_len;
 80074b4:	1b1b      	subs	r3, r3, r4
 80074b6:	b2df      	uxtb	r7, r3
    }
    else {
        data_len = rf24_min(data_len, 32);
    }

    RF24_beginTransaction();
 80074b8:	f7ff ff1c 	bl	80072f4 <RF24_beginTransaction>
    //status = _SPI->transfer(R_RX_PAYLOAD);
    _reg = R_RX_PAYLOAD;
 80074bc:	210f      	movs	r1, #15
 80074be:	ab02      	add	r3, sp, #8
    HAL_SPI_TransmitReceive(&hspi1, &_reg, &status, sizeof(uint8_t), 1000);
 80074c0:	26fa      	movs	r6, #250	; 0xfa
    _reg = R_RX_PAYLOAD;
 80074c2:	18c9      	adds	r1, r1, r3
 80074c4:	2361      	movs	r3, #97	; 0x61
    HAL_SPI_TransmitReceive(&hspi1, &_reg, &status, sizeof(uint8_t), 1000);
 80074c6:	4d12      	ldr	r5, [pc, #72]	; (8007510 <RF24_read_payload+0x78>)
 80074c8:	00b6      	lsls	r6, r6, #2
    _reg = R_RX_PAYLOAD;
 80074ca:	700b      	strb	r3, [r1, #0]
    HAL_SPI_TransmitReceive(&hspi1, &_reg, &status, sizeof(uint8_t), 1000);
 80074cc:	4a11      	ldr	r2, [pc, #68]	; (8007514 <RF24_read_payload+0x7c>)
 80074ce:	9600      	str	r6, [sp, #0]
 80074d0:	3b60      	subs	r3, #96	; 0x60
 80074d2:	0028      	movs	r0, r5
 80074d4:	f7fd ff22 	bl	800531c <HAL_SPI_TransmitReceive>
    //while (data_len--) {
    //    *current++ = _SPI->transfer(0xFF);
    //}
    HAL_SPI_Receive(&hspi1, current, data_len, 1000);
 80074d8:	b2a2      	uxth	r2, r4
 80074da:	0033      	movs	r3, r6
 80074dc:	9903      	ldr	r1, [sp, #12]
 80074de:	0028      	movs	r0, r5
 80074e0:	f7fe f812 	bl	8005508 <HAL_SPI_Receive>
    //while (blank_len--) {
    //    _SPI->transfer(0xff);
    //}
    HAL_SPI_Receive(&hspi1, _dummyReg, blank_len, 1000);
 80074e4:	b2ba      	uxth	r2, r7
 80074e6:	0033      	movs	r3, r6
 80074e8:	a906      	add	r1, sp, #24
 80074ea:	0028      	movs	r0, r5
 80074ec:	f7fe f80c 	bl	8005508 <HAL_SPI_Receive>
    RF24_endTransaction();
 80074f0:	f7ff ff05 	bl	80072fe <RF24_endTransaction>
}
 80074f4:	b00f      	add	sp, #60	; 0x3c
 80074f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data_len = rf24_min(data_len, 32);
 80074f8:	1c0c      	adds	r4, r1, #0
 80074fa:	2920      	cmp	r1, #32
 80074fc:	d900      	bls.n	8007500 <RF24_read_payload+0x68>
 80074fe:	2420      	movs	r4, #32
 8007500:	b2e4      	uxtb	r4, r4
    uint8_t blank_len = 0;
 8007502:	2700      	movs	r7, #0
 8007504:	e7d8      	b.n	80074b8 <RF24_read_payload+0x20>
 8007506:	46c0      	nop			; (mov r8, r8)
 8007508:	20000375 	.word	0x20000375
 800750c:	200005b0 	.word	0x200005b0
 8007510:	200004cc 	.word	0x200004cc
 8007514:	20000610 	.word	0x20000610

08007518 <RF24_flush_rx>:

/****************************************************************************/

uint8_t RF24_flush_rx(void)
{
 8007518:	b510      	push	{r4, lr}
    RF24_write_register(FLUSH_RX, RF24_NOP, 1);
 800751a:	20e2      	movs	r0, #226	; 0xe2
 800751c:	2201      	movs	r2, #1
 800751e:	21ff      	movs	r1, #255	; 0xff
 8007520:	f7ff ff40 	bl	80073a4 <RF24_write_register>
    return status;
 8007524:	4b01      	ldr	r3, [pc, #4]	; (800752c <RF24_flush_rx+0x14>)
 8007526:	7818      	ldrb	r0, [r3, #0]
}
 8007528:	bd10      	pop	{r4, pc}
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	20000610 	.word	0x20000610

08007530 <RF24_flush_tx>:

/****************************************************************************/

uint8_t RF24_flush_tx(void)
{
 8007530:	b510      	push	{r4, lr}
    RF24_write_register(FLUSH_TX, RF24_NOP, 1);
 8007532:	20e1      	movs	r0, #225	; 0xe1
 8007534:	2201      	movs	r2, #1
 8007536:	21ff      	movs	r1, #255	; 0xff
 8007538:	f7ff ff34 	bl	80073a4 <RF24_write_register>
    return status;
 800753c:	4b01      	ldr	r3, [pc, #4]	; (8007544 <RF24_flush_tx+0x14>)
 800753e:	7818      	ldrb	r0, [r3, #0]
}
 8007540:	bd10      	pop	{r4, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	20000610 	.word	0x20000610

08007548 <RF24_get_status>:

/****************************************************************************/

uint8_t RF24_get_status(void)
{
    RF24_write_register(RF24_NOP, RF24_NOP, 1);
 8007548:	21ff      	movs	r1, #255	; 0xff
{
 800754a:	b510      	push	{r4, lr}
    RF24_write_register(RF24_NOP, RF24_NOP, 1);
 800754c:	0008      	movs	r0, r1
 800754e:	2201      	movs	r2, #1
 8007550:	f7ff ff28 	bl	80073a4 <RF24_write_register>
    return status;
 8007554:	4b01      	ldr	r3, [pc, #4]	; (800755c <RF24_get_status+0x14>)
 8007556:	7818      	ldrb	r0, [r3, #0]
}
 8007558:	bd10      	pop	{r4, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	20000610 	.word	0x20000610

08007560 <RF24_init>:

/****************************************************************************/

void RF24_init(GPIO_TypeDef* _ce_port, uint16_t _ce_pin, GPIO_TypeDef* _cs_port, uint16_t _cs_pin)
{
 8007560:	b510      	push	{r4, lr}
    ce_port = _ce_port;
 8007562:	4c0c      	ldr	r4, [pc, #48]	; (8007594 <RF24_init+0x34>)
 8007564:	6020      	str	r0, [r4, #0]
    ce_pin = _ce_pin;
 8007566:	480c      	ldr	r0, [pc, #48]	; (8007598 <RF24_init+0x38>)
 8007568:	8001      	strh	r1, [r0, #0]
    csn_port = _cs_port;
 800756a:	490c      	ldr	r1, [pc, #48]	; (800759c <RF24_init+0x3c>)
 800756c:	600a      	str	r2, [r1, #0]
    csn_pin = _cs_pin;
 800756e:	4a0c      	ldr	r2, [pc, #48]	; (80075a0 <RF24_init+0x40>)
    payload_size = 32;
    dynamic_payloads_enabled = 1;
    addr_width = 5;
    _is_p_variant = 0;
 8007570:	490c      	ldr	r1, [pc, #48]	; (80075a4 <RF24_init+0x44>)
    csn_pin = _cs_pin;
 8007572:	8013      	strh	r3, [r2, #0]
    payload_size = 32;
 8007574:	2220      	movs	r2, #32
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <RF24_init+0x48>)
 8007578:	701a      	strb	r2, [r3, #0]
    dynamic_payloads_enabled = 1;
 800757a:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <RF24_init+0x4c>)
 800757c:	3a1f      	subs	r2, #31
 800757e:	701a      	strb	r2, [r3, #0]
    addr_width = 5;
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <RF24_init+0x50>)
 8007582:	3204      	adds	r2, #4
 8007584:	701a      	strb	r2, [r3, #0]
    _is_p_variant = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	700b      	strb	r3, [r1, #0]
    csDelay = 5;
 800758a:	490a      	ldr	r1, [pc, #40]	; (80075b4 <RF24_init+0x54>)
 800758c:	600a      	str	r2, [r1, #0]
    pipe0_reading_address[0] = 0;
 800758e:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <RF24_init+0x58>)
 8007590:	7013      	strb	r3, [r2, #0]
}
 8007592:	bd10      	pop	{r4, pc}
 8007594:	200003c8 	.word	0x200003c8
 8007598:	200004c2 	.word	0x200004c2
 800759c:	20000528 	.word	0x20000528
 80075a0:	20000410 	.word	0x20000410
 80075a4:	2000052c 	.word	0x2000052c
 80075a8:	200005b0 	.word	0x200005b0
 80075ac:	20000375 	.word	0x20000375
 80075b0:	20000360 	.word	0x20000360
 80075b4:	20000524 	.word	0x20000524
 80075b8:	200004bc 	.word	0x200004bc

080075bc <RF24_setChannel>:

/****************************************************************************/

void RF24_setChannel(uint8_t channel)
{
 80075bc:	b510      	push	{r4, lr}
    const uint8_t max_channel = 125;
    RF24_write_register(RF_CH, rf24_min(channel, max_channel), 0);
 80075be:	1c01      	adds	r1, r0, #0
 80075c0:	287d      	cmp	r0, #125	; 0x7d
 80075c2:	d900      	bls.n	80075c6 <RF24_setChannel+0xa>
 80075c4:	217d      	movs	r1, #125	; 0x7d
 80075c6:	b2c9      	uxtb	r1, r1
 80075c8:	2200      	movs	r2, #0
 80075ca:	2005      	movs	r0, #5
 80075cc:	f7ff feea 	bl	80073a4 <RF24_write_register>
}
 80075d0:	bd10      	pop	{r4, pc}
	...

080075d4 <RF24_setPayloadSize>:
}

/****************************************************************************/

void RF24_setPayloadSize(uint8_t size)
{
 80075d4:	b570      	push	{r4, r5, r6, lr}
    // payload size must be in range [1, 32]
    payload_size = rf24_max(1, rf24_min(32, size));
 80075d6:	2301      	movs	r3, #1
 80075d8:	2800      	cmp	r0, #0
 80075da:	d004      	beq.n	80075e6 <RF24_setPayloadSize+0x12>
 80075dc:	1c03      	adds	r3, r0, #0
 80075de:	2820      	cmp	r0, #32
 80075e0:	d900      	bls.n	80075e4 <RF24_setPayloadSize+0x10>
 80075e2:	2320      	movs	r3, #32
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2411      	movs	r4, #17
 80075e8:	4d05      	ldr	r5, [pc, #20]	; (8007600 <RF24_setPayloadSize+0x2c>)
 80075ea:	702b      	strb	r3, [r5, #0]

    // write static payload size setting for all pipes
    for (uint8_t i = 0; i < 6; ++i)
        RF24_write_register(RX_PW_P0 + i, payload_size, 0);
 80075ec:	0020      	movs	r0, r4
 80075ee:	3401      	adds	r4, #1
 80075f0:	7829      	ldrb	r1, [r5, #0]
 80075f2:	2200      	movs	r2, #0
 80075f4:	b2e4      	uxtb	r4, r4
 80075f6:	f7ff fed5 	bl	80073a4 <RF24_write_register>
    for (uint8_t i = 0; i < 6; ++i)
 80075fa:	2c17      	cmp	r4, #23
 80075fc:	d1f6      	bne.n	80075ec <RF24_setPayloadSize+0x18>
}
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	200005b0 	.word	0x200005b0

08007604 <RF24_stopListening>:
/****************************************************************************/
static const uint8_t child_pipe_enable[] = {ERX_P0, ERX_P1, ERX_P2,
                                                    ERX_P3, ERX_P4, ERX_P5};

void RF24_stopListening(void)
{
 8007604:	b510      	push	{r4, lr}
    RF24_ce(0);
 8007606:	2000      	movs	r0, #0
 8007608:	f7ff fe64 	bl	80072d4 <RF24_ce>

    //delayMicroseconds(100);
    //delayMicroseconds(txDelay);
    HAL_Delay(1);
 800760c:	2001      	movs	r0, #1
 800760e:	f7fb fcd9 	bl	8002fc4 <HAL_Delay>
    if (ack_payloads_enabled){
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <RF24_stopListening+0x40>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <RF24_stopListening+0x1a>
        RF24_flush_tx();
 800761a:	f7ff ff89 	bl	8007530 <RF24_flush_tx>
    }

    config_reg &= ~_BV(PRIM_RX);
    RF24_write_register(NRF_CONFIG, config_reg, 0);
 800761e:	2200      	movs	r2, #0
    config_reg &= ~_BV(PRIM_RX);
 8007620:	2401      	movs	r4, #1
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <RF24_stopListening+0x44>)
    RF24_write_register(NRF_CONFIG, config_reg, 0);
 8007624:	0010      	movs	r0, r2
    config_reg &= ~_BV(PRIM_RX);
 8007626:	7819      	ldrb	r1, [r3, #0]
 8007628:	43a1      	bics	r1, r4
 800762a:	7019      	strb	r1, [r3, #0]
    RF24_write_register(NRF_CONFIG, config_reg, 0);
 800762c:	f7ff feba 	bl	80073a4 <RF24_write_register>

    RF24_write_register(EN_RXADDR, RF24_read_register(EN_RXADDR) | _BV(child_pipe_enable[0]), 0); // Enable RX on pipe0
 8007630:	2002      	movs	r0, #2
 8007632:	f7ff fe69 	bl	8007308 <RF24_read_register>
 8007636:	4304      	orrs	r4, r0
 8007638:	b2e1      	uxtb	r1, r4
 800763a:	2200      	movs	r2, #0
 800763c:	2002      	movs	r0, #2
 800763e:	f7ff feb1 	bl	80073a4 <RF24_write_register>
}
 8007642:	bd10      	pop	{r4, pc}
 8007644:	200003cc 	.word	0x200003cc
 8007648:	200004c4 	.word	0x200004c4

0800764c <RF24_powerDown>:

/****************************************************************************/

void RF24_powerDown(void)
{
 800764c:	b510      	push	{r4, lr}
    RF24_ce(0); // Guarantee CE is low on powerDown
 800764e:	2000      	movs	r0, #0
 8007650:	f7ff fe40 	bl	80072d4 <RF24_ce>
    config_reg &= ~_BV(PWR_UP);
 8007654:	2202      	movs	r2, #2
 8007656:	4b04      	ldr	r3, [pc, #16]	; (8007668 <RF24_powerDown+0x1c>)
 8007658:	7819      	ldrb	r1, [r3, #0]
 800765a:	4391      	bics	r1, r2
    RF24_write_register(NRF_CONFIG, config_reg, 0);
 800765c:	2200      	movs	r2, #0
 800765e:	0010      	movs	r0, r2
    config_reg &= ~_BV(PWR_UP);
 8007660:	7019      	strb	r1, [r3, #0]
    RF24_write_register(NRF_CONFIG, config_reg, 0);
 8007662:	f7ff fe9f 	bl	80073a4 <RF24_write_register>
}
 8007666:	bd10      	pop	{r4, pc}
 8007668:	200004c4 	.word	0x200004c4

0800766c <RF24_powerUp>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24_powerUp(void)
{
 800766c:	b510      	push	{r4, lr}
    // if not powered up then power up and wait for the radio to initialize
    if (!(config_reg & _BV(PWR_UP))) {
 800766e:	4b07      	ldr	r3, [pc, #28]	; (800768c <RF24_powerUp+0x20>)
 8007670:	2102      	movs	r1, #2
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	0010      	movs	r0, r2
 8007676:	4008      	ands	r0, r1
 8007678:	d107      	bne.n	800768a <RF24_powerUp+0x1e>
        config_reg |= _BV(PWR_UP);
 800767a:	4311      	orrs	r1, r2
        RF24_write_register(NRF_CONFIG, config_reg, 0);
 800767c:	0002      	movs	r2, r0
        config_reg |= _BV(PWR_UP);
 800767e:	7019      	strb	r1, [r3, #0]
        RF24_write_register(NRF_CONFIG, config_reg, 0);
 8007680:	f7ff fe90 	bl	80073a4 <RF24_write_register>

        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        //delayMicroseconds(RF24_POWERUP_DELAY);
        HAL_Delay(1);
 8007684:	2001      	movs	r0, #1
 8007686:	f7fb fc9d 	bl	8002fc4 <HAL_Delay>
    }
}
 800768a:	bd10      	pop	{r4, pc}
 800768c:	200004c4 	.word	0x200004c4

08007690 <RF24_startFastWrite>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24_startFastWrite(const void* buf, uint8_t len, const uint8_t multicast, uint8_t startTx)
{ //TMRh20
 8007690:	b510      	push	{r4, lr}
 8007692:	001c      	movs	r4, r3

    RF24_write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 8007694:	23b0      	movs	r3, #176	; 0xb0
 8007696:	2a00      	cmp	r2, #0
 8007698:	d100      	bne.n	800769c <RF24_startFastWrite+0xc>
 800769a:	3b10      	subs	r3, #16
 800769c:	001a      	movs	r2, r3
 800769e:	f7ff feb1 	bl	8007404 <RF24_write_payload>
    if (startTx) {
 80076a2:	2c00      	cmp	r4, #0
 80076a4:	d002      	beq.n	80076ac <RF24_startFastWrite+0x1c>
        RF24_ce(1);
 80076a6:	2001      	movs	r0, #1
 80076a8:	f7ff fe14 	bl	80072d4 <RF24_ce>
    }
}
 80076ac:	bd10      	pop	{r4, pc}
	...

080076b0 <RF24_write>:
{
 80076b0:	b570      	push	{r4, r5, r6, lr}
    RF24_startFastWrite(buf, len, multicast, 1);
 80076b2:	2301      	movs	r3, #1
 80076b4:	f7ff ffec 	bl	8007690 <RF24_startFastWrite>
    uint32_t timer = HAL_GetTick();
 80076b8:	f7fb fc7e 	bl	8002fb8 <HAL_GetTick>
    while (!(RF24_get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
 80076bc:	2530      	movs	r5, #48	; 0x30
    uint32_t timer = HAL_GetTick();
 80076be:	0006      	movs	r6, r0
    while (!(RF24_get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
 80076c0:	f7ff ff42 	bl	8007548 <RF24_get_status>
 80076c4:	4028      	ands	r0, r5
 80076c6:	1e04      	subs	r4, r0, #0
 80076c8:	d010      	beq.n	80076ec <RF24_write+0x3c>
    RF24_ce(0);
 80076ca:	2000      	movs	r0, #0
 80076cc:	f7ff fe02 	bl	80072d4 <RF24_ce>
    RF24_write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT), 0);
 80076d0:	2007      	movs	r0, #7
 80076d2:	2200      	movs	r2, #0
 80076d4:	2170      	movs	r1, #112	; 0x70
 80076d6:	f7ff fe65 	bl	80073a4 <RF24_write_register>
    if (status & _BV(MAX_RT)) {
 80076da:	4b08      	ldr	r3, [pc, #32]	; (80076fc <RF24_write+0x4c>)
    return 1;
 80076dc:	2001      	movs	r0, #1
    if (status & _BV(MAX_RT)) {
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	06db      	lsls	r3, r3, #27
 80076e2:	d502      	bpl.n	80076ea <RF24_write+0x3a>
        RF24_flush_tx(); // Only going to be 1 packet in the FIFO at a time using this method, so just flush
 80076e4:	f7ff ff24 	bl	8007530 <RF24_flush_tx>
        return 0;
 80076e8:	2000      	movs	r0, #0
}
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
        if (HAL_GetTick() - timer > 95) {
 80076ec:	f7fb fc64 	bl	8002fb8 <HAL_GetTick>
 80076f0:	1b80      	subs	r0, r0, r6
 80076f2:	285f      	cmp	r0, #95	; 0x5f
 80076f4:	d9e4      	bls.n	80076c0 <RF24_write+0x10>
            return 0;
 80076f6:	0020      	movs	r0, r4
 80076f8:	e7f7      	b.n	80076ea <RF24_write+0x3a>
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	20000610 	.word	0x20000610

08007700 <RF24_available>:
//}

/****************************************************************************/

uint8_t RF24_available(uint8_t* pipe_num)
{
 8007700:	b510      	push	{r4, lr}
 8007702:	0004      	movs	r4, r0
    // get implied RX FIFO empty flag from status byte
    uint8_t pipe = (RF24_get_status() >> RX_P_NO) & 0x07;
 8007704:	f7ff ff20 	bl	8007548 <RF24_get_status>
 8007708:	0703      	lsls	r3, r0, #28
 800770a:	0f5b      	lsrs	r3, r3, #29
    if (pipe > 5)
        return 0;
 800770c:	2000      	movs	r0, #0
    if (pipe > 5)
 800770e:	2b05      	cmp	r3, #5
 8007710:	d803      	bhi.n	800771a <RF24_available+0x1a>

    // If the caller wants the pipe number, include that
    if (pipe_num)
        *pipe_num = pipe;

    return 1;
 8007712:	3001      	adds	r0, #1
    if (pipe_num)
 8007714:	2c00      	cmp	r4, #0
 8007716:	d000      	beq.n	800771a <RF24_available+0x1a>
        *pipe_num = pipe;
 8007718:	7023      	strb	r3, [r4, #0]
}
 800771a:	bd10      	pop	{r4, pc}

0800771c <RF24_read>:

/****************************************************************************/

void RF24_read(void* buf, uint8_t len)
{
 800771c:	b510      	push	{r4, lr}

    // Fetch the payload
    RF24_read_payload(buf, len);
 800771e:	f7ff febb 	bl	8007498 <RF24_read_payload>

    //Clear the only applicable interrupt flags
    RF24_write_register(NRF_STATUS, _BV(RX_DR), 0);
 8007722:	2200      	movs	r2, #0
 8007724:	2140      	movs	r1, #64	; 0x40
 8007726:	2007      	movs	r0, #7
 8007728:	f7ff fe3c 	bl	80073a4 <RF24_write_register>

}
 800772c:	bd10      	pop	{r4, pc}
	...

08007730 <RF24_openWritingPipe>:
}

/****************************************************************************/

void RF24_openWritingPipe(uint64_t value)
{
 8007730:	b513      	push	{r0, r1, r4, lr}
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.

    RF24_write_registers(RX_ADDR_P0, (uint8_t*)(&value), addr_width);
 8007732:	4c07      	ldr	r4, [pc, #28]	; (8007750 <RF24_openWritingPipe+0x20>)
{
 8007734:	9000      	str	r0, [sp, #0]
 8007736:	9101      	str	r1, [sp, #4]
    RF24_write_registers(RX_ADDR_P0, (uint8_t*)(&value), addr_width);
 8007738:	7822      	ldrb	r2, [r4, #0]
 800773a:	4669      	mov	r1, sp
 800773c:	200a      	movs	r0, #10
 800773e:	f7ff fe0b 	bl	8007358 <RF24_write_registers>
    RF24_write_registers(TX_ADDR, (uint8_t*)(&value), addr_width);
 8007742:	7822      	ldrb	r2, [r4, #0]
 8007744:	4669      	mov	r1, sp
 8007746:	2010      	movs	r0, #16
 8007748:	f7ff fe06 	bl	8007358 <RF24_write_registers>
}
 800774c:	bd13      	pop	{r0, r1, r4, pc}
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	20000360 	.word	0x20000360

08007754 <RF24_openReadingPipe>:
/****************************************************************************/
const uint8_t child_pipe[] = {RX_ADDR_P0, RX_ADDR_P1, RX_ADDR_P2,
                                             RX_ADDR_P3, RX_ADDR_P4, RX_ADDR_P5};

void RF24_openReadingPipe(uint8_t child, uint64_t address)
{
 8007754:	b513      	push	{r0, r1, r4, lr}
 8007756:	0004      	movs	r4, r0
 8007758:	9200      	str	r2, [sp, #0]
 800775a:	9301      	str	r3, [sp, #4]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
 800775c:	2800      	cmp	r0, #0
 800775e:	d11a      	bne.n	8007796 <RF24_openReadingPipe+0x42>
        memcpy(pipe0_reading_address, &address, addr_width);
 8007760:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <RF24_openReadingPipe+0x54>)
 8007762:	4669      	mov	r1, sp
 8007764:	781a      	ldrb	r2, [r3, #0]
 8007766:	4811      	ldr	r0, [pc, #68]	; (80077ac <RF24_openReadingPipe+0x58>)
 8007768:	f000 fe32 	bl	80083d0 <memcpy>
    }

    if (child <= 5) {
        // For pipes 2-5, only write the LSB
        if (child < 2) {
            RF24_write_registers(child_pipe[child], (const uint8_t*)(&address), addr_width);
 800776c:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <RF24_openReadingPipe+0x54>)
 800776e:	781a      	ldrb	r2, [r3, #0]
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <RF24_openReadingPipe+0x5c>)
 8007772:	5d18      	ldrb	r0, [r3, r4]
        } else {
            RF24_write_registers(child_pipe[child], (const uint8_t*)(&address), 1);
 8007774:	4669      	mov	r1, sp
 8007776:	f7ff fdef 	bl	8007358 <RF24_write_registers>
        }

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        RF24_write_register(EN_RXADDR, RF24_read_register(EN_RXADDR) | _BV(child_pipe_enable[child]), 0);
 800777a:	2002      	movs	r0, #2
 800777c:	f7ff fdc4 	bl	8007308 <RF24_read_register>
 8007780:	2101      	movs	r1, #1
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <RF24_openReadingPipe+0x60>)
 8007784:	2200      	movs	r2, #0
 8007786:	5d1b      	ldrb	r3, [r3, r4]
 8007788:	4099      	lsls	r1, r3
 800778a:	4301      	orrs	r1, r0
 800778c:	b2c9      	uxtb	r1, r1
 800778e:	2002      	movs	r0, #2
 8007790:	f7ff fe08 	bl	80073a4 <RF24_write_register>
    }
}
 8007794:	bd13      	pop	{r0, r1, r4, pc}
    if (child <= 5) {
 8007796:	2805      	cmp	r0, #5
 8007798:	d8fc      	bhi.n	8007794 <RF24_openReadingPipe+0x40>
        if (child < 2) {
 800779a:	2801      	cmp	r0, #1
 800779c:	d0e6      	beq.n	800776c <RF24_openReadingPipe+0x18>
            RF24_write_registers(child_pipe[child], (const uint8_t*)(&address), 1);
 800779e:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <RF24_openReadingPipe+0x5c>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	5c18      	ldrb	r0, [r3, r0]
 80077a4:	e7e6      	b.n	8007774 <RF24_openReadingPipe+0x20>
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	20000360 	.word	0x20000360
 80077ac:	200004bc 	.word	0x200004bc
 80077b0:	0800a4af 	.word	0x0800a4af
 80077b4:	0800a4b5 	.word	0x0800a4b5

080077b8 <RF24_setAddressWidth>:

/****************************************************************************/
void RF24_setAddressWidth(uint8_t a_width)
{

    if (a_width -= 2) {
 80077b8:	3802      	subs	r0, #2
 80077ba:	b2c1      	uxtb	r1, r0
{
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	4d09      	ldr	r5, [pc, #36]	; (80077e4 <RF24_setAddressWidth+0x2c>)
    if (a_width -= 2) {
 80077c0:	2900      	cmp	r1, #0
 80077c2:	d008      	beq.n	80077d6 <RF24_setAddressWidth+0x1e>
        RF24_write_register(SETUP_AW, a_width % 4, 0);
 80077c4:	2003      	movs	r0, #3
 80077c6:	4001      	ands	r1, r0
 80077c8:	000c      	movs	r4, r1
 80077ca:	2200      	movs	r2, #0
        addr_width = (a_width % 4) + 2;
 80077cc:	3402      	adds	r4, #2
        RF24_write_register(SETUP_AW, a_width % 4, 0);
 80077ce:	f7ff fde9 	bl	80073a4 <RF24_write_register>
        addr_width = (a_width % 4) + 2;
 80077d2:	702c      	strb	r4, [r5, #0]
    } else {
        RF24_write_register(SETUP_AW, 0, 0);
        addr_width = 2;
    }

}
 80077d4:	bd70      	pop	{r4, r5, r6, pc}
        RF24_write_register(SETUP_AW, 0, 0);
 80077d6:	000a      	movs	r2, r1
 80077d8:	2003      	movs	r0, #3
 80077da:	f7ff fde3 	bl	80073a4 <RF24_write_register>
        addr_width = 2;
 80077de:	2302      	movs	r3, #2
 80077e0:	702b      	strb	r3, [r5, #0]
}
 80077e2:	e7f7      	b.n	80077d4 <RF24_setAddressWidth+0x1c>
 80077e4:	20000360 	.word	0x20000360

080077e8 <RF24_toggle_features>:
}

/****************************************************************************/

void RF24_toggle_features(void)
{
 80077e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t _data = ACTIVATE;
 80077ea:	240f      	movs	r4, #15
 80077ec:	2350      	movs	r3, #80	; 0x50
    RF24_beginTransaction();
    //status = _SPI->transfer(ACTIVATE);
    //_SPI->transfer(0x73);
    HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 80077ee:	26fa      	movs	r6, #250	; 0xfa
    uint8_t _data = ACTIVATE;
 80077f0:	446c      	add	r4, sp
 80077f2:	7023      	strb	r3, [r4, #0]
    RF24_beginTransaction();
 80077f4:	f7ff fd7e 	bl	80072f4 <RF24_beginTransaction>
    HAL_SPI_TransmitReceive(&hspi1, &_data, &status, sizeof(uint8_t), 1000);
 80077f8:	4d09      	ldr	r5, [pc, #36]	; (8007820 <RF24_toggle_features+0x38>)
 80077fa:	00b6      	lsls	r6, r6, #2
 80077fc:	9600      	str	r6, [sp, #0]
 80077fe:	0021      	movs	r1, r4
 8007800:	0028      	movs	r0, r5
 8007802:	2301      	movs	r3, #1
 8007804:	4a07      	ldr	r2, [pc, #28]	; (8007824 <RF24_toggle_features+0x3c>)
 8007806:	f7fd fd89 	bl	800531c <HAL_SPI_TransmitReceive>
    _data = 0x73;
 800780a:	2373      	movs	r3, #115	; 0x73
    HAL_SPI_Transmit(&hspi1, &_data, sizeof(uint8_t), 1000);
 800780c:	2201      	movs	r2, #1
    _data = 0x73;
 800780e:	7023      	strb	r3, [r4, #0]
    HAL_SPI_Transmit(&hspi1, &_data, sizeof(uint8_t), 1000);
 8007810:	0021      	movs	r1, r4
 8007812:	0033      	movs	r3, r6
 8007814:	0028      	movs	r0, r5
 8007816:	f7fd fcca 	bl	80051ae <HAL_SPI_Transmit>
    RF24_endTransaction();
 800781a:	f7ff fd70 	bl	80072fe <RF24_endTransaction>
}
 800781e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8007820:	200004cc 	.word	0x200004cc
 8007824:	20000610 	.word	0x20000610

08007828 <RF24_enableAckPayload>:
}

/****************************************************************************/

void RF24_enableAckPayload(void)
{
 8007828:	b570      	push	{r4, r5, r6, lr}
    // enable ack payloads and dynamic payload features

    if (!ack_payloads_enabled){
 800782a:	4d0e      	ldr	r5, [pc, #56]	; (8007864 <RF24_enableAckPayload+0x3c>)
 800782c:	782c      	ldrb	r4, [r5, #0]
 800782e:	2c00      	cmp	r4, #0
 8007830:	d117      	bne.n	8007862 <RF24_enableAckPayload+0x3a>
        RF24_write_register(FEATURE, RF24_read_register(FEATURE) | _BV(EN_ACK_PAY) | _BV(EN_DPL), 0);
 8007832:	201d      	movs	r0, #29
 8007834:	f7ff fd68 	bl	8007308 <RF24_read_register>
 8007838:	2106      	movs	r1, #6
 800783a:	4301      	orrs	r1, r0
 800783c:	b2c9      	uxtb	r1, r1
 800783e:	0022      	movs	r2, r4
 8007840:	201d      	movs	r0, #29
 8007842:	f7ff fdaf 	bl	80073a4 <RF24_write_register>

        // Enable dynamic payload on pipes 0
        RF24_write_register(DYNPD, RF24_read_register(DYNPD) | _BV(DPL_P1) | _BV(DPL_P0), 0);
 8007846:	201c      	movs	r0, #28
 8007848:	f7ff fd5e 	bl	8007308 <RF24_read_register>
 800784c:	2103      	movs	r1, #3
 800784e:	4301      	orrs	r1, r0
 8007850:	0022      	movs	r2, r4
 8007852:	b2c9      	uxtb	r1, r1
 8007854:	201c      	movs	r0, #28
 8007856:	f7ff fda5 	bl	80073a4 <RF24_write_register>
        dynamic_payloads_enabled = 1;
 800785a:	2301      	movs	r3, #1
 800785c:	4a02      	ldr	r2, [pc, #8]	; (8007868 <RF24_enableAckPayload+0x40>)
        ack_payloads_enabled = 1;
 800785e:	702b      	strb	r3, [r5, #0]
        dynamic_payloads_enabled = 1;
 8007860:	7013      	strb	r3, [r2, #0]
    }
}
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	200003cc 	.word	0x200003cc
 8007868:	20000375 	.word	0x20000375

0800786c <RF24_disableAckPayload>:

/****************************************************************************/

void RF24_disableAckPayload(void)
{
 800786c:	b510      	push	{r4, lr}
    // disable ack payloads (leave dynamic payload features as is)
    if (ack_payloads_enabled){
 800786e:	4c09      	ldr	r4, [pc, #36]	; (8007894 <RF24_disableAckPayload+0x28>)
 8007870:	7823      	ldrb	r3, [r4, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00c      	beq.n	8007890 <RF24_disableAckPayload+0x24>
        RF24_write_register(FEATURE, RF24_read_register(FEATURE) | ~_BV(EN_ACK_PAY), 0);
 8007876:	201d      	movs	r0, #29
 8007878:	f7ff fd46 	bl	8007308 <RF24_read_register>
 800787c:	2103      	movs	r1, #3
 800787e:	4249      	negs	r1, r1
 8007880:	4301      	orrs	r1, r0
 8007882:	b2c9      	uxtb	r1, r1
 8007884:	2200      	movs	r2, #0
 8007886:	201d      	movs	r0, #29
 8007888:	f7ff fd8c 	bl	80073a4 <RF24_write_register>

        ack_payloads_enabled = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	7023      	strb	r3, [r4, #0]
    }
}
 8007890:	bd10      	pop	{r4, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	200003cc 	.word	0x200003cc

08007898 <RF24_isAckPayloadAvailable>:
}

/****************************************************************************/

uint8_t RF24_isAckPayloadAvailable(void)
{
 8007898:	b510      	push	{r4, lr}
    return RF24_available(NULL);
 800789a:	2000      	movs	r0, #0
 800789c:	f7ff ff30 	bl	8007700 <RF24_available>
}
 80078a0:	bd10      	pop	{r4, pc}
	...

080078a4 <RF24_setAutoAck>:
}

/****************************************************************************/

void RF24_setAutoAck(uint8_t enable)
{
 80078a4:	b510      	push	{r4, lr}
 80078a6:	1e01      	subs	r1, r0, #0
    if (enable){
 80078a8:	d005      	beq.n	80078b6 <RF24_setAutoAck+0x12>
        RF24_write_register(EN_AA, 0x3F, 0);
 80078aa:	2200      	movs	r2, #0
 80078ac:	213f      	movs	r1, #63	; 0x3f
 80078ae:	2001      	movs	r0, #1
 80078b0:	f7ff fd78 	bl	80073a4 <RF24_write_register>
        // accomodate ACK payloads feature
        if (ack_payloads_enabled){
            RF24_disableAckPayload();
        }
    }
}
 80078b4:	bd10      	pop	{r4, pc}
        RF24_write_register(EN_AA, 0, 0);
 80078b6:	0002      	movs	r2, r0
 80078b8:	2001      	movs	r0, #1
 80078ba:	f7ff fd73 	bl	80073a4 <RF24_write_register>
        if (ack_payloads_enabled){
 80078be:	4b03      	ldr	r3, [pc, #12]	; (80078cc <RF24_setAutoAck+0x28>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0f6      	beq.n	80078b4 <RF24_setAutoAck+0x10>
            RF24_disableAckPayload();
 80078c6:	f7ff ffd1 	bl	800786c <RF24_disableAckPayload>
}
 80078ca:	e7f3      	b.n	80078b4 <RF24_setAutoAck+0x10>
 80078cc:	200003cc 	.word	0x200003cc

080078d0 <RF24_setPALevel>:
}

/****************************************************************************/

void RF24_setPALevel(uint8_t level, uint8_t lnaEnable)
{
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	0004      	movs	r4, r0

    uint8_t setup = RF24_read_register(RF_SETUP) & 0xF8;
 80078d4:	2006      	movs	r0, #6
{
 80078d6:	000d      	movs	r5, r1
    uint8_t setup = RF24_read_register(RF_SETUP) & 0xF8;
 80078d8:	f7ff fd16 	bl	8007308 <RF24_read_register>
 80078dc:	21f8      	movs	r1, #248	; 0xf8
 80078de:	4008      	ands	r0, r1

    if (level > 3) {                            // If invalid level, go to max PA
 80078e0:	2c03      	cmp	r4, #3
 80078e2:	d907      	bls.n	80078f4 <RF24_setPALevel+0x24>
        level = (RF24_PA_MAX << 1) + lnaEnable; // +1 to support the SI24R1 chip extra bit
 80078e4:	3506      	adds	r5, #6
 80078e6:	b2e9      	uxtb	r1, r5
    } else {
        level = (level << 1) + lnaEnable;       // Else set level as requested
    }

    RF24_write_register(RF_SETUP, setup |= level, 0);   // Write it to the chip
 80078e8:	4301      	orrs	r1, r0
 80078ea:	2200      	movs	r2, #0
 80078ec:	2006      	movs	r0, #6
 80078ee:	f7ff fd59 	bl	80073a4 <RF24_write_register>
}
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
        level = (level << 1) + lnaEnable;       // Else set level as requested
 80078f4:	0064      	lsls	r4, r4, #1
 80078f6:	1964      	adds	r4, r4, r5
 80078f8:	b2e1      	uxtb	r1, r4
 80078fa:	e7f5      	b.n	80078e8 <RF24_setPALevel+0x18>

080078fc <RF24_setDataRate>:
}

/****************************************************************************/

uint8_t RF24_setDataRate(rf24_datarate_e speed)
{
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	0005      	movs	r5, r0
    uint8_t result = 0;
    uint8_t setup = RF24_read_register(RF_SETUP);
 8007900:	2006      	movs	r0, #6
 8007902:	f7ff fd01 	bl	8007308 <RF24_read_register>

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8007906:	24d7      	movs	r4, #215	; 0xd7
 8007908:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <RF24_setDataRate+0x4c>)
 800790a:	4004      	ands	r4, r0
    txDelay = 280;
    if (speed == RF24_250KBPS) {
 800790c:	2d02      	cmp	r5, #2
 800790e:	d111      	bne.n	8007934 <RF24_setDataRate+0x38>
        // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
        // Making it '10'.
        setup |= _BV(RF_DR_LOW);
 8007910:	2220      	movs	r2, #32
 8007912:	4314      	orrs	r4, r2
        txDelay = 505;
 8007914:	22fa      	movs	r2, #250	; 0xfa
 8007916:	32ff      	adds	r2, #255	; 0xff
    } else {
        // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
        // Making it '01'
        if (speed == RF24_2MBPS) {
            setup |= _BV(RF_DR_HIGH);
            txDelay = 240;
 8007918:	601a      	str	r2, [r3, #0]
        }
    }
    RF24_write_register(RF_SETUP, setup, 0);
 800791a:	0021      	movs	r1, r4
 800791c:	2200      	movs	r2, #0
 800791e:	2006      	movs	r0, #6
 8007920:	f7ff fd40 	bl	80073a4 <RF24_write_register>

    // Verify our result
    if (RF24_read_register(RF_SETUP) == setup) {
 8007924:	2006      	movs	r0, #6
 8007926:	f7ff fcef 	bl	8007308 <RF24_read_register>
 800792a:	1a20      	subs	r0, r4, r0
 800792c:	4244      	negs	r4, r0
 800792e:	4160      	adcs	r0, r4
        result = 1;
    }
    return result;
 8007930:	b2c0      	uxtb	r0, r0
}
 8007932:	bd70      	pop	{r4, r5, r6, pc}
        if (speed == RF24_2MBPS) {
 8007934:	2d01      	cmp	r5, #1
 8007936:	d002      	beq.n	800793e <RF24_setDataRate+0x42>
    txDelay = 280;
 8007938:	228c      	movs	r2, #140	; 0x8c
 800793a:	0052      	lsls	r2, r2, #1
 800793c:	e7ec      	b.n	8007918 <RF24_setDataRate+0x1c>
            setup |= _BV(RF_DR_HIGH);
 800793e:	2208      	movs	r2, #8
 8007940:	4314      	orrs	r4, r2
            txDelay = 240;
 8007942:	32e8      	adds	r2, #232	; 0xe8
 8007944:	e7e8      	b.n	8007918 <RF24_setDataRate+0x1c>
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	200004c8 	.word	0x200004c8

0800794c <RF24_setRetries>:
}

/****************************************************************************/
void RF24_setRetries(uint8_t delay, uint8_t count)
{
    RF24_write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC, 0);
 800794c:	230f      	movs	r3, #15
{
 800794e:	b510      	push	{r4, lr}
    RF24_write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC, 0);
 8007950:	0100      	lsls	r0, r0, #4
 8007952:	4019      	ands	r1, r3
 8007954:	4301      	orrs	r1, r0
 8007956:	b2c9      	uxtb	r1, r1
 8007958:	2200      	movs	r2, #0
 800795a:	2004      	movs	r0, #4
 800795c:	f7ff fd22 	bl	80073a4 <RF24_write_register>
}
 8007960:	bd10      	pop	{r4, pc}
	...

08007964 <RF24_begin>:
{
 8007964:	b510      	push	{r4, lr}
    RF24_ce(0);
 8007966:	2000      	movs	r0, #0
 8007968:	f7ff fcb4 	bl	80072d4 <RF24_ce>
    RF24_csn(1);
 800796c:	2001      	movs	r0, #1
 800796e:	f7ff fca1 	bl	80072b4 <RF24_csn>
    HAL_Delay(5);
 8007972:	2005      	movs	r0, #5
 8007974:	f7fb fb26 	bl	8002fc4 <HAL_Delay>
    RF24_setRetries(5, 15);
 8007978:	210f      	movs	r1, #15
 800797a:	2005      	movs	r0, #5
 800797c:	f7ff ffe6 	bl	800794c <RF24_setRetries>
    RF24_setDataRate(RF24_1MBPS);
 8007980:	2000      	movs	r0, #0
 8007982:	f7ff ffbb 	bl	80078fc <RF24_setDataRate>
    uint8_t before_toggle = RF24_read_register(FEATURE);
 8007986:	201d      	movs	r0, #29
 8007988:	f7ff fcbe 	bl	8007308 <RF24_read_register>
 800798c:	0004      	movs	r4, r0
    RF24_toggle_features();
 800798e:	f7ff ff2b 	bl	80077e8 <RF24_toggle_features>
    uint8_t after_toggle = RF24_read_register(FEATURE);
 8007992:	201d      	movs	r0, #29
 8007994:	f7ff fcb8 	bl	8007308 <RF24_read_register>
    _is_p_variant = before_toggle == after_toggle;
 8007998:	1a23      	subs	r3, r4, r0
 800799a:	425a      	negs	r2, r3
 800799c:	4153      	adcs	r3, r2
 800799e:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <RF24_begin+0xc4>)
 80079a0:	7013      	strb	r3, [r2, #0]
    if (after_toggle){
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d008      	beq.n	80079b8 <RF24_begin+0x54>
        if (_is_p_variant){
 80079a6:	4284      	cmp	r4, r0
 80079a8:	d101      	bne.n	80079ae <RF24_begin+0x4a>
            RF24_toggle_features();
 80079aa:	f7ff ff1d 	bl	80077e8 <RF24_toggle_features>
        RF24_write_register(FEATURE, 0, 0);
 80079ae:	2200      	movs	r2, #0
 80079b0:	201d      	movs	r0, #29
 80079b2:	0011      	movs	r1, r2
 80079b4:	f7ff fcf6 	bl	80073a4 <RF24_write_register>
    ack_payloads_enabled = 0;     // ack payloads disabled by default
 80079b8:	2400      	movs	r4, #0
 80079ba:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <RF24_begin+0xc8>)
    RF24_write_register(DYNPD, 0, 0);         // disable dynamic payloads by default (for all pipes)
 80079bc:	0022      	movs	r2, r4
 80079be:	0021      	movs	r1, r4
 80079c0:	201c      	movs	r0, #28
    ack_payloads_enabled = 0;     // ack payloads disabled by default
 80079c2:	701c      	strb	r4, [r3, #0]
    RF24_write_register(DYNPD, 0, 0);         // disable dynamic payloads by default (for all pipes)
 80079c4:	f7ff fcee 	bl	80073a4 <RF24_write_register>
    dynamic_payloads_enabled = 0;
 80079c8:	4b19      	ldr	r3, [pc, #100]	; (8007a30 <RF24_begin+0xcc>)
    RF24_write_register(EN_AA, 0x3F, 0);      // enable auto-ack on all pipes
 80079ca:	0022      	movs	r2, r4
 80079cc:	213f      	movs	r1, #63	; 0x3f
 80079ce:	2001      	movs	r0, #1
    dynamic_payloads_enabled = 0;
 80079d0:	701c      	strb	r4, [r3, #0]
    RF24_write_register(EN_AA, 0x3F, 0);      // enable auto-ack on all pipes
 80079d2:	f7ff fce7 	bl	80073a4 <RF24_write_register>
    RF24_write_register(EN_RXADDR, 0, 0);     // close all RX pipes
 80079d6:	0022      	movs	r2, r4
 80079d8:	0021      	movs	r1, r4
 80079da:	2002      	movs	r0, #2
 80079dc:	f7ff fce2 	bl	80073a4 <RF24_write_register>
    RF24_setPayloadSize(32);               // set static payload size to 32 (max) bytes by default
 80079e0:	2020      	movs	r0, #32
 80079e2:	f7ff fdf7 	bl	80075d4 <RF24_setPayloadSize>
    RF24_setAddressWidth(5);               // set default address length to (max) 5 bytes
 80079e6:	2005      	movs	r0, #5
 80079e8:	f7ff fee6 	bl	80077b8 <RF24_setAddressWidth>
    RF24_setChannel(76);
 80079ec:	204c      	movs	r0, #76	; 0x4c
 80079ee:	f7ff fde5 	bl	80075bc <RF24_setChannel>
    RF24_write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT), 0);
 80079f2:	0022      	movs	r2, r4
 80079f4:	2170      	movs	r1, #112	; 0x70
 80079f6:	2007      	movs	r0, #7
 80079f8:	f7ff fcd4 	bl	80073a4 <RF24_write_register>
    RF24_flush_rx();
 80079fc:	f7ff fd8c 	bl	8007518 <RF24_flush_rx>
    RF24_flush_tx();
 8007a00:	f7ff fd96 	bl	8007530 <RF24_flush_tx>
    RF24_write_register(NRF_CONFIG, (_BV(EN_CRC) | _BV(CRCO)), 0);
 8007a04:	0022      	movs	r2, r4
 8007a06:	210c      	movs	r1, #12
 8007a08:	0020      	movs	r0, r4
 8007a0a:	f7ff fccb 	bl	80073a4 <RF24_write_register>
    config_reg = RF24_read_register(NRF_CONFIG);
 8007a0e:	0020      	movs	r0, r4
 8007a10:	f7ff fc7a 	bl	8007308 <RF24_read_register>
 8007a14:	4c07      	ldr	r4, [pc, #28]	; (8007a34 <RF24_begin+0xd0>)
 8007a16:	7020      	strb	r0, [r4, #0]
    RF24_powerUp();
 8007a18:	f7ff fe28 	bl	800766c <RF24_powerUp>
    return config_reg == (_BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP)) ? 1 : 0;
 8007a1c:	7820      	ldrb	r0, [r4, #0]
 8007a1e:	380e      	subs	r0, #14
 8007a20:	4243      	negs	r3, r0
 8007a22:	4158      	adcs	r0, r3
 8007a24:	b2c0      	uxtb	r0, r0
}
 8007a26:	bd10      	pop	{r4, pc}
 8007a28:	2000052c 	.word	0x2000052c
 8007a2c:	200003cc 	.word	0x200003cc
 8007a30:	20000375 	.word	0x20000375
 8007a34:	200004c4 	.word	0x200004c4

08007a38 <SHT21_Init>:

extern I2C_HandleTypeDef hi2c1;

// It doesn't init the sensor, it used to verify is sensor connected to the I2C
uint8_t SHT21_Init()
{
 8007a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t dummy = 0;
 8007a3a:	220f      	movs	r2, #15
  uint8_t _err = HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &dummy, 0, 1000);
 8007a3c:	21fa      	movs	r1, #250	; 0xfa
  uint8_t dummy = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	446a      	add	r2, sp
  uint8_t _err = HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &dummy, 0, 1000);
 8007a42:	0089      	lsls	r1, r1, #2
  uint8_t dummy = 0;
 8007a44:	7013      	strb	r3, [r2, #0]
  uint8_t _err = HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &dummy, 0, 1000);
 8007a46:	4805      	ldr	r0, [pc, #20]	; (8007a5c <SHT21_Init+0x24>)
 8007a48:	9100      	str	r1, [sp, #0]
 8007a4a:	2180      	movs	r1, #128	; 0x80
 8007a4c:	f7fc f950 	bl	8003cf0 <HAL_I2C_Master_Transmit>
  return (_err == 0?1:0);
 8007a50:	4243      	negs	r3, r0
 8007a52:	4158      	adcs	r0, r3
 8007a54:	b2c0      	uxtb	r0, r0
}
 8007a56:	b005      	add	sp, #20
 8007a58:	bd00      	pop	{pc}
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	20000378 	.word	0x20000378

08007a60 <SHT21_ReadRegister>:
	// Return relative humidity multiplied by ten to avoid using float;
  	return (-46.85 + 175.72/65536 * (float)_t);
}

uint16_t SHT21_ReadRegister(uint8_t _reg)
{
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	220f      	movs	r2, #15
	uint8_t _data[3];

	// Use No Hold Master Mode - No Clock Streching!
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8007a64:	26fa      	movs	r6, #250	; 0xfa
{
 8007a66:	b086      	sub	sp, #24
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8007a68:	4d0c      	ldr	r5, [pc, #48]	; (8007a9c <SHT21_ReadRegister+0x3c>)
{
 8007a6a:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8007a6c:	00b6      	lsls	r6, r6, #2
{
 8007a6e:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SHT21_ADDRESS, &_reg, 1, 1000);
 8007a70:	2301      	movs	r3, #1
 8007a72:	2180      	movs	r1, #128	; 0x80
 8007a74:	9600      	str	r6, [sp, #0]
 8007a76:	0028      	movs	r0, r5
 8007a78:	f7fc f93a 	bl	8003cf0 <HAL_I2C_Master_Transmit>

	// Wait for measurment to be completed
	HAL_Delay(100);

	// Read the data
	HAL_I2C_Master_Receive(&hi2c1, SHT21_ADDRESS, _data, 3, 1000);
 8007a7c:	ac05      	add	r4, sp, #20
	HAL_Delay(100);
 8007a7e:	2064      	movs	r0, #100	; 0x64
 8007a80:	f7fb faa0 	bl	8002fc4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, SHT21_ADDRESS, _data, 3, 1000);
 8007a84:	9600      	str	r6, [sp, #0]
 8007a86:	2303      	movs	r3, #3
 8007a88:	0022      	movs	r2, r4
 8007a8a:	2180      	movs	r1, #128	; 0x80
 8007a8c:	0028      	movs	r0, r5
 8007a8e:	f7fc f9c5 	bl	8003e1c <HAL_I2C_Master_Receive>
 8007a92:	8820      	ldrh	r0, [r4, #0]
 8007a94:	ba40      	rev16	r0, r0
 8007a96:	b280      	uxth	r0, r0

	// Pack it!
	return (uint16_t)(_data[0] << 8) | _data[1];
}
 8007a98:	b006      	add	sp, #24
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	20000378 	.word	0x20000378

08007aa0 <SHT21_ReadHumidity>:
float SHT21_ReadHumidity() {
 8007aa0:	b510      	push	{r4, lr}
	uint16_t _rh = SHT21_ReadRegister(SHT21_TRIG_HUM_MEAS_NO_HOLD);
 8007aa2:	20f5      	movs	r0, #245	; 0xf5
 8007aa4:	f7ff ffdc 	bl	8007a60 <SHT21_ReadRegister>
	_rh &= ~0x0003;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	4398      	bics	r0, r3
  	return (-6.0 + 125.0/65536 * (float)_rh);
 8007aac:	b280      	uxth	r0, r0
 8007aae:	f7f9 fb6b 	bl	8001188 <__aeabi_ui2f>
 8007ab2:	f7fb f937 	bl	8002d24 <__aeabi_f2d>
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	4b04      	ldr	r3, [pc, #16]	; (8007acc <SHT21_ReadHumidity+0x2c>)
 8007aba:	f7fa faef 	bl	800209c <__aeabi_dmul>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <SHT21_ReadHumidity+0x30>)
 8007ac2:	f7fa fd6b 	bl	800259c <__aeabi_dsub>
 8007ac6:	f7fb f97f 	bl	8002dc8 <__aeabi_d2f>
}
 8007aca:	bd10      	pop	{r4, pc}
 8007acc:	3f5f4000 	.word	0x3f5f4000
 8007ad0:	40180000 	.word	0x40180000

08007ad4 <SHT21_ReadTemperature>:
{
 8007ad4:	b510      	push	{r4, lr}
	uint16_t _t = SHT21_ReadRegister(SHT21_TRIG_TEMP_MEAS_NO_HOLD);
 8007ad6:	20f3      	movs	r0, #243	; 0xf3
 8007ad8:	f7ff ffc2 	bl	8007a60 <SHT21_ReadRegister>
	_t &= ~0x0003;
 8007adc:	2303      	movs	r3, #3
 8007ade:	4398      	bics	r0, r3
  	return (-46.85 + 175.72/65536 * (float)_t);
 8007ae0:	b280      	uxth	r0, r0
 8007ae2:	f7f9 fb51 	bl	8001188 <__aeabi_ui2f>
 8007ae6:	f7fb f91d 	bl	8002d24 <__aeabi_f2d>
 8007aea:	4a05      	ldr	r2, [pc, #20]	; (8007b00 <SHT21_ReadTemperature+0x2c>)
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <SHT21_ReadTemperature+0x30>)
 8007aee:	f7fa fad5 	bl	800209c <__aeabi_dmul>
 8007af2:	4a05      	ldr	r2, [pc, #20]	; (8007b08 <SHT21_ReadTemperature+0x34>)
 8007af4:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <SHT21_ReadTemperature+0x38>)
 8007af6:	f7fa fd51 	bl	800259c <__aeabi_dsub>
 8007afa:	f7fb f965 	bl	8002dc8 <__aeabi_d2f>
}
 8007afe:	bd10      	pop	{r4, pc}
 8007b00:	3d70a3d7 	.word	0x3d70a3d7
 8007b04:	3f65f70a 	.word	0x3f65f70a
 8007b08:	cccccccd 	.word	0xcccccccd
 8007b0c:	40476ccc 	.word	0x40476ccc

08007b10 <Si1147_ReadReg>:
#include <Si1147.h>

extern I2C_HandleTypeDef hi2c1;

uint8_t Si1147_ReadReg(uint8_t _reg)
{
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	220f      	movs	r2, #15
	uint8_t _ret;
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &_reg, 1, 1000);
 8007b14:	26fa      	movs	r6, #250	; 0xfa
	HAL_I2C_Master_Receive(&hi2c1, SI1147_ADDR, &_ret, 1, 1000);
 8007b16:	2417      	movs	r4, #23
{
 8007b18:	b086      	sub	sp, #24
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &_reg, 1, 1000);
 8007b1a:	4d0a      	ldr	r5, [pc, #40]	; (8007b44 <Si1147_ReadReg+0x34>)
{
 8007b1c:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &_reg, 1, 1000);
 8007b1e:	00b6      	lsls	r6, r6, #2
{
 8007b20:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Receive(&hi2c1, SI1147_ADDR, &_ret, 1, 1000);
 8007b22:	446c      	add	r4, sp
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &_reg, 1, 1000);
 8007b24:	9600      	str	r6, [sp, #0]
 8007b26:	2301      	movs	r3, #1
 8007b28:	21c0      	movs	r1, #192	; 0xc0
 8007b2a:	0028      	movs	r0, r5
 8007b2c:	f7fc f8e0 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SI1147_ADDR, &_ret, 1, 1000);
 8007b30:	9600      	str	r6, [sp, #0]
 8007b32:	2301      	movs	r3, #1
 8007b34:	0022      	movs	r2, r4
 8007b36:	21c0      	movs	r1, #192	; 0xc0
 8007b38:	0028      	movs	r0, r5
 8007b3a:	f7fc f96f 	bl	8003e1c <HAL_I2C_Master_Receive>
	return _ret;
 8007b3e:	7820      	ldrb	r0, [r4, #0]
}
 8007b40:	b006      	add	sp, #24
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	20000378 	.word	0x20000378

08007b48 <Si1147_WriteReg>:

void Si1147_WriteReg(uint8_t _reg, uint8_t _data)
{
 8007b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t _tempData[2] = {_reg, _data};
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, _tempData, 2, 1000);
 8007b4a:	23fa      	movs	r3, #250	; 0xfa
	uint8_t _tempData[2] = {_reg, _data};
 8007b4c:	aa03      	add	r2, sp, #12
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, _tempData, 2, 1000);
 8007b4e:	009b      	lsls	r3, r3, #2
	uint8_t _tempData[2] = {_reg, _data};
 8007b50:	7010      	strb	r0, [r2, #0]
 8007b52:	7051      	strb	r1, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, _tempData, 2, 1000);
 8007b54:	4803      	ldr	r0, [pc, #12]	; (8007b64 <Si1147_WriteReg+0x1c>)
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	21c0      	movs	r1, #192	; 0xc0
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	f7fc f8c8 	bl	8003cf0 <HAL_I2C_Master_Transmit>
}
 8007b60:	b005      	add	sp, #20
 8007b62:	bd00      	pop	{pc}
 8007b64:	20000378 	.word	0x20000378

08007b68 <Si1147_WriteRegs>:

void Si1147_WriteRegs(uint8_t *_regs, uint8_t _n)
{
 8007b68:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, _regs, _n, 1000);
 8007b6a:	b28b      	uxth	r3, r1
 8007b6c:	21fa      	movs	r1, #250	; 0xfa
 8007b6e:	0089      	lsls	r1, r1, #2
{
 8007b70:	0002      	movs	r2, r0
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, _regs, _n, 1000);
 8007b72:	9100      	str	r1, [sp, #0]
 8007b74:	4802      	ldr	r0, [pc, #8]	; (8007b80 <Si1147_WriteRegs+0x18>)
 8007b76:	21c0      	movs	r1, #192	; 0xc0
 8007b78:	f7fc f8ba 	bl	8003cf0 <HAL_I2C_Master_Transmit>
}
 8007b7c:	bd07      	pop	{r0, r1, r2, pc}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	20000378 	.word	0x20000378

08007b84 <Si1147_ReadRegs>:

void Si1147_ReadRegs(uint8_t _reg, uint8_t *_data, uint8_t _n)
{
 8007b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b86:	0014      	movs	r4, r2
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &_reg, 1, 1000);
 8007b88:	26fa      	movs	r6, #250	; 0xfa
{
 8007b8a:	220f      	movs	r2, #15
 8007b8c:	000f      	movs	r7, r1
 8007b8e:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &_reg, 1, 1000);
 8007b90:	4d09      	ldr	r5, [pc, #36]	; (8007bb8 <Si1147_ReadRegs+0x34>)
{
 8007b92:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &_reg, 1, 1000);
 8007b94:	00b6      	lsls	r6, r6, #2
{
 8007b96:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &_reg, 1, 1000);
 8007b98:	2301      	movs	r3, #1
 8007b9a:	9600      	str	r6, [sp, #0]
 8007b9c:	21c0      	movs	r1, #192	; 0xc0
 8007b9e:	0028      	movs	r0, r5
 8007ba0:	f7fc f8a6 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SI1147_ADDR, _data, _n, 1000);
 8007ba4:	b2a3      	uxth	r3, r4
 8007ba6:	9600      	str	r6, [sp, #0]
 8007ba8:	003a      	movs	r2, r7
 8007baa:	21c0      	movs	r1, #192	; 0xc0
 8007bac:	0028      	movs	r0, r5
 8007bae:	f7fc f935 	bl	8003e1c <HAL_I2C_Master_Receive>
}
 8007bb2:	b005      	add	sp, #20
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	20000378 	.word	0x20000378

08007bbc <Si1147_GetResponse>:
	uint8_t _tempData[2] = {SI1147_COMMAND, 0};
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, _tempData, 2, 1000);
}

uint8_t Si1147_GetResponse()
{
 8007bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tempData = SI1147_RESPONSE;
 8007bbe:	240f      	movs	r4, #15
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &tempData, 1, 1000);
 8007bc0:	26fa      	movs	r6, #250	; 0xfa
	uint8_t tempData = SI1147_RESPONSE;
 8007bc2:	2320      	movs	r3, #32
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &tempData, 1, 1000);
 8007bc4:	4d0a      	ldr	r5, [pc, #40]	; (8007bf0 <Si1147_GetResponse+0x34>)
	uint8_t tempData = SI1147_RESPONSE;
 8007bc6:	446c      	add	r4, sp
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &tempData, 1, 1000);
 8007bc8:	00b6      	lsls	r6, r6, #2
	uint8_t tempData = SI1147_RESPONSE;
 8007bca:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SI1147_ADDR, &tempData, 1, 1000);
 8007bcc:	0022      	movs	r2, r4
 8007bce:	9600      	str	r6, [sp, #0]
 8007bd0:	3b1f      	subs	r3, #31
 8007bd2:	21c0      	movs	r1, #192	; 0xc0
 8007bd4:	0028      	movs	r0, r5
 8007bd6:	f7fc f88b 	bl	8003cf0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SI1147_ADDR, &tempData, 1, 1000);
 8007bda:	9600      	str	r6, [sp, #0]
 8007bdc:	2301      	movs	r3, #1
 8007bde:	0022      	movs	r2, r4
 8007be0:	21c0      	movs	r1, #192	; 0xc0
 8007be2:	0028      	movs	r0, r5
 8007be4:	f7fc f91a 	bl	8003e1c <HAL_I2C_Master_Receive>
	return tempData;
 8007be8:	7820      	ldrb	r0, [r4, #0]
}
 8007bea:	b004      	add	sp, #16
 8007bec:	bd70      	pop	{r4, r5, r6, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	20000378 	.word	0x20000378

08007bf4 <Si1147_Init>:

uint8_t Si1147_Init()
{
 8007bf4:	b573      	push	{r0, r1, r4, r5, r6, lr}

	// INT pin must be used! Especialy while power up, it must be on HIGH logic level!
	//pinMode(_intPin, INPUT_PULLUP);

	// Read PART_ID register (it shound return 0b01000111 for Si1147)
	_res = Si1147_ReadReg(0);
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	f7ff ff8a 	bl	8007b10 <Si1147_ReadReg>
	if (_res != 0b01000111) return 0;
 8007bfc:	2847      	cmp	r0, #71	; 0x47
 8007bfe:	d001      	beq.n	8007c04 <Si1147_Init+0x10>
 8007c00:	2000      	movs	r0, #0

	// Enable Interrupt on INT pin of Si1147
	Si1147_WriteReg(SI1147_INT_CFG, 1);

	return 1;
}
 8007c02:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	Si1147_WriteReg(SI1147_COMMAND, 0x01);
 8007c04:	2101      	movs	r1, #1
 8007c06:	2018      	movs	r0, #24
 8007c08:	f7ff ff9e 	bl	8007b48 <Si1147_WriteReg>
	_res = Si1147_GetResponse();
 8007c0c:	f7ff ffd6 	bl	8007bbc <Si1147_GetResponse>
 8007c10:	1e05      	subs	r5, r0, #0
	if (_res != 0) return 0;
 8007c12:	d1f5      	bne.n	8007c00 <Si1147_Init+0xc>
	Si1147_WriteReg(0x07, 0x17);
 8007c14:	2117      	movs	r1, #23
 8007c16:	2007      	movs	r0, #7
 8007c18:	f7ff ff96 	bl	8007b48 <Si1147_WriteReg>
	Si1147_WriteReg(SI1147_PARAM_WR, 0);
 8007c1c:	0029      	movs	r1, r5
 8007c1e:	2017      	movs	r0, #23
 8007c20:	f7ff ff92 	bl	8007b48 <Si1147_WriteReg>
	tempRegs[0] = SI1147_COMMAND;
 8007c24:	2618      	movs	r6, #24
	tempRegs[1] = SI1147_PARAM_SET | SI1147_PSLED12_SELECT;
 8007c26:	23a2      	movs	r3, #162	; 0xa2
	tempRegs[0] = SI1147_COMMAND;
 8007c28:	ac01      	add	r4, sp, #4
	Si1147_WriteRegs(tempRegs, 2);
 8007c2a:	2102      	movs	r1, #2
 8007c2c:	0020      	movs	r0, r4
	tempRegs[1] = SI1147_PARAM_SET | SI1147_PSLED12_SELECT;
 8007c2e:	7063      	strb	r3, [r4, #1]
	tempRegs[0] = SI1147_COMMAND;
 8007c30:	7026      	strb	r6, [r4, #0]
	Si1147_WriteRegs(tempRegs, 2);
 8007c32:	f7ff ff99 	bl	8007b68 <Si1147_WriteRegs>
	Si1147_WriteReg(SI1147_PARAM_WR, 0);
 8007c36:	0029      	movs	r1, r5
 8007c38:	2017      	movs	r0, #23
 8007c3a:	f7ff ff85 	bl	8007b48 <Si1147_WriteReg>
	tempRegs[1] = SI1147_PARAM_SET | SI1147_PSLED3_SELECT;
 8007c3e:	23a3      	movs	r3, #163	; 0xa3
	Si1147_WriteRegs(tempRegs, 2);
 8007c40:	2102      	movs	r1, #2
 8007c42:	0020      	movs	r0, r4
	tempRegs[1] = SI1147_PARAM_SET | SI1147_PSLED3_SELECT;
 8007c44:	7063      	strb	r3, [r4, #1]
	tempRegs[0] = SI1147_COMMAND;
 8007c46:	7026      	strb	r6, [r4, #0]
	Si1147_WriteRegs(tempRegs, 2);
 8007c48:	f7ff ff8e 	bl	8007b68 <Si1147_WriteRegs>
	Si1147_WriteReg(SI1147_PS_LED21, 0);
 8007c4c:	0029      	movs	r1, r5
 8007c4e:	200f      	movs	r0, #15
 8007c50:	f7ff ff7a 	bl	8007b48 <Si1147_WriteReg>
	Si1147_WriteReg(SI1147_PS_LED3, 0);
 8007c54:	0029      	movs	r1, r5
 8007c56:	2010      	movs	r0, #16
 8007c58:	f7ff ff76 	bl	8007b48 <Si1147_WriteReg>
	Si1147_WriteReg(SI1147_IRQ_ENABLE, 1);
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	2004      	movs	r0, #4
 8007c60:	f7ff ff72 	bl	8007b48 <Si1147_WriteReg>
	Si1147_WriteReg(SI1147_IRQ_STATUS, 1);
 8007c64:	2101      	movs	r1, #1
 8007c66:	2021      	movs	r0, #33	; 0x21
 8007c68:	f7ff ff6e 	bl	8007b48 <Si1147_WriteReg>
	Si1147_WriteReg(SI1147_INT_CFG, 1);
 8007c6c:	2003      	movs	r0, #3
 8007c6e:	2101      	movs	r1, #1
 8007c70:	f7ff ff6a 	bl	8007b48 <Si1147_WriteReg>
	return 1;
 8007c74:	2001      	movs	r0, #1
 8007c76:	e7c4      	b.n	8007c02 <Si1147_Init+0xe>

08007c78 <Si1147_SetUV>:

void Si1147_SetUV()
{
 8007c78:	b513      	push	{r0, r1, r4, lr}
	uint8_t tempRegs[5];

	// Enable UV meas. (1 << 7), ALS IR (1 << 5) and ALS VIS (1 << 4)  in CH list
	Si1147_WriteReg(SI1147_PARAM_WR, (1 << 7) | (1 << 5) | (1 << 4));
 8007c7a:	21b0      	movs	r1, #176	; 0xb0
 8007c7c:	2017      	movs	r0, #23
 8007c7e:	f7ff ff63 	bl	8007b48 <Si1147_WriteReg>
	tempRegs[0] = SI1147_COMMAND;
 8007c82:	2418      	movs	r4, #24
 8007c84:	466b      	mov	r3, sp
	tempRegs[1] = SI1147_PARAM_SET | SI1147_CHLIST;
 8007c86:	466a      	mov	r2, sp
	tempRegs[0] = SI1147_COMMAND;
 8007c88:	701c      	strb	r4, [r3, #0]
	tempRegs[1] = SI1147_PARAM_SET | SI1147_CHLIST;
 8007c8a:	23a1      	movs	r3, #161	; 0xa1
	Si1147_WriteRegs(tempRegs, 2);
 8007c8c:	4668      	mov	r0, sp
 8007c8e:	2102      	movs	r1, #2
	tempRegs[1] = SI1147_PARAM_SET | SI1147_CHLIST;
 8007c90:	7053      	strb	r3, [r2, #1]
	Si1147_WriteRegs(tempRegs, 2);
 8007c92:	f7ff ff69 	bl	8007b68 <Si1147_WriteRegs>

	// Configure UCOEF
	tempRegs[0] = SI1147_UCOEF0;
 8007c96:	466a      	mov	r2, sp
 8007c98:	2313      	movs	r3, #19
 8007c9a:	7013      	strb	r3, [r2, #0]
	tempRegs[1] = 0x7B;
 8007c9c:	3368      	adds	r3, #104	; 0x68
 8007c9e:	7053      	strb	r3, [r2, #1]
	tempRegs[2] = 0x6B;
 8007ca0:	3b10      	subs	r3, #16
 8007ca2:	7093      	strb	r3, [r2, #2]
	tempRegs[3] = 0x01;
 8007ca4:	3b6a      	subs	r3, #106	; 0x6a
 8007ca6:	70d3      	strb	r3, [r2, #3]
	tempRegs[4] = 0x00;
 8007ca8:	2300      	movs	r3, #0
	Si1147_WriteRegs(tempRegs, 5);
 8007caa:	4668      	mov	r0, sp
 8007cac:	2105      	movs	r1, #5
	tempRegs[4] = 0x00;
 8007cae:	7113      	strb	r3, [r2, #4]
	Si1147_WriteRegs(tempRegs, 5);
 8007cb0:	f7ff ff5a 	bl	8007b68 <Si1147_WriteRegs>

	// Set the VIS_RANGE and IR_RANGE bits
	Si1147_WriteReg(SI1147_PARAM_WR, 1 << 5);
 8007cb4:	2120      	movs	r1, #32
 8007cb6:	2017      	movs	r0, #23
 8007cb8:	f7ff ff46 	bl	8007b48 <Si1147_WriteReg>
	//writeReg(SI1147_PARAM_WR, 0);
	tempRegs[0] = SI1147_COMMAND;
 8007cbc:	466b      	mov	r3, sp
	tempRegs[1] = SI1147_PARAM_SET | SI1147_ALS_VIS_ADC_MISC;
 8007cbe:	466a      	mov	r2, sp
	tempRegs[0] = SI1147_COMMAND;
 8007cc0:	701c      	strb	r4, [r3, #0]
	tempRegs[1] = SI1147_PARAM_SET | SI1147_ALS_VIS_ADC_MISC;
 8007cc2:	23b2      	movs	r3, #178	; 0xb2
	Si1147_WriteRegs(tempRegs, 2);
 8007cc4:	4668      	mov	r0, sp
 8007cc6:	2102      	movs	r1, #2
	tempRegs[1] = SI1147_PARAM_SET | SI1147_ALS_VIS_ADC_MISC;
 8007cc8:	7053      	strb	r3, [r2, #1]
	Si1147_WriteRegs(tempRegs, 2);
 8007cca:	f7ff ff4d 	bl	8007b68 <Si1147_WriteRegs>

	Si1147_WriteReg(SI1147_PARAM_WR, 1 << 5);
 8007cce:	2120      	movs	r1, #32
 8007cd0:	2017      	movs	r0, #23
 8007cd2:	f7ff ff39 	bl	8007b48 <Si1147_WriteReg>
	//writeReg(SI1147_PARAM_WR, 0);
	tempRegs[0] = SI1147_COMMAND;
 8007cd6:	466b      	mov	r3, sp
	tempRegs[1] = SI1147_PARAM_SET | SI1147_ALS_IR_ADC_MISC;
 8007cd8:	466a      	mov	r2, sp
	tempRegs[0] = SI1147_COMMAND;
 8007cda:	701c      	strb	r4, [r3, #0]
	tempRegs[1] = SI1147_PARAM_SET | SI1147_ALS_IR_ADC_MISC;
 8007cdc:	23bf      	movs	r3, #191	; 0xbf
	Si1147_WriteRegs(tempRegs, 2);
 8007cde:	2102      	movs	r1, #2
 8007ce0:	4668      	mov	r0, sp
	tempRegs[1] = SI1147_PARAM_SET | SI1147_ALS_IR_ADC_MISC;
 8007ce2:	7053      	strb	r3, [r2, #1]
	Si1147_WriteRegs(tempRegs, 2);
 8007ce4:	f7ff ff40 	bl	8007b68 <Si1147_WriteRegs>
}
 8007ce8:	bd13      	pop	{r0, r1, r4, pc}
	...

08007cec <Si1147_ForceUV>:

void Si1147_ForceUV()
{
 8007cec:	b510      	push	{r4, lr}
	uint32_t _timeout = HAL_GetTick();
 8007cee:	f7fb f963 	bl	8002fb8 <HAL_GetTick>

	// Force one UV meas.
	Si1147_WriteReg(SI1147_COMMAND, SI1147_ALS_FORCE);
 8007cf2:	2106      	movs	r1, #6
	uint32_t _timeout = HAL_GetTick();
 8007cf4:	0004      	movs	r4, r0
	Si1147_WriteReg(SI1147_COMMAND, SI1147_ALS_FORCE);
 8007cf6:	2018      	movs	r0, #24
 8007cf8:	f7ff ff26 	bl	8007b48 <Si1147_WriteReg>

	// Wait for interrupt event
	while ((HAL_GPIO_ReadPin(SI1147_INT_GPIO_Port, SI1147_INT_Pin) == GPIO_PIN_SET) && ((HAL_GetTick() - _timeout) < SI1147_TIMEOUT));
 8007cfc:	2120      	movs	r1, #32
 8007cfe:	4808      	ldr	r0, [pc, #32]	; (8007d20 <Si1147_ForceUV+0x34>)
 8007d00:	f7fb fe52 	bl	80039a8 <HAL_GPIO_ReadPin>
 8007d04:	2801      	cmp	r0, #1
 8007d06:	d004      	beq.n	8007d12 <Si1147_ForceUV+0x26>

	// Clear interrupt by sending 1 to corresponding interrupt
	Si1147_WriteReg(SI1147_IRQ_STATUS, 1);
 8007d08:	2101      	movs	r1, #1
 8007d0a:	2021      	movs	r0, #33	; 0x21
 8007d0c:	f7ff ff1c 	bl	8007b48 <Si1147_WriteReg>
}
 8007d10:	bd10      	pop	{r4, pc}
	while ((HAL_GPIO_ReadPin(SI1147_INT_GPIO_Port, SI1147_INT_Pin) == GPIO_PIN_SET) && ((HAL_GetTick() - _timeout) < SI1147_TIMEOUT));
 8007d12:	f7fb f951 	bl	8002fb8 <HAL_GetTick>
 8007d16:	1b00      	subs	r0, r0, r4
 8007d18:	28c7      	cmp	r0, #199	; 0xc7
 8007d1a:	d9ef      	bls.n	8007cfc <Si1147_ForceUV+0x10>
 8007d1c:	e7f4      	b.n	8007d08 <Si1147_ForceUV+0x1c>
 8007d1e:	46c0      	nop			; (mov r8, r8)
 8007d20:	50000400 	.word	0x50000400

08007d24 <Si1147_GetUV>:

float Si1147_GetUV()
{
 8007d24:	b513      	push	{r0, r1, r4, lr}
	uint8_t regData[2];

  	// Get the UV data
	Si1147_ReadRegs(SI1147_AUX_DATA0, regData, 2);
 8007d26:	ac01      	add	r4, sp, #4
 8007d28:	2202      	movs	r2, #2
 8007d2a:	0021      	movs	r1, r4
 8007d2c:	202c      	movs	r0, #44	; 0x2c
 8007d2e:	f7ff ff29 	bl	8007b84 <Si1147_ReadRegs>

	return ((regData[1] << 8) | regData[0]) / 100.0;
 8007d32:	8820      	ldrh	r0, [r4, #0]
 8007d34:	f7fa ff7c 	bl	8002c30 <__aeabi_i2d>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4b03      	ldr	r3, [pc, #12]	; (8007d48 <Si1147_GetUV+0x24>)
 8007d3c:	f7f9 fd7a 	bl	8001834 <__aeabi_ddiv>
 8007d40:	f7fb f842 	bl	8002dc8 <__aeabi_d2f>
}
 8007d44:	bd16      	pop	{r1, r2, r4, pc}
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	40590000 	.word	0x40590000

08007d4c <Si1147_GetVis>:

int16_t Si1147_GetVis()
{
 8007d4c:	b513      	push	{r0, r1, r4, lr}
	uint8_t regData[2];

	// Get ambient light visable spectrum data
	Si1147_ReadRegs(SI1147_ALS_VIS_DATA0, regData, 2);
 8007d4e:	ac01      	add	r4, sp, #4
 8007d50:	2202      	movs	r2, #2
 8007d52:	0021      	movs	r1, r4
 8007d54:	2022      	movs	r0, #34	; 0x22
 8007d56:	f7ff ff15 	bl	8007b84 <Si1147_ReadRegs>
	return (int16_t)(((regData[1] << 8) | regData[0]) - 256);
 8007d5a:	7863      	ldrb	r3, [r4, #1]
 8007d5c:	7820      	ldrb	r0, [r4, #0]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	4318      	orrs	r0, r3
 8007d62:	3801      	subs	r0, #1
 8007d64:	38ff      	subs	r0, #255	; 0xff
 8007d66:	b200      	sxth	r0, r0
}
 8007d68:	bd16      	pop	{r1, r2, r4, pc}
	...

08007d6c <communication_Setup>:
uint8_t rfBuffer[32];
uint64_t addr[2] = {0x65646F4E31, 0x65646F4E32};
const char syncStr[] = {"SYNC %3d"};

void communication_Setup()
{
 8007d6c:	b510      	push	{r4, lr}
    RF24_setAutoAck(1);
 8007d6e:	2001      	movs	r0, #1
 8007d70:	f7ff fd98 	bl	80078a4 <RF24_setAutoAck>
    RF24_enableAckPayload();
 8007d74:	f7ff fd58 	bl	8007828 <RF24_enableAckPayload>
    RF24_setChannel(0);
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f7ff fc1f 	bl	80075bc <RF24_setChannel>
    RF24_setDataRate(RF24_250KBPS);
 8007d7e:	2002      	movs	r0, #2
 8007d80:	f7ff fdbc 	bl	80078fc <RF24_setDataRate>
    RF24_setPALevel(RF24_PA_MAX, 1);
 8007d84:	2101      	movs	r1, #1
 8007d86:	2003      	movs	r0, #3
 8007d88:	f7ff fda2 	bl	80078d0 <RF24_setPALevel>
    RF24_openWritingPipe(addr[0]);
 8007d8c:	4c06      	ldr	r4, [pc, #24]	; (8007da8 <communication_Setup+0x3c>)
 8007d8e:	6820      	ldr	r0, [r4, #0]
 8007d90:	6861      	ldr	r1, [r4, #4]
 8007d92:	f7ff fccd 	bl	8007730 <RF24_openWritingPipe>
    RF24_openReadingPipe(1, addr[1]);
 8007d96:	68a2      	ldr	r2, [r4, #8]
 8007d98:	68e3      	ldr	r3, [r4, #12]
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f7ff fcda 	bl	8007754 <RF24_openReadingPipe>
    RF24_stopListening();
 8007da0:	f7ff fc30 	bl	8007604 <RF24_stopListening>
}
 8007da4:	bd10      	pop	{r4, pc}
 8007da6:	46c0      	nop			; (mov r8, r8)
 8007da8:	20000060 	.word	0x20000060

08007dac <communication_Transmit>:
//    }
//    return syncOk;
//}

uint8_t communication_Transmit(void* _transmitBuffer, uint8_t _txSize, uint8_t* _receiveBuffer)
{
 8007dac:	b510      	push	{r4, lr}
 8007dae:	0014      	movs	r4, r2
    uint8_t _succ = 0;
    RF24_write(_transmitBuffer, _txSize, 0);
 8007db0:	2200      	movs	r2, #0
 8007db2:	f7ff fc7d 	bl	80076b0 <RF24_write>
    if (RF24_isAckPayloadAvailable())
 8007db6:	f7ff fd6f 	bl	8007898 <RF24_isAckPayloadAvailable>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d104      	bne.n	8007dc8 <communication_Transmit+0x1c>
            RF24_read(_receiveBuffer, 32);
        }
        _succ = 1;
    }
    return _succ;
}
 8007dbe:	bd10      	pop	{r4, pc}
            RF24_read(_receiveBuffer, 32);
 8007dc0:	2120      	movs	r1, #32
 8007dc2:	0020      	movs	r0, r4
 8007dc4:	f7ff fcaa 	bl	800771c <RF24_read>
        while (RF24_available(NULL))
 8007dc8:	2000      	movs	r0, #0
 8007dca:	f7ff fc99 	bl	8007700 <RF24_available>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d1f6      	bne.n	8007dc0 <communication_Transmit+0x14>
        _succ = 1;
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	e7f3      	b.n	8007dbe <communication_Transmit+0x12>
	...

08007dd8 <glassLCD_Update>:
		_lcdTemp[i] |= asciiToSeg[s[i] - ' '];
	}
}

void glassLCD_Update()
{
 8007dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dda:	b087      	sub	sp, #28
	uint8_t _dotMask = 0;

	// Buffer for I2C data
	uint8_t _data[9] = {0};
 8007ddc:	ad03      	add	r5, sp, #12
 8007dde:	2209      	movs	r2, #9
 8007de0:	2100      	movs	r1, #0
 8007de2:	0028      	movs	r0, r5
 8007de4:	f000 fafd 	bl	80083e2 <memset>

	//Write segments
	_data[0] = 0;
	for (int i = 0; i < 8; i++)
 8007de8:	2300      	movs	r3, #0
	{
		_data[i + 1] = _lcdTemp[i];
 8007dea:	4f19      	ldr	r7, [pc, #100]	; (8007e50 <glassLCD_Update+0x78>)
 8007dec:	3301      	adds	r3, #1
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	5cba      	ldrb	r2, [r7, r2]
 8007df2:	54ea      	strb	r2, [r5, r3]
	for (int i = 0; i < 8; i++)
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d1f9      	bne.n	8007dec <glassLCD_Update+0x14>
	}
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 9, 1000);
 8007df8:	23fa      	movs	r3, #250	; 0xfa
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	002a      	movs	r2, r5
 8007e00:	2309      	movs	r3, #9
 8007e02:	2170      	movs	r1, #112	; 0x70
 8007e04:	4813      	ldr	r0, [pc, #76]	; (8007e54 <glassLCD_Update+0x7c>)
 8007e06:	f7fb ff73 	bl	8003cf0 <HAL_I2C_Master_Transmit>
 8007e0a:	2602      	movs	r6, #2

	//Now write dots
	for (int i = 0; i < 8; i++)
 8007e0c:	2400      	movs	r4, #0
	{
		_dotMask = (_dots & (1 << (7 - i))) ? 0b00100000 : 0b00000000;
 8007e0e:	2207      	movs	r2, #7
 8007e10:	4b11      	ldr	r3, [pc, #68]	; (8007e58 <glassLCD_Update+0x80>)
 8007e12:	1b12      	subs	r2, r2, r4
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	0021      	movs	r1, r4
 8007e18:	4113      	asrs	r3, r2
 8007e1a:	2201      	movs	r2, #1
	    _data[0] = 2 + (3 * i);
	    _data[1] = ((_lcdTemp[i] & 3) << 6) | _dotMask | (_lcdTemp[i + 1] >> 3);
 8007e1c:	3401      	adds	r4, #1
		_dotMask = (_dots & (1 << (7 - i))) ? 0b00100000 : 0b00000000;
 8007e1e:	4013      	ands	r3, r2
 8007e20:	015a      	lsls	r2, r3, #5
	    _data[1] = ((_lcdTemp[i] & 3) << 6) | _dotMask | (_lcdTemp[i + 1] >> 3);
 8007e22:	5c7b      	ldrb	r3, [r7, r1]
 8007e24:	5d39      	ldrb	r1, [r7, r4]
 8007e26:	019b      	lsls	r3, r3, #6
 8007e28:	08c9      	lsrs	r1, r1, #3
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	706b      	strb	r3, [r5, #1]
	    HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 2, 1000);
 8007e30:	23fa      	movs	r3, #250	; 0xfa
 8007e32:	009b      	lsls	r3, r3, #2
	    _data[0] = 2 + (3 * i);
 8007e34:	702e      	strb	r6, [r5, #0]
	    HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, _data, 2, 1000);
 8007e36:	002a      	movs	r2, r5
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	2170      	movs	r1, #112	; 0x70
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <glassLCD_Update+0x7c>)
 8007e40:	3603      	adds	r6, #3
 8007e42:	f7fb ff55 	bl	8003cf0 <HAL_I2C_Master_Transmit>
 8007e46:	b2f6      	uxtb	r6, r6
	for (int i = 0; i < 8; i++)
 8007e48:	2c08      	cmp	r4, #8
 8007e4a:	d1e0      	bne.n	8007e0e <glassLCD_Update+0x36>
	}
}
 8007e4c:	b007      	add	sp, #28
 8007e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e50:	20000321 	.word	0x20000321
 8007e54:	20000378 	.word	0x20000378
 8007e58:	20000320 	.word	0x20000320

08007e5c <glassLCD_Clear>:

void glassLCD_Clear()
{
 8007e5c:	b510      	push	{r4, lr}
	memset(_lcdTemp, 0, 8);
 8007e5e:	2208      	movs	r2, #8
 8007e60:	2100      	movs	r1, #0
 8007e62:	4803      	ldr	r0, [pc, #12]	; (8007e70 <glassLCD_Clear+0x14>)
 8007e64:	f000 fabd 	bl	80083e2 <memset>
	_dots = 0;
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <glassLCD_Clear+0x18>)
 8007e6c:	701a      	strb	r2, [r3, #0]
}
 8007e6e:	bd10      	pop	{r4, pc}
 8007e70:	20000321 	.word	0x20000321
 8007e74:	20000320 	.word	0x20000320

08007e78 <glassLCD_WriteData>:
{
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	0004      	movs	r4, r0
  glassLCD_Clear();
 8007e7c:	f7ff ffee 	bl	8007e5c <glassLCD_Clear>
	uint8_t _n = strlen(s);
 8007e80:	0020      	movs	r0, r4
 8007e82:	f7f8 f941 	bl	8000108 <strlen>
	for (int i = 0; i < _n; i++)
 8007e86:	2300      	movs	r3, #0
		_lcdTemp[i] |= asciiToSeg[s[i] - ' '];
 8007e88:	4907      	ldr	r1, [pc, #28]	; (8007ea8 <glassLCD_WriteData+0x30>)
 8007e8a:	4d08      	ldr	r5, [pc, #32]	; (8007eac <glassLCD_WriteData+0x34>)
	for (int i = 0; i < _n; i++)
 8007e8c:	b2c0      	uxtb	r0, r0
 8007e8e:	4283      	cmp	r3, r0
 8007e90:	db00      	blt.n	8007e94 <glassLCD_WriteData+0x1c>
}
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
		_lcdTemp[i] |= asciiToSeg[s[i] - ' '];
 8007e94:	5ce2      	ldrb	r2, [r4, r3]
 8007e96:	5c5e      	ldrb	r6, [r3, r1]
 8007e98:	18aa      	adds	r2, r5, r2
 8007e9a:	3a20      	subs	r2, #32
 8007e9c:	7812      	ldrb	r2, [r2, #0]
 8007e9e:	4332      	orrs	r2, r6
 8007ea0:	545a      	strb	r2, [r3, r1]
	for (int i = 0; i < _n; i++)
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	e7f3      	b.n	8007e8e <glassLCD_WriteData+0x16>
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	20000321 	.word	0x20000321
 8007eac:	0800a4bb 	.word	0x0800a4bb

08007eb0 <glassLCD_SetDot>:
//	}
//}

void glassLCD_SetDot(uint8_t _dot)
{
	_dots = _dot;
 8007eb0:	4b01      	ldr	r3, [pc, #4]	; (8007eb8 <glassLCD_SetDot+0x8>)
 8007eb2:	7018      	strb	r0, [r3, #0]
}
 8007eb4:	4770      	bx	lr
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	20000320 	.word	0x20000320

08007ebc <glassLCD_WriteArrow>:

void glassLCD_WriteArrow(uint8_t _a)
{
 8007ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i < 8; i++)
 8007ebe:	2300      	movs	r3, #0
  {
	  if (_a & 1 << (7 - i))
 8007ec0:	2507      	movs	r5, #7
 8007ec2:	2601      	movs	r6, #1
 8007ec4:	2420      	movs	r4, #32
 8007ec6:	4a08      	ldr	r2, [pc, #32]	; (8007ee8 <glassLCD_WriteArrow+0x2c>)
 8007ec8:	0007      	movs	r7, r0
 8007eca:	1ae9      	subs	r1, r5, r3
 8007ecc:	410f      	asrs	r7, r1
 8007ece:	4237      	tst	r7, r6
 8007ed0:	d006      	beq.n	8007ee0 <glassLCD_WriteArrow+0x24>
  	  {
	  	  _lcdTemp[i] |= SEGW;
 8007ed2:	5cd1      	ldrb	r1, [r2, r3]
 8007ed4:	4321      	orrs	r1, r4
  	  }
  	  else
  	  {
	  	  _lcdTemp[i] &= ~(SEGW);
 8007ed6:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 8; i++)
 8007ed8:	3301      	adds	r3, #1
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	d1f4      	bne.n	8007ec8 <glassLCD_WriteArrow+0xc>
  	  }
  }
}
 8007ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  	  _lcdTemp[i] &= ~(SEGW);
 8007ee0:	5cd1      	ldrb	r1, [r2, r3]
 8007ee2:	43a1      	bics	r1, r4
 8007ee4:	e7f7      	b.n	8007ed6 <glassLCD_WriteArrow+0x1a>
 8007ee6:	46c0      	nop			; (mov r8, r8)
 8007ee8:	20000321 	.word	0x20000321

08007eec <glassLCD_WriteCmd>:

void glassLCD_WriteCmd(uint8_t _comm)
{
 8007eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	_comm = _comm | 0b10000000;
 8007eee:	2380      	movs	r3, #128	; 0x80
 8007ef0:	425b      	negs	r3, r3
 8007ef2:	4318      	orrs	r0, r3
{
 8007ef4:	220f      	movs	r2, #15
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8007ef6:	23fa      	movs	r3, #250	; 0xfa
{
 8007ef8:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8007efa:	009b      	lsls	r3, r3, #2
	_comm = _comm | 0b10000000;
 8007efc:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, PCF85176_ADDR, &_comm, 1, 1000);
 8007efe:	2170      	movs	r1, #112	; 0x70
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	4803      	ldr	r0, [pc, #12]	; (8007f10 <glassLCD_WriteCmd+0x24>)
 8007f04:	2301      	movs	r3, #1
 8007f06:	f7fb fef3 	bl	8003cf0 <HAL_I2C_Master_Transmit>
}
 8007f0a:	b005      	add	sp, #20
 8007f0c:	bd00      	pop	{pc}
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	20000378 	.word	0x20000378

08007f14 <glassLCD_Begin>:
{
 8007f14:	b510      	push	{r4, lr}
	glassLCD_WriteCmd(LCD_CONFIG);
 8007f16:	204b      	movs	r0, #75	; 0x4b
 8007f18:	f7ff ffe8 	bl	8007eec <glassLCD_WriteCmd>
	glassLCD_Clear();
 8007f1c:	f7ff ff9e 	bl	8007e5c <glassLCD_Clear>
	glassLCD_Update();
 8007f20:	f7ff ff5a 	bl	8007dd8 <glassLCD_Update>
}
 8007f24:	bd10      	pop	{r4, pc}
	...

08007f28 <RTC_GetTime>:
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
}

time_t RTC_GetTime()
{
 8007f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    RTC_TimeTypeDef sTime = {0};
    RTC_DateTypeDef sDate = {0};
 8007f2a:	2600      	movs	r6, #0
{
 8007f2c:	b091      	sub	sp, #68	; 0x44
    RTC_TimeTypeDef sTime = {0};
 8007f2e:	ac02      	add	r4, sp, #8
 8007f30:	2214      	movs	r2, #20
 8007f32:	2100      	movs	r1, #0
 8007f34:	0020      	movs	r0, r4
 8007f36:	f000 fa54 	bl	80083e2 <memset>
    struct tm _myTime;
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8007f3a:	4f0f      	ldr	r7, [pc, #60]	; (8007f78 <RTC_GetTime+0x50>)
    RTC_DateTypeDef sDate = {0};
 8007f3c:	ad01      	add	r5, sp, #4
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8007f3e:	0032      	movs	r2, r6
 8007f40:	0021      	movs	r1, r4
 8007f42:	0038      	movs	r0, r7
    RTC_DateTypeDef sDate = {0};
 8007f44:	9601      	str	r6, [sp, #4]
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8007f46:	f7fd f801 	bl	8004f4c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8007f4a:	0032      	movs	r2, r6
 8007f4c:	0029      	movs	r1, r5
 8007f4e:	0038      	movs	r0, r7
 8007f50:	f7fd f826 	bl	8004fa0 <HAL_RTC_GetDate>

    _myTime.tm_hour = sTime.Hours;
 8007f54:	7823      	ldrb	r3, [r4, #0]

    _myTime.tm_mday = sDate.Date;
    _myTime.tm_mon = sDate.Month;
    _myTime.tm_year = sDate.Year + 2000 - 1900;

	return mktime(&_myTime);
 8007f56:	a807      	add	r0, sp, #28
    _myTime.tm_hour = sTime.Hours;
 8007f58:	9309      	str	r3, [sp, #36]	; 0x24
    _myTime.tm_min = sTime.Minutes;
 8007f5a:	7863      	ldrb	r3, [r4, #1]
 8007f5c:	9308      	str	r3, [sp, #32]
    _myTime.tm_sec = sTime.Seconds;
 8007f5e:	78a3      	ldrb	r3, [r4, #2]
 8007f60:	9307      	str	r3, [sp, #28]
    _myTime.tm_mday = sDate.Date;
 8007f62:	78ab      	ldrb	r3, [r5, #2]
 8007f64:	930a      	str	r3, [sp, #40]	; 0x28
    _myTime.tm_mon = sDate.Month;
 8007f66:	786b      	ldrb	r3, [r5, #1]
 8007f68:	930b      	str	r3, [sp, #44]	; 0x2c
    _myTime.tm_year = sDate.Year + 2000 - 1900;
 8007f6a:	78eb      	ldrb	r3, [r5, #3]
 8007f6c:	3364      	adds	r3, #100	; 0x64
 8007f6e:	930c      	str	r3, [sp, #48]	; 0x30
	return mktime(&_myTime);
 8007f70:	f000 fb0c 	bl	800858c <mktime>
}
 8007f74:	b011      	add	sp, #68	; 0x44
 8007f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f78:	20000458 	.word	0x20000458

08007f7c <RTC_EpochToHuman>:
{
    return mktime(&_t);
}

struct tm RTC_EpochToHuman(time_t _epoch)
{
 8007f7c:	b530      	push	{r4, r5, lr}
 8007f7e:	b08d      	sub	sp, #52	; 0x34
 8007f80:	0005      	movs	r5, r0
    struct tm _t;
    memcpy(&_t, localtime((const time_t*)(&_epoch)), sizeof(_t));
 8007f82:	a801      	add	r0, sp, #4
{
 8007f84:	9101      	str	r1, [sp, #4]
    memcpy(&_t, localtime((const time_t*)(&_epoch)), sizeof(_t));
 8007f86:	f000 f90d 	bl	80081a4 <localtime>
 8007f8a:	ac03      	add	r4, sp, #12
 8007f8c:	0001      	movs	r1, r0
 8007f8e:	2224      	movs	r2, #36	; 0x24
 8007f90:	0020      	movs	r0, r4
 8007f92:	f000 fa1d 	bl	80083d0 <memcpy>
    return _t;
 8007f96:	002b      	movs	r3, r5
 8007f98:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007f9a:	c307      	stmia	r3!, {r0, r1, r2}
 8007f9c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007f9e:	c307      	stmia	r3!, {r0, r1, r2}
 8007fa0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007fa2:	c307      	stmia	r3!, {r0, r1, r2}
}
 8007fa4:	0028      	movs	r0, r5
 8007fa6:	b00d      	add	sp, #52	; 0x34
 8007fa8:	bd30      	pop	{r4, r5, pc}
	...

08007fac <RTC_SetTime>:
{
 8007fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fae:	0007      	movs	r7, r0
    RTC_DateTypeDef sDate = {0};
 8007fb0:	2600      	movs	r6, #0
{
 8007fb2:	b093      	sub	sp, #76	; 0x4c
    RTC_TimeTypeDef sTime = {0};
 8007fb4:	ac04      	add	r4, sp, #16
 8007fb6:	2214      	movs	r2, #20
 8007fb8:	2100      	movs	r1, #0
 8007fba:	0020      	movs	r0, r4
 8007fbc:	f000 fa11 	bl	80083e2 <memset>
    struct tm _myTime = RTC_EpochToHuman(_epoch);
 8007fc0:	0039      	movs	r1, r7
 8007fc2:	a809      	add	r0, sp, #36	; 0x24
    RTC_DateTypeDef sDate = {0};
 8007fc4:	9603      	str	r6, [sp, #12]
    struct tm _myTime = RTC_EpochToHuman(_epoch);
 8007fc6:	f7ff ffd9 	bl	8007f7c <RTC_EpochToHuman>
    sTime.Hours = _myTime.tm_hour;
 8007fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    RTC_DateTypeDef sDate = {0};
 8007fcc:	ad03      	add	r5, sp, #12
    sTime.Hours = _myTime.tm_hour;
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	466b      	mov	r3, sp
 8007fd2:	791b      	ldrb	r3, [r3, #4]
    sDate.Year = (_myTime.tm_year) % 100;
 8007fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
    sTime.Hours = _myTime.tm_hour;
 8007fd6:	7023      	strb	r3, [r4, #0]
    sTime.Minutes = _myTime.tm_min;
 8007fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    sDate.Year = (_myTime.tm_year) % 100;
 8007fda:	2164      	movs	r1, #100	; 0x64
    sTime.Minutes = _myTime.tm_min;
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	466b      	mov	r3, sp
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	7063      	strb	r3, [r4, #1]
    sTime.Seconds = _myTime.tm_sec;
 8007fe4:	ab02      	add	r3, sp, #8
 8007fe6:	7f1b      	ldrb	r3, [r3, #28]
 8007fe8:	70a3      	strb	r3, [r4, #2]
    sDate.Date = _myTime.tm_mday;
 8007fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	466b      	mov	r3, sp
 8007ff0:	791b      	ldrb	r3, [r3, #4]
 8007ff2:	70ab      	strb	r3, [r5, #2]
    sDate.Month = _myTime.tm_mon;
 8007ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	466b      	mov	r3, sp
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	706b      	strb	r3, [r5, #1]
    sDate.Year = (_myTime.tm_year) % 100;
 8007ffe:	f7f8 fa19 	bl	8000434 <__aeabi_idivmod>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8008002:	4f07      	ldr	r7, [pc, #28]	; (8008020 <RTC_SetTime+0x74>)
    sDate.Year = (_myTime.tm_year) % 100;
 8008004:	70e9      	strb	r1, [r5, #3]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8008006:	0032      	movs	r2, r6
 8008008:	0021      	movs	r1, r4
 800800a:	0038      	movs	r0, r7
 800800c:	f7fc fde2 	bl	8004bd4 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8008010:	0032      	movs	r2, r6
 8008012:	0029      	movs	r1, r5
 8008014:	0038      	movs	r0, r7
 8008016:	f7fc fe5b 	bl	8004cd0 <HAL_RTC_SetDate>
}
 800801a:	b013      	add	sp, #76	; 0x4c
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	20000458 	.word	0x20000458

08008024 <RTC_SetAlarmEpoch>:
{
 8008024:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8008026:	2680      	movs	r6, #128	; 0x80
	RTC_TimeTypeDef _sTime = {0};
 8008028:	2514      	movs	r5, #20
{
 800802a:	0007      	movs	r7, r0
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800802c:	4c18      	ldr	r4, [pc, #96]	; (8008090 <RTC_SetAlarmEpoch+0x6c>)
{
 800802e:	b09b      	sub	sp, #108	; 0x6c
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8008030:	0076      	lsls	r6, r6, #1
{
 8008032:	9101      	str	r1, [sp, #4]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8008034:	0020      	movs	r0, r4
 8008036:	0031      	movs	r1, r6
 8008038:	f7fc fc9e 	bl	8004978 <HAL_RTC_DeactivateAlarm>
	RTC_AlarmTypeDef _sAlarm = {0};
 800803c:	2228      	movs	r2, #40	; 0x28
 800803e:	2100      	movs	r1, #0
 8008040:	a810      	add	r0, sp, #64	; 0x40
 8008042:	f000 f9ce 	bl	80083e2 <memset>
	RTC_TimeTypeDef _sTime = {0};
 8008046:	002a      	movs	r2, r5
 8008048:	2100      	movs	r1, #0
 800804a:	a802      	add	r0, sp, #8
 800804c:	f000 f9c9 	bl	80083e2 <memset>
	struct tm _myTime = RTC_EpochToHuman(_alarmEpoch);
 8008050:	0039      	movs	r1, r7
 8008052:	a807      	add	r0, sp, #28
 8008054:	f7ff ff92 	bl	8007f7c <RTC_EpochToHuman>
	_sAlarm.AlarmDateWeekDay = _myTime.tm_mday;
 8008058:	2139      	movs	r1, #57	; 0x39
	_sTime.Hours = _myTime.tm_hour;
 800805a:	9a09      	ldr	r2, [sp, #36]	; 0x24
	_sAlarm.AlarmDateWeekDay = _myTime.tm_mday;
 800805c:	af02      	add	r7, sp, #8
	_sTime.Minutes = _myTime.tm_min;
 800805e:	9b08      	ldr	r3, [sp, #32]
	_sAlarm.AlarmDateWeekDay = _myTime.tm_mday;
 8008060:	980a      	ldr	r0, [sp, #40]	; 0x28
    _sAlarm.AlarmTime = _sTime;
 8008062:	703a      	strb	r2, [r7, #0]
 8008064:	7d3a      	ldrb	r2, [r7, #20]
	_sAlarm.AlarmDateWeekDay = _myTime.tm_mday;
 8008066:	19c9      	adds	r1, r1, r7
 8008068:	77c8      	strb	r0, [r1, #31]
    _sAlarm.AlarmTime = _sTime;
 800806a:	707b      	strb	r3, [r7, #1]
 800806c:	0039      	movs	r1, r7
 800806e:	70ba      	strb	r2, [r7, #2]
 8008070:	a810      	add	r0, sp, #64	; 0x40
 8008072:	002a      	movs	r2, r5
 8008074:	f000 f9ac 	bl	80083d0 <memcpy>
    _sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8008078:	2200      	movs	r2, #0
    _sAlarm.AlarmMask = _mask;
 800807a:	9b01      	ldr	r3, [sp, #4]
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
 800807c:	a910      	add	r1, sp, #64	; 0x40
 800807e:	0020      	movs	r0, r4
    _sAlarm.AlarmMask = _mask;
 8008080:	9315      	str	r3, [sp, #84]	; 0x54
    _sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8008082:	9216      	str	r2, [sp, #88]	; 0x58
    _sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8008084:	9217      	str	r2, [sp, #92]	; 0x5c
    _sAlarm.Alarm = RTC_ALARM_A;
 8008086:	9619      	str	r6, [sp, #100]	; 0x64
    HAL_RTC_SetAlarm_IT(&hrtc, &_sAlarm, RTC_FORMAT_BIN);
 8008088:	f7fc fe8e 	bl	8004da8 <HAL_RTC_SetAlarm_IT>
}
 800808c:	b01b      	add	sp, #108	; 0x6c
 800808e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008090:	20000458 	.word	0x20000458

08008094 <Sleep_LightSleep>:
#include "sleep.h"

void Sleep_LightSleep()
{
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_PWR_DisablePVD();
 8008096:	f7fb ffad 	bl	8003ff4 <HAL_PWR_DisablePVD>
	HAL_PWREx_EnableUltraLowPower();
 800809a:	f7fb ffdf 	bl	800405c <HAL_PWREx_EnableUltraLowPower>

	// Disable HAL_Tick (it triggers every 1ms, even from sleep)
	HAL_SuspendTick();
 800809e:	f7fa ffa3 	bl	8002fe8 <HAL_SuspendTick>

	// Disable all unused periph. in sleep mode
	HAL_I2C_DeInit(&hi2c1);
 80080a2:	4f12      	ldr	r7, [pc, #72]	; (80080ec <Sleep_LightSleep+0x58>)
 80080a4:	0038      	movs	r0, r7
 80080a6:	f7fb fe09 	bl	8003cbc <HAL_I2C_DeInit>
	HAL_SPI_DeInit(&hspi1);
 80080aa:	4e11      	ldr	r6, [pc, #68]	; (80080f0 <Sleep_LightSleep+0x5c>)
 80080ac:	0030      	movs	r0, r6
 80080ae:	f7fd f867 	bl	8005180 <HAL_SPI_DeInit>
	HAL_UART_DeInit(&huart2);
 80080b2:	4d10      	ldr	r5, [pc, #64]	; (80080f4 <Sleep_LightSleep+0x60>)
 80080b4:	0028      	movs	r0, r5
 80080b6:	f7fd fb64 	bl	8005782 <HAL_UART_DeInit>
	HAL_ADC_DeInit(&hadc);
 80080ba:	4c0f      	ldr	r4, [pc, #60]	; (80080f8 <Sleep_LightSleep+0x64>)
 80080bc:	0020      	movs	r0, r4
 80080be:	f7fb f927 	bl	8003310 <HAL_ADC_DeInit>

	// Enter "light sleep" mode and wait for Interrupt to wake up (WFI - Wait For Interrupt)
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80080c2:	2101      	movs	r1, #1
 80080c4:	0008      	movs	r0, r1
 80080c6:	f7fb ff9d 	bl	8004004 <HAL_PWR_EnterSTOPMode>

	// Recover from "light sleep" mode

	// First set up all clock once again
	SystemClock_Config();
 80080ca:	f7fd fd9d 	bl	8005c08 <SystemClock_Config>

	// Re-activate HAL_Tick
	HAL_ResumeTick();
 80080ce:	f7fa ff93 	bl	8002ff8 <HAL_ResumeTick>

	// Re-Init all prev. disabled periph.
	HAL_I2C_Init(&hi2c1);
 80080d2:	0038      	movs	r0, r7
 80080d4:	f7fb fd9c 	bl	8003c10 <HAL_I2C_Init>
	HAL_SPI_Init(&hspi1);
 80080d8:	0030      	movs	r0, r6
 80080da:	f7fd f811 	bl	8005100 <HAL_SPI_Init>
	HAL_UART_Init(&huart2);
 80080de:	0028      	movs	r0, r5
 80080e0:	f7fd fd60 	bl	8005ba4 <HAL_UART_Init>
	HAL_ADC_Init(&hadc);
 80080e4:	0020      	movs	r0, r4
 80080e6:	f7fb f83b 	bl	8003160 <HAL_ADC_Init>
}
 80080ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ec:	20000378 	.word	0x20000378
 80080f0:	200004cc 	.word	0x200004cc
 80080f4:	20000530 	.word	0x20000530
 80080f8:	200005b4 	.word	0x200005b4

080080fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80080fc:	480d      	ldr	r0, [pc, #52]	; (8008134 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80080fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008100:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008102:	e003      	b.n	800810c <LoopCopyDataInit>

08008104 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008104:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8008106:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008108:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800810a:	3104      	adds	r1, #4

0800810c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800810c:	480b      	ldr	r0, [pc, #44]	; (800813c <LoopForever+0xa>)
  ldr  r3, =_edata
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <LoopForever+0xe>)
  adds  r2, r0, r1
 8008110:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008112:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008114:	d3f6      	bcc.n	8008104 <CopyDataInit>
  ldr  r2, =_sbss
 8008116:	4a0b      	ldr	r2, [pc, #44]	; (8008144 <LoopForever+0x12>)
  b  LoopFillZerobss
 8008118:	e002      	b.n	8008120 <LoopFillZerobss>

0800811a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800811a:	2300      	movs	r3, #0
  str  r3, [r2]
 800811c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800811e:	3204      	adds	r2, #4

08008120 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8008120:	4b09      	ldr	r3, [pc, #36]	; (8008148 <LoopForever+0x16>)
  cmp  r2, r3
 8008122:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008124:	d3f9      	bcc.n	800811a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008126:	f7fe fe4b 	bl	8006dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800812a:	f000 f817 	bl	800815c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800812e:	f7fd ffdb 	bl	80060e8 <main>

08008132 <LoopForever>:

LoopForever:
    b LoopForever
 8008132:	e7fe      	b.n	8008132 <LoopForever>
   ldr   r0, =_estack
 8008134:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8008138:	0800a7bc 	.word	0x0800a7bc
  ldr  r0, =_sdata
 800813c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008140:	20000288 	.word	0x20000288
  ldr  r2, =_sbss
 8008144:	20000288 	.word	0x20000288
  ldr  r3, = _ebss
 8008148:	20000618 	.word	0x20000618

0800814c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800814c:	e7fe      	b.n	800814c <ADC1_COMP_IRQHandler>
	...

08008150 <__errno>:
 8008150:	4b01      	ldr	r3, [pc, #4]	; (8008158 <__errno+0x8>)
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	4770      	bx	lr
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	20000070 	.word	0x20000070

0800815c <__libc_init_array>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	2600      	movs	r6, #0
 8008160:	4d0c      	ldr	r5, [pc, #48]	; (8008194 <__libc_init_array+0x38>)
 8008162:	4c0d      	ldr	r4, [pc, #52]	; (8008198 <__libc_init_array+0x3c>)
 8008164:	1b64      	subs	r4, r4, r5
 8008166:	10a4      	asrs	r4, r4, #2
 8008168:	42a6      	cmp	r6, r4
 800816a:	d109      	bne.n	8008180 <__libc_init_array+0x24>
 800816c:	2600      	movs	r6, #0
 800816e:	f002 f8b5 	bl	800a2dc <_init>
 8008172:	4d0a      	ldr	r5, [pc, #40]	; (800819c <__libc_init_array+0x40>)
 8008174:	4c0a      	ldr	r4, [pc, #40]	; (80081a0 <__libc_init_array+0x44>)
 8008176:	1b64      	subs	r4, r4, r5
 8008178:	10a4      	asrs	r4, r4, #2
 800817a:	42a6      	cmp	r6, r4
 800817c:	d105      	bne.n	800818a <__libc_init_array+0x2e>
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	00b3      	lsls	r3, r6, #2
 8008182:	58eb      	ldr	r3, [r5, r3]
 8008184:	4798      	blx	r3
 8008186:	3601      	adds	r6, #1
 8008188:	e7ee      	b.n	8008168 <__libc_init_array+0xc>
 800818a:	00b3      	lsls	r3, r6, #2
 800818c:	58eb      	ldr	r3, [r5, r3]
 800818e:	4798      	blx	r3
 8008190:	3601      	adds	r6, #1
 8008192:	e7f2      	b.n	800817a <__libc_init_array+0x1e>
 8008194:	0800a7b4 	.word	0x0800a7b4
 8008198:	0800a7b4 	.word	0x0800a7b4
 800819c:	0800a7b4 	.word	0x0800a7b4
 80081a0:	0800a7b8 	.word	0x0800a7b8

080081a4 <localtime>:
 80081a4:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <localtime+0x20>)
 80081a6:	b570      	push	{r4, r5, r6, lr}
 80081a8:	681c      	ldr	r4, [r3, #0]
 80081aa:	0005      	movs	r5, r0
 80081ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <localtime+0x16>
 80081b2:	2024      	movs	r0, #36	; 0x24
 80081b4:	f000 f8f8 	bl	80083a8 <malloc>
 80081b8:	63e0      	str	r0, [r4, #60]	; 0x3c
 80081ba:	0028      	movs	r0, r5
 80081bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80081be:	f000 f803 	bl	80081c8 <localtime_r>
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
 80081c4:	20000070 	.word	0x20000070

080081c8 <localtime_r>:
 80081c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ca:	000c      	movs	r4, r1
 80081cc:	0007      	movs	r7, r0
 80081ce:	f000 fed7 	bl	8008f80 <__gettzinfo>
 80081d2:	0021      	movs	r1, r4
 80081d4:	0005      	movs	r5, r0
 80081d6:	0038      	movs	r0, r7
 80081d8:	f000 fed6 	bl	8008f88 <gmtime_r>
 80081dc:	4a6e      	ldr	r2, [pc, #440]	; (8008398 <localtime_r+0x1d0>)
 80081de:	6943      	ldr	r3, [r0, #20]
 80081e0:	0004      	movs	r4, r0
 80081e2:	189e      	adds	r6, r3, r2
 80081e4:	07b3      	lsls	r3, r6, #30
 80081e6:	d106      	bne.n	80081f6 <localtime_r+0x2e>
 80081e8:	2164      	movs	r1, #100	; 0x64
 80081ea:	0030      	movs	r0, r6
 80081ec:	f7f8 f922 	bl	8000434 <__aeabi_idivmod>
 80081f0:	2301      	movs	r3, #1
 80081f2:	2900      	cmp	r1, #0
 80081f4:	d106      	bne.n	8008204 <localtime_r+0x3c>
 80081f6:	21c8      	movs	r1, #200	; 0xc8
 80081f8:	0030      	movs	r0, r6
 80081fa:	0049      	lsls	r1, r1, #1
 80081fc:	f7f8 f91a 	bl	8000434 <__aeabi_idivmod>
 8008200:	424b      	negs	r3, r1
 8008202:	414b      	adcs	r3, r1
 8008204:	2130      	movs	r1, #48	; 0x30
 8008206:	434b      	muls	r3, r1
 8008208:	4964      	ldr	r1, [pc, #400]	; (800839c <localtime_r+0x1d4>)
 800820a:	185b      	adds	r3, r3, r1
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	f000 fcd1 	bl	8008bb4 <__tz_lock>
 8008212:	f000 fcd1 	bl	8008bb8 <_tzset_unlocked>
 8008216:	4b62      	ldr	r3, [pc, #392]	; (80083a0 <localtime_r+0x1d8>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00d      	beq.n	800823a <localtime_r+0x72>
 800821e:	686b      	ldr	r3, [r5, #4]
 8008220:	429e      	cmp	r6, r3
 8008222:	d158      	bne.n	80082d6 <localtime_r+0x10e>
 8008224:	6829      	ldr	r1, [r5, #0]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	69e8      	ldr	r0, [r5, #28]
 800822a:	2900      	cmp	r1, #0
 800822c:	d15b      	bne.n	80082e6 <localtime_r+0x11e>
 800822e:	2301      	movs	r3, #1
 8008230:	4282      	cmp	r2, r0
 8008232:	da02      	bge.n	800823a <localtime_r+0x72>
 8008234:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8008236:	4282      	cmp	r2, r0
 8008238:	da5d      	bge.n	80082f6 <localtime_r+0x12e>
 800823a:	6223      	str	r3, [r4, #32]
 800823c:	6a23      	ldr	r3, [r4, #32]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d15b      	bne.n	80082fa <localtime_r+0x132>
 8008242:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 8008244:	21e1      	movs	r1, #225	; 0xe1
 8008246:	0038      	movs	r0, r7
 8008248:	0109      	lsls	r1, r1, #4
 800824a:	f7f8 f8f3 	bl	8000434 <__aeabi_idivmod>
 800824e:	000e      	movs	r6, r1
 8008250:	213c      	movs	r1, #60	; 0x3c
 8008252:	0030      	movs	r0, r6
 8008254:	f7f8 f8ee 	bl	8000434 <__aeabi_idivmod>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	0030      	movs	r0, r6
 800825c:	1a5d      	subs	r5, r3, r1
 800825e:	6025      	str	r5, [r4, #0]
 8008260:	213c      	movs	r1, #60	; 0x3c
 8008262:	f7f8 f801 	bl	8000268 <__divsi3>
 8008266:	21e1      	movs	r1, #225	; 0xe1
 8008268:	6863      	ldr	r3, [r4, #4]
 800826a:	0109      	lsls	r1, r1, #4
 800826c:	1a1e      	subs	r6, r3, r0
 800826e:	6066      	str	r6, [r4, #4]
 8008270:	0038      	movs	r0, r7
 8008272:	f7f7 fff9 	bl	8000268 <__divsi3>
 8008276:	68a3      	ldr	r3, [r4, #8]
 8008278:	1a1b      	subs	r3, r3, r0
 800827a:	60a3      	str	r3, [r4, #8]
 800827c:	2d3b      	cmp	r5, #59	; 0x3b
 800827e:	dd3e      	ble.n	80082fe <localtime_r+0x136>
 8008280:	3601      	adds	r6, #1
 8008282:	6066      	str	r6, [r4, #4]
 8008284:	3d3c      	subs	r5, #60	; 0x3c
 8008286:	6025      	str	r5, [r4, #0]
 8008288:	6862      	ldr	r2, [r4, #4]
 800828a:	2a3b      	cmp	r2, #59	; 0x3b
 800828c:	dd3d      	ble.n	800830a <localtime_r+0x142>
 800828e:	3301      	adds	r3, #1
 8008290:	60a3      	str	r3, [r4, #8]
 8008292:	3a3c      	subs	r2, #60	; 0x3c
 8008294:	6062      	str	r2, [r4, #4]
 8008296:	68a2      	ldr	r2, [r4, #8]
 8008298:	2a17      	cmp	r2, #23
 800829a:	dd45      	ble.n	8008328 <localtime_r+0x160>
 800829c:	69e3      	ldr	r3, [r4, #28]
 800829e:	3301      	adds	r3, #1
 80082a0:	61e3      	str	r3, [r4, #28]
 80082a2:	69a3      	ldr	r3, [r4, #24]
 80082a4:	3301      	adds	r3, #1
 80082a6:	2b06      	cmp	r3, #6
 80082a8:	dc35      	bgt.n	8008316 <localtime_r+0x14e>
 80082aa:	61a3      	str	r3, [r4, #24]
 80082ac:	3a18      	subs	r2, #24
 80082ae:	68e3      	ldr	r3, [r4, #12]
 80082b0:	60a2      	str	r2, [r4, #8]
 80082b2:	6922      	ldr	r2, [r4, #16]
 80082b4:	3301      	adds	r3, #1
 80082b6:	9801      	ldr	r0, [sp, #4]
 80082b8:	60e3      	str	r3, [r4, #12]
 80082ba:	0091      	lsls	r1, r2, #2
 80082bc:	5809      	ldr	r1, [r1, r0]
 80082be:	428b      	cmp	r3, r1
 80082c0:	dd05      	ble.n	80082ce <localtime_r+0x106>
 80082c2:	1a5b      	subs	r3, r3, r1
 80082c4:	3201      	adds	r2, #1
 80082c6:	60e3      	str	r3, [r4, #12]
 80082c8:	2a0c      	cmp	r2, #12
 80082ca:	d026      	beq.n	800831a <localtime_r+0x152>
 80082cc:	6122      	str	r2, [r4, #16]
 80082ce:	f000 fc72 	bl	8008bb6 <__tz_unlock>
 80082d2:	0020      	movs	r0, r4
 80082d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082d6:	0030      	movs	r0, r6
 80082d8:	f000 fbbe 	bl	8008a58 <__tzcalc_limits>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d1a1      	bne.n	8008224 <localtime_r+0x5c>
 80082e0:	2301      	movs	r3, #1
 80082e2:	425b      	negs	r3, r3
 80082e4:	e7a9      	b.n	800823a <localtime_r+0x72>
 80082e6:	2300      	movs	r3, #0
 80082e8:	4282      	cmp	r2, r0
 80082ea:	dba6      	blt.n	800823a <localtime_r+0x72>
 80082ec:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80082ee:	2101      	movs	r1, #1
 80082f0:	4282      	cmp	r2, r0
 80082f2:	db00      	blt.n	80082f6 <localtime_r+0x12e>
 80082f4:	0019      	movs	r1, r3
 80082f6:	000b      	movs	r3, r1
 80082f8:	e79f      	b.n	800823a <localtime_r+0x72>
 80082fa:	6a2f      	ldr	r7, [r5, #32]
 80082fc:	e7a2      	b.n	8008244 <localtime_r+0x7c>
 80082fe:	2d00      	cmp	r5, #0
 8008300:	dac2      	bge.n	8008288 <localtime_r+0xc0>
 8008302:	3e01      	subs	r6, #1
 8008304:	6066      	str	r6, [r4, #4]
 8008306:	353c      	adds	r5, #60	; 0x3c
 8008308:	e7bd      	b.n	8008286 <localtime_r+0xbe>
 800830a:	2a00      	cmp	r2, #0
 800830c:	dac3      	bge.n	8008296 <localtime_r+0xce>
 800830e:	3b01      	subs	r3, #1
 8008310:	60a3      	str	r3, [r4, #8]
 8008312:	323c      	adds	r2, #60	; 0x3c
 8008314:	e7be      	b.n	8008294 <localtime_r+0xcc>
 8008316:	2300      	movs	r3, #0
 8008318:	e7c7      	b.n	80082aa <localtime_r+0xe2>
 800831a:	2200      	movs	r2, #0
 800831c:	6963      	ldr	r3, [r4, #20]
 800831e:	6122      	str	r2, [r4, #16]
 8008320:	3301      	adds	r3, #1
 8008322:	6163      	str	r3, [r4, #20]
 8008324:	61e2      	str	r2, [r4, #28]
 8008326:	e7d2      	b.n	80082ce <localtime_r+0x106>
 8008328:	2a00      	cmp	r2, #0
 800832a:	dad0      	bge.n	80082ce <localtime_r+0x106>
 800832c:	69e3      	ldr	r3, [r4, #28]
 800832e:	3b01      	subs	r3, #1
 8008330:	61e3      	str	r3, [r4, #28]
 8008332:	69a3      	ldr	r3, [r4, #24]
 8008334:	3b01      	subs	r3, #1
 8008336:	d411      	bmi.n	800835c <localtime_r+0x194>
 8008338:	61a3      	str	r3, [r4, #24]
 800833a:	68e3      	ldr	r3, [r4, #12]
 800833c:	3218      	adds	r2, #24
 800833e:	1e59      	subs	r1, r3, #1
 8008340:	60e1      	str	r1, [r4, #12]
 8008342:	60a2      	str	r2, [r4, #8]
 8008344:	2900      	cmp	r1, #0
 8008346:	d1c2      	bne.n	80082ce <localtime_r+0x106>
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	3b01      	subs	r3, #1
 800834c:	d408      	bmi.n	8008360 <localtime_r+0x198>
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	9a01      	ldr	r2, [sp, #4]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	589b      	ldr	r3, [r3, r2]
 8008358:	60e3      	str	r3, [r4, #12]
 800835a:	e7b8      	b.n	80082ce <localtime_r+0x106>
 800835c:	2306      	movs	r3, #6
 800835e:	e7eb      	b.n	8008338 <localtime_r+0x170>
 8008360:	230b      	movs	r3, #11
 8008362:	6965      	ldr	r5, [r4, #20]
 8008364:	4a0f      	ldr	r2, [pc, #60]	; (80083a4 <localtime_r+0x1dc>)
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	1e6b      	subs	r3, r5, #1
 800836a:	6163      	str	r3, [r4, #20]
 800836c:	18ad      	adds	r5, r5, r2
 800836e:	079b      	lsls	r3, r3, #30
 8008370:	d106      	bne.n	8008380 <localtime_r+0x1b8>
 8008372:	2164      	movs	r1, #100	; 0x64
 8008374:	0028      	movs	r0, r5
 8008376:	f7f8 f85d 	bl	8000434 <__aeabi_idivmod>
 800837a:	2301      	movs	r3, #1
 800837c:	2900      	cmp	r1, #0
 800837e:	d106      	bne.n	800838e <localtime_r+0x1c6>
 8008380:	21c8      	movs	r1, #200	; 0xc8
 8008382:	0028      	movs	r0, r5
 8008384:	0049      	lsls	r1, r1, #1
 8008386:	f7f8 f855 	bl	8000434 <__aeabi_idivmod>
 800838a:	424b      	negs	r3, r1
 800838c:	414b      	adcs	r3, r1
 800838e:	336d      	adds	r3, #109	; 0x6d
 8008390:	33ff      	adds	r3, #255	; 0xff
 8008392:	61e3      	str	r3, [r4, #28]
 8008394:	e7dc      	b.n	8008350 <localtime_r+0x188>
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	0000076c 	.word	0x0000076c
 800839c:	0800a558 	.word	0x0800a558
 80083a0:	20000350 	.word	0x20000350
 80083a4:	0000076b 	.word	0x0000076b

080083a8 <malloc>:
 80083a8:	b510      	push	{r4, lr}
 80083aa:	4b03      	ldr	r3, [pc, #12]	; (80083b8 <malloc+0x10>)
 80083ac:	0001      	movs	r1, r0
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	f000 fac0 	bl	8008934 <_malloc_r>
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	46c0      	nop			; (mov r8, r8)
 80083b8:	20000070 	.word	0x20000070

080083bc <free>:
 80083bc:	b510      	push	{r4, lr}
 80083be:	4b03      	ldr	r3, [pc, #12]	; (80083cc <free+0x10>)
 80083c0:	0001      	movs	r1, r0
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	f000 fa6c 	bl	80088a0 <_free_r>
 80083c8:	bd10      	pop	{r4, pc}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	20000070 	.word	0x20000070

080083d0 <memcpy>:
 80083d0:	2300      	movs	r3, #0
 80083d2:	b510      	push	{r4, lr}
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d100      	bne.n	80083da <memcpy+0xa>
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	5ccc      	ldrb	r4, [r1, r3]
 80083dc:	54c4      	strb	r4, [r0, r3]
 80083de:	3301      	adds	r3, #1
 80083e0:	e7f8      	b.n	80083d4 <memcpy+0x4>

080083e2 <memset>:
 80083e2:	0003      	movs	r3, r0
 80083e4:	1882      	adds	r2, r0, r2
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d100      	bne.n	80083ec <memset+0xa>
 80083ea:	4770      	bx	lr
 80083ec:	7019      	strb	r1, [r3, #0]
 80083ee:	3301      	adds	r3, #1
 80083f0:	e7f9      	b.n	80083e6 <memset+0x4>
	...

080083f4 <validate_structure>:
 80083f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083f6:	6801      	ldr	r1, [r0, #0]
 80083f8:	0004      	movs	r4, r0
 80083fa:	293b      	cmp	r1, #59	; 0x3b
 80083fc:	d90b      	bls.n	8008416 <validate_structure+0x22>
 80083fe:	223c      	movs	r2, #60	; 0x3c
 8008400:	4668      	mov	r0, sp
 8008402:	f000 fd5f 	bl	8008ec4 <div>
 8008406:	6863      	ldr	r3, [r4, #4]
 8008408:	9900      	ldr	r1, [sp, #0]
 800840a:	9a01      	ldr	r2, [sp, #4]
 800840c:	185b      	adds	r3, r3, r1
 800840e:	6063      	str	r3, [r4, #4]
 8008410:	2a00      	cmp	r2, #0
 8008412:	db6c      	blt.n	80084ee <validate_structure+0xfa>
 8008414:	6022      	str	r2, [r4, #0]
 8008416:	6861      	ldr	r1, [r4, #4]
 8008418:	293b      	cmp	r1, #59	; 0x3b
 800841a:	d90b      	bls.n	8008434 <validate_structure+0x40>
 800841c:	223c      	movs	r2, #60	; 0x3c
 800841e:	4668      	mov	r0, sp
 8008420:	f000 fd50 	bl	8008ec4 <div>
 8008424:	68a3      	ldr	r3, [r4, #8]
 8008426:	9900      	ldr	r1, [sp, #0]
 8008428:	9a01      	ldr	r2, [sp, #4]
 800842a:	185b      	adds	r3, r3, r1
 800842c:	60a3      	str	r3, [r4, #8]
 800842e:	2a00      	cmp	r2, #0
 8008430:	db62      	blt.n	80084f8 <validate_structure+0x104>
 8008432:	6062      	str	r2, [r4, #4]
 8008434:	68a1      	ldr	r1, [r4, #8]
 8008436:	2917      	cmp	r1, #23
 8008438:	d90b      	bls.n	8008452 <validate_structure+0x5e>
 800843a:	2218      	movs	r2, #24
 800843c:	4668      	mov	r0, sp
 800843e:	f000 fd41 	bl	8008ec4 <div>
 8008442:	68e3      	ldr	r3, [r4, #12]
 8008444:	9900      	ldr	r1, [sp, #0]
 8008446:	9a01      	ldr	r2, [sp, #4]
 8008448:	185b      	adds	r3, r3, r1
 800844a:	60e3      	str	r3, [r4, #12]
 800844c:	2a00      	cmp	r2, #0
 800844e:	db58      	blt.n	8008502 <validate_structure+0x10e>
 8008450:	60a2      	str	r2, [r4, #8]
 8008452:	6921      	ldr	r1, [r4, #16]
 8008454:	290b      	cmp	r1, #11
 8008456:	d90b      	bls.n	8008470 <validate_structure+0x7c>
 8008458:	220c      	movs	r2, #12
 800845a:	4668      	mov	r0, sp
 800845c:	f000 fd32 	bl	8008ec4 <div>
 8008460:	6963      	ldr	r3, [r4, #20]
 8008462:	9900      	ldr	r1, [sp, #0]
 8008464:	9a01      	ldr	r2, [sp, #4]
 8008466:	185b      	adds	r3, r3, r1
 8008468:	6163      	str	r3, [r4, #20]
 800846a:	2a00      	cmp	r2, #0
 800846c:	db4e      	blt.n	800850c <validate_structure+0x118>
 800846e:	6122      	str	r2, [r4, #16]
 8008470:	6965      	ldr	r5, [r4, #20]
 8008472:	231c      	movs	r3, #28
 8008474:	07aa      	lsls	r2, r5, #30
 8008476:	d10f      	bne.n	8008498 <validate_structure+0xa4>
 8008478:	2164      	movs	r1, #100	; 0x64
 800847a:	0028      	movs	r0, r5
 800847c:	f7f7 ffda 	bl	8000434 <__aeabi_idivmod>
 8008480:	231d      	movs	r3, #29
 8008482:	2900      	cmp	r1, #0
 8008484:	d108      	bne.n	8008498 <validate_structure+0xa4>
 8008486:	4b3d      	ldr	r3, [pc, #244]	; (800857c <validate_structure+0x188>)
 8008488:	3191      	adds	r1, #145	; 0x91
 800848a:	18e8      	adds	r0, r5, r3
 800848c:	31ff      	adds	r1, #255	; 0xff
 800848e:	f7f7 ffd1 	bl	8000434 <__aeabi_idivmod>
 8008492:	424b      	negs	r3, r1
 8008494:	414b      	adcs	r3, r1
 8008496:	331c      	adds	r3, #28
 8008498:	68e2      	ldr	r2, [r4, #12]
 800849a:	2a00      	cmp	r2, #0
 800849c:	dd3b      	ble.n	8008516 <validate_structure+0x122>
 800849e:	2602      	movs	r6, #2
 80084a0:	4f37      	ldr	r7, [pc, #220]	; (8008580 <validate_structure+0x18c>)
 80084a2:	6921      	ldr	r1, [r4, #16]
 80084a4:	68e2      	ldr	r2, [r4, #12]
 80084a6:	2901      	cmp	r1, #1
 80084a8:	d061      	beq.n	800856e <validate_structure+0x17a>
 80084aa:	0088      	lsls	r0, r1, #2
 80084ac:	59c0      	ldr	r0, [r0, r7]
 80084ae:	4282      	cmp	r2, r0
 80084b0:	dd35      	ble.n	800851e <validate_structure+0x12a>
 80084b2:	1a12      	subs	r2, r2, r0
 80084b4:	3101      	adds	r1, #1
 80084b6:	60e2      	str	r2, [r4, #12]
 80084b8:	6121      	str	r1, [r4, #16]
 80084ba:	290c      	cmp	r1, #12
 80084bc:	d1f1      	bne.n	80084a2 <validate_structure+0xae>
 80084be:	2300      	movs	r3, #0
 80084c0:	6965      	ldr	r5, [r4, #20]
 80084c2:	6123      	str	r3, [r4, #16]
 80084c4:	1c68      	adds	r0, r5, #1
 80084c6:	6160      	str	r0, [r4, #20]
 80084c8:	331c      	adds	r3, #28
 80084ca:	0782      	lsls	r2, r0, #30
 80084cc:	d1e9      	bne.n	80084a2 <validate_structure+0xae>
 80084ce:	3158      	adds	r1, #88	; 0x58
 80084d0:	f7f7 ffb0 	bl	8000434 <__aeabi_idivmod>
 80084d4:	231d      	movs	r3, #29
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d1e3      	bne.n	80084a2 <validate_structure+0xae>
 80084da:	4b2a      	ldr	r3, [pc, #168]	; (8008584 <validate_structure+0x190>)
 80084dc:	3191      	adds	r1, #145	; 0x91
 80084de:	18e8      	adds	r0, r5, r3
 80084e0:	31ff      	adds	r1, #255	; 0xff
 80084e2:	f7f7 ffa7 	bl	8000434 <__aeabi_idivmod>
 80084e6:	424b      	negs	r3, r1
 80084e8:	414b      	adcs	r3, r1
 80084ea:	331c      	adds	r3, #28
 80084ec:	e7d9      	b.n	80084a2 <validate_structure+0xae>
 80084ee:	323c      	adds	r2, #60	; 0x3c
 80084f0:	3b01      	subs	r3, #1
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	6063      	str	r3, [r4, #4]
 80084f6:	e78e      	b.n	8008416 <validate_structure+0x22>
 80084f8:	323c      	adds	r2, #60	; 0x3c
 80084fa:	3b01      	subs	r3, #1
 80084fc:	6062      	str	r2, [r4, #4]
 80084fe:	60a3      	str	r3, [r4, #8]
 8008500:	e798      	b.n	8008434 <validate_structure+0x40>
 8008502:	3218      	adds	r2, #24
 8008504:	3b01      	subs	r3, #1
 8008506:	60a2      	str	r2, [r4, #8]
 8008508:	60e3      	str	r3, [r4, #12]
 800850a:	e7a2      	b.n	8008452 <validate_structure+0x5e>
 800850c:	320c      	adds	r2, #12
 800850e:	3b01      	subs	r3, #1
 8008510:	6122      	str	r2, [r4, #16]
 8008512:	6163      	str	r3, [r4, #20]
 8008514:	e7ac      	b.n	8008470 <validate_structure+0x7c>
 8008516:	271d      	movs	r7, #29
 8008518:	68e6      	ldr	r6, [r4, #12]
 800851a:	2e00      	cmp	r6, #0
 800851c:	dd00      	ble.n	8008520 <validate_structure+0x12c>
 800851e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008520:	6922      	ldr	r2, [r4, #16]
 8008522:	3a01      	subs	r2, #1
 8008524:	6122      	str	r2, [r4, #16]
 8008526:	3201      	adds	r2, #1
 8008528:	d117      	bne.n	800855a <validate_structure+0x166>
 800852a:	230b      	movs	r3, #11
 800852c:	2203      	movs	r2, #3
 800852e:	6965      	ldr	r5, [r4, #20]
 8008530:	6123      	str	r3, [r4, #16]
 8008532:	1e68      	subs	r0, r5, #1
 8008534:	6160      	str	r0, [r4, #20]
 8008536:	3311      	adds	r3, #17
 8008538:	4210      	tst	r0, r2
 800853a:	d10e      	bne.n	800855a <validate_structure+0x166>
 800853c:	2164      	movs	r1, #100	; 0x64
 800853e:	f7f7 ff79 	bl	8000434 <__aeabi_idivmod>
 8008542:	003b      	movs	r3, r7
 8008544:	2900      	cmp	r1, #0
 8008546:	d108      	bne.n	800855a <validate_structure+0x166>
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <validate_structure+0x194>)
 800854a:	3191      	adds	r1, #145	; 0x91
 800854c:	18e8      	adds	r0, r5, r3
 800854e:	31ff      	adds	r1, #255	; 0xff
 8008550:	f7f7 ff70 	bl	8000434 <__aeabi_idivmod>
 8008554:	424b      	negs	r3, r1
 8008556:	414b      	adcs	r3, r1
 8008558:	331c      	adds	r3, #28
 800855a:	6921      	ldr	r1, [r4, #16]
 800855c:	001a      	movs	r2, r3
 800855e:	2901      	cmp	r1, #1
 8008560:	d002      	beq.n	8008568 <validate_structure+0x174>
 8008562:	4a07      	ldr	r2, [pc, #28]	; (8008580 <validate_structure+0x18c>)
 8008564:	0089      	lsls	r1, r1, #2
 8008566:	588a      	ldr	r2, [r1, r2]
 8008568:	1996      	adds	r6, r2, r6
 800856a:	60e6      	str	r6, [r4, #12]
 800856c:	e7d4      	b.n	8008518 <validate_structure+0x124>
 800856e:	4293      	cmp	r3, r2
 8008570:	dad5      	bge.n	800851e <validate_structure+0x12a>
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	60e2      	str	r2, [r4, #12]
 8008576:	6126      	str	r6, [r4, #16]
 8008578:	e793      	b.n	80084a2 <validate_structure+0xae>
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	0000076c 	.word	0x0000076c
 8008580:	0800a4f8 	.word	0x0800a4f8
 8008584:	0000076d 	.word	0x0000076d
 8008588:	0000076b 	.word	0x0000076b

0800858c <mktime>:
 800858c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800858e:	b087      	sub	sp, #28
 8008590:	0004      	movs	r4, r0
 8008592:	f000 fcf5 	bl	8008f80 <__gettzinfo>
 8008596:	9004      	str	r0, [sp, #16]
 8008598:	0020      	movs	r0, r4
 800859a:	f7ff ff2b 	bl	80083f4 <validate_structure>
 800859e:	233c      	movs	r3, #60	; 0x3c
 80085a0:	6862      	ldr	r2, [r4, #4]
 80085a2:	68a1      	ldr	r1, [r4, #8]
 80085a4:	4353      	muls	r3, r2
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	6965      	ldr	r5, [r4, #20]
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	22e1      	movs	r2, #225	; 0xe1
 80085ae:	0112      	lsls	r2, r2, #4
 80085b0:	434a      	muls	r2, r1
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	68e2      	ldr	r2, [r4, #12]
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	1e50      	subs	r0, r2, #1
 80085bc:	4ab1      	ldr	r2, [pc, #708]	; (8008884 <mktime+0x2f8>)
 80085be:	0099      	lsls	r1, r3, #2
 80085c0:	588a      	ldr	r2, [r1, r2]
 80085c2:	1882      	adds	r2, r0, r2
 80085c4:	9201      	str	r2, [sp, #4]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	dd12      	ble.n	80085f0 <mktime+0x64>
 80085ca:	07ab      	lsls	r3, r5, #30
 80085cc:	d110      	bne.n	80085f0 <mktime+0x64>
 80085ce:	2164      	movs	r1, #100	; 0x64
 80085d0:	0028      	movs	r0, r5
 80085d2:	f7f7 ff2f 	bl	8000434 <__aeabi_idivmod>
 80085d6:	2900      	cmp	r1, #0
 80085d8:	d107      	bne.n	80085ea <mktime+0x5e>
 80085da:	4bab      	ldr	r3, [pc, #684]	; (8008888 <mktime+0x2fc>)
 80085dc:	3191      	adds	r1, #145	; 0x91
 80085de:	31ff      	adds	r1, #255	; 0xff
 80085e0:	18e8      	adds	r0, r5, r3
 80085e2:	f7f7 ff27 	bl	8000434 <__aeabi_idivmod>
 80085e6:	2900      	cmp	r1, #0
 80085e8:	d102      	bne.n	80085f0 <mktime+0x64>
 80085ea:	9b01      	ldr	r3, [sp, #4]
 80085ec:	3301      	adds	r3, #1
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	9b01      	ldr	r3, [sp, #4]
 80085f2:	4aa6      	ldr	r2, [pc, #664]	; (800888c <mktime+0x300>)
 80085f4:	61e3      	str	r3, [r4, #28]
 80085f6:	4ba6      	ldr	r3, [pc, #664]	; (8008890 <mktime+0x304>)
 80085f8:	18eb      	adds	r3, r5, r3
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d900      	bls.n	8008600 <mktime+0x74>
 80085fe:	e0f8      	b.n	80087f2 <mktime+0x266>
 8008600:	2346      	movs	r3, #70	; 0x46
 8008602:	9302      	str	r3, [sp, #8]
 8008604:	2d46      	cmp	r5, #70	; 0x46
 8008606:	dc00      	bgt.n	800860a <mktime+0x7e>
 8008608:	e072      	b.n	80086f0 <mktime+0x164>
 800860a:	27b7      	movs	r7, #183	; 0xb7
 800860c:	26c8      	movs	r6, #200	; 0xc8
 800860e:	007f      	lsls	r7, r7, #1
 8008610:	0076      	lsls	r6, r6, #1
 8008612:	2203      	movs	r2, #3
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	4213      	tst	r3, r2
 8008618:	d168      	bne.n	80086ec <mktime+0x160>
 800861a:	0018      	movs	r0, r3
 800861c:	2164      	movs	r1, #100	; 0x64
 800861e:	f7f7 ff09 	bl	8000434 <__aeabi_idivmod>
 8008622:	003b      	movs	r3, r7
 8008624:	2900      	cmp	r1, #0
 8008626:	d109      	bne.n	800863c <mktime+0xb0>
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	4a97      	ldr	r2, [pc, #604]	; (8008888 <mktime+0x2fc>)
 800862c:	0031      	movs	r1, r6
 800862e:	1898      	adds	r0, r3, r2
 8008630:	f7f7 ff00 	bl	8000434 <__aeabi_idivmod>
 8008634:	424b      	negs	r3, r1
 8008636:	414b      	adcs	r3, r1
 8008638:	336e      	adds	r3, #110	; 0x6e
 800863a:	33ff      	adds	r3, #255	; 0xff
 800863c:	9a01      	ldr	r2, [sp, #4]
 800863e:	18d3      	adds	r3, r2, r3
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	9b02      	ldr	r3, [sp, #8]
 8008644:	3301      	adds	r3, #1
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	429d      	cmp	r5, r3
 800864a:	d1e2      	bne.n	8008612 <mktime+0x86>
 800864c:	9a01      	ldr	r2, [sp, #4]
 800864e:	4b91      	ldr	r3, [pc, #580]	; (8008894 <mktime+0x308>)
 8008650:	4353      	muls	r3, r2
 8008652:	9a03      	ldr	r2, [sp, #12]
 8008654:	189b      	adds	r3, r3, r2
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	f000 faac 	bl	8008bb4 <__tz_lock>
 800865c:	f000 faac 	bl	8008bb8 <_tzset_unlocked>
 8008660:	4b8d      	ldr	r3, [pc, #564]	; (8008898 <mktime+0x30c>)
 8008662:	681d      	ldr	r5, [r3, #0]
 8008664:	2d00      	cmp	r5, #0
 8008666:	d100      	bne.n	800866a <mktime+0xde>
 8008668:	e107      	b.n	800887a <mktime+0x2ee>
 800866a:	6963      	ldr	r3, [r4, #20]
 800866c:	4a86      	ldr	r2, [pc, #536]	; (8008888 <mktime+0x2fc>)
 800866e:	6a26      	ldr	r6, [r4, #32]
 8008670:	1898      	adds	r0, r3, r2
 8008672:	2e00      	cmp	r6, #0
 8008674:	dd00      	ble.n	8008678 <mktime+0xec>
 8008676:	2601      	movs	r6, #1
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	4298      	cmp	r0, r3
 8008680:	d000      	beq.n	8008684 <mktime+0xf8>
 8008682:	e073      	b.n	800876c <mktime+0x1e0>
 8008684:	9b04      	ldr	r3, [sp, #16]
 8008686:	9d03      	ldr	r5, [sp, #12]
 8008688:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	1a1a      	subs	r2, r3, r0
 8008690:	9b04      	ldr	r3, [sp, #16]
 8008692:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	1acf      	subs	r7, r1, r3
 8008698:	42bd      	cmp	r5, r7
 800869a:	db00      	blt.n	800869e <mktime+0x112>
 800869c:	e06d      	b.n	800877a <mktime+0x1ee>
 800869e:	9904      	ldr	r1, [sp, #16]
 80086a0:	6809      	ldr	r1, [r1, #0]
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d100      	bne.n	80086a8 <mktime+0x11c>
 80086a6:	e06d      	b.n	8008784 <mktime+0x1f8>
 80086a8:	9903      	ldr	r1, [sp, #12]
 80086aa:	4291      	cmp	r1, r2
 80086ac:	da00      	bge.n	80086b0 <mktime+0x124>
 80086ae:	e0e1      	b.n	8008874 <mktime+0x2e8>
 80086b0:	2501      	movs	r5, #1
 80086b2:	42b9      	cmp	r1, r7
 80086b4:	db00      	blt.n	80086b8 <mktime+0x12c>
 80086b6:	2500      	movs	r5, #0
 80086b8:	2e00      	cmp	r6, #0
 80086ba:	db00      	blt.n	80086be <mktime+0x132>
 80086bc:	e0a0      	b.n	8008800 <mktime+0x274>
 80086be:	2d01      	cmp	r5, #1
 80086c0:	d000      	beq.n	80086c4 <mktime+0x138>
 80086c2:	e0da      	b.n	800887a <mktime+0x2ee>
 80086c4:	2501      	movs	r5, #1
 80086c6:	9b04      	ldr	r3, [sp, #16]
 80086c8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	199e      	adds	r6, r3, r6
 80086ce:	f000 fa72 	bl	8008bb6 <__tz_unlock>
 80086d2:	9801      	ldr	r0, [sp, #4]
 80086d4:	6225      	str	r5, [r4, #32]
 80086d6:	3004      	adds	r0, #4
 80086d8:	2107      	movs	r1, #7
 80086da:	f7f7 feab 	bl	8000434 <__aeabi_idivmod>
 80086de:	2900      	cmp	r1, #0
 80086e0:	da00      	bge.n	80086e4 <mktime+0x158>
 80086e2:	e084      	b.n	80087ee <mktime+0x262>
 80086e4:	61a1      	str	r1, [r4, #24]
 80086e6:	0030      	movs	r0, r6
 80086e8:	b007      	add	sp, #28
 80086ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ec:	236e      	movs	r3, #110	; 0x6e
 80086ee:	e7a4      	b.n	800863a <mktime+0xae>
 80086f0:	429d      	cmp	r5, r3
 80086f2:	d0ab      	beq.n	800864c <mktime+0xc0>
 80086f4:	2645      	movs	r6, #69	; 0x45
 80086f6:	2703      	movs	r7, #3
 80086f8:	42ae      	cmp	r6, r5
 80086fa:	dc17      	bgt.n	800872c <mktime+0x1a0>
 80086fc:	423d      	tst	r5, r7
 80086fe:	d130      	bne.n	8008762 <mktime+0x1d6>
 8008700:	2164      	movs	r1, #100	; 0x64
 8008702:	0028      	movs	r0, r5
 8008704:	f7f7 fe96 	bl	8000434 <__aeabi_idivmod>
 8008708:	2900      	cmp	r1, #0
 800870a:	d12c      	bne.n	8008766 <mktime+0x1da>
 800870c:	4b5e      	ldr	r3, [pc, #376]	; (8008888 <mktime+0x2fc>)
 800870e:	3191      	adds	r1, #145	; 0x91
 8008710:	18e8      	adds	r0, r5, r3
 8008712:	31ff      	adds	r1, #255	; 0xff
 8008714:	f7f7 fe8e 	bl	8000434 <__aeabi_idivmod>
 8008718:	000b      	movs	r3, r1
 800871a:	4259      	negs	r1, r3
 800871c:	4159      	adcs	r1, r3
 800871e:	316e      	adds	r1, #110	; 0x6e
 8008720:	31ff      	adds	r1, #255	; 0xff
 8008722:	9b01      	ldr	r3, [sp, #4]
 8008724:	9502      	str	r5, [sp, #8]
 8008726:	1a5b      	subs	r3, r3, r1
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	e78f      	b.n	800864c <mktime+0xc0>
 800872c:	423e      	tst	r6, r7
 800872e:	d116      	bne.n	800875e <mktime+0x1d2>
 8008730:	2164      	movs	r1, #100	; 0x64
 8008732:	0030      	movs	r0, r6
 8008734:	f7f7 fe7e 	bl	8000434 <__aeabi_idivmod>
 8008738:	23b7      	movs	r3, #183	; 0xb7
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	2900      	cmp	r1, #0
 800873e:	d109      	bne.n	8008754 <mktime+0x1c8>
 8008740:	4b51      	ldr	r3, [pc, #324]	; (8008888 <mktime+0x2fc>)
 8008742:	3191      	adds	r1, #145	; 0x91
 8008744:	18f0      	adds	r0, r6, r3
 8008746:	31ff      	adds	r1, #255	; 0xff
 8008748:	f7f7 fe74 	bl	8000434 <__aeabi_idivmod>
 800874c:	424b      	negs	r3, r1
 800874e:	414b      	adcs	r3, r1
 8008750:	336e      	adds	r3, #110	; 0x6e
 8008752:	33ff      	adds	r3, #255	; 0xff
 8008754:	9a01      	ldr	r2, [sp, #4]
 8008756:	3e01      	subs	r6, #1
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	e7cc      	b.n	80086f8 <mktime+0x16c>
 800875e:	236e      	movs	r3, #110	; 0x6e
 8008760:	e7f7      	b.n	8008752 <mktime+0x1c6>
 8008762:	216e      	movs	r1, #110	; 0x6e
 8008764:	e7dc      	b.n	8008720 <mktime+0x194>
 8008766:	21b7      	movs	r1, #183	; 0xb7
 8008768:	0049      	lsls	r1, r1, #1
 800876a:	e7da      	b.n	8008722 <mktime+0x196>
 800876c:	f000 f974 	bl	8008a58 <__tzcalc_limits>
 8008770:	2800      	cmp	r0, #0
 8008772:	d000      	beq.n	8008776 <mktime+0x1ea>
 8008774:	e786      	b.n	8008684 <mktime+0xf8>
 8008776:	0035      	movs	r5, r6
 8008778:	e7a1      	b.n	80086be <mktime+0x132>
 800877a:	9d03      	ldr	r5, [sp, #12]
 800877c:	1a09      	subs	r1, r1, r0
 800877e:	428d      	cmp	r5, r1
 8008780:	dbf9      	blt.n	8008776 <mktime+0x1ea>
 8008782:	e78c      	b.n	800869e <mktime+0x112>
 8008784:	9d03      	ldr	r5, [sp, #12]
 8008786:	4295      	cmp	r5, r2
 8008788:	da36      	bge.n	80087f8 <mktime+0x26c>
 800878a:	9a03      	ldr	r2, [sp, #12]
 800878c:	2501      	movs	r5, #1
 800878e:	42ba      	cmp	r2, r7
 8008790:	da00      	bge.n	8008794 <mktime+0x208>
 8008792:	e791      	b.n	80086b8 <mktime+0x12c>
 8008794:	000d      	movs	r5, r1
 8008796:	e78f      	b.n	80086b8 <mktime+0x12c>
 8008798:	2701      	movs	r7, #1
 800879a:	427f      	negs	r7, r7
 800879c:	e04b      	b.n	8008836 <mktime+0x2aa>
 800879e:	21b6      	movs	r1, #182	; 0xb6
 80087a0:	0049      	lsls	r1, r1, #1
 80087a2:	61e1      	str	r1, [r4, #28]
 80087a4:	e78b      	b.n	80086be <mktime+0x132>
 80087a6:	216e      	movs	r1, #110	; 0x6e
 80087a8:	e062      	b.n	8008870 <mktime+0x2e4>
 80087aa:	9a02      	ldr	r2, [sp, #8]
 80087ac:	421a      	tst	r2, r3
 80087ae:	d117      	bne.n	80087e0 <mktime+0x254>
 80087b0:	2164      	movs	r1, #100	; 0x64
 80087b2:	0010      	movs	r0, r2
 80087b4:	f7f7 fe3e 	bl	8000434 <__aeabi_idivmod>
 80087b8:	2900      	cmp	r1, #0
 80087ba:	d113      	bne.n	80087e4 <mktime+0x258>
 80087bc:	4a32      	ldr	r2, [pc, #200]	; (8008888 <mktime+0x2fc>)
 80087be:	9b02      	ldr	r3, [sp, #8]
 80087c0:	4694      	mov	ip, r2
 80087c2:	3191      	adds	r1, #145	; 0x91
 80087c4:	4463      	add	r3, ip
 80087c6:	0018      	movs	r0, r3
 80087c8:	31ff      	adds	r1, #255	; 0xff
 80087ca:	f7f7 fe33 	bl	8000434 <__aeabi_idivmod>
 80087ce:	000b      	movs	r3, r1
 80087d0:	4259      	negs	r1, r3
 80087d2:	4159      	adcs	r1, r3
 80087d4:	316e      	adds	r1, #110	; 0x6e
 80087d6:	31ff      	adds	r1, #255	; 0xff
 80087d8:	42b9      	cmp	r1, r7
 80087da:	dd06      	ble.n	80087ea <mktime+0x25e>
 80087dc:	61e7      	str	r7, [r4, #28]
 80087de:	e76e      	b.n	80086be <mktime+0x132>
 80087e0:	216e      	movs	r1, #110	; 0x6e
 80087e2:	e7f8      	b.n	80087d6 <mktime+0x24a>
 80087e4:	21b7      	movs	r1, #183	; 0xb7
 80087e6:	0049      	lsls	r1, r1, #1
 80087e8:	e7f6      	b.n	80087d8 <mktime+0x24c>
 80087ea:	1a7f      	subs	r7, r7, r1
 80087ec:	e7f6      	b.n	80087dc <mktime+0x250>
 80087ee:	3107      	adds	r1, #7
 80087f0:	e778      	b.n	80086e4 <mktime+0x158>
 80087f2:	2601      	movs	r6, #1
 80087f4:	4276      	negs	r6, r6
 80087f6:	e776      	b.n	80086e6 <mktime+0x15a>
 80087f8:	2501      	movs	r5, #1
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	da00      	bge.n	8008800 <mktime+0x274>
 80087fe:	e761      	b.n	80086c4 <mktime+0x138>
 8008800:	406e      	eors	r6, r5
 8008802:	2e01      	cmp	r6, #1
 8008804:	d000      	beq.n	8008808 <mktime+0x27c>
 8008806:	e75a      	b.n	80086be <mktime+0x132>
 8008808:	1a1b      	subs	r3, r3, r0
 800880a:	2d00      	cmp	r5, #0
 800880c:	d100      	bne.n	8008810 <mktime+0x284>
 800880e:	425b      	negs	r3, r3
 8008810:	6822      	ldr	r2, [r4, #0]
 8008812:	0020      	movs	r0, r4
 8008814:	18d2      	adds	r2, r2, r3
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	9a03      	ldr	r2, [sp, #12]
 800881a:	68e7      	ldr	r7, [r4, #12]
 800881c:	18d3      	adds	r3, r2, r3
 800881e:	9303      	str	r3, [sp, #12]
 8008820:	f7ff fde8 	bl	80083f4 <validate_structure>
 8008824:	68e3      	ldr	r3, [r4, #12]
 8008826:	1bdf      	subs	r7, r3, r7
 8008828:	d100      	bne.n	800882c <mktime+0x2a0>
 800882a:	e748      	b.n	80086be <mktime+0x132>
 800882c:	2f01      	cmp	r7, #1
 800882e:	dcb3      	bgt.n	8008798 <mktime+0x20c>
 8008830:	1c7b      	adds	r3, r7, #1
 8008832:	da00      	bge.n	8008836 <mktime+0x2aa>
 8008834:	0037      	movs	r7, r6
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	69e2      	ldr	r2, [r4, #28]
 800883a:	19db      	adds	r3, r3, r7
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	2303      	movs	r3, #3
 8008840:	18bf      	adds	r7, r7, r2
 8008842:	d5b2      	bpl.n	80087aa <mktime+0x21e>
 8008844:	9a02      	ldr	r2, [sp, #8]
 8008846:	1e50      	subs	r0, r2, #1
 8008848:	4218      	tst	r0, r3
 800884a:	d1a8      	bne.n	800879e <mktime+0x212>
 800884c:	2164      	movs	r1, #100	; 0x64
 800884e:	f7f7 fdf1 	bl	8000434 <__aeabi_idivmod>
 8008852:	2900      	cmp	r1, #0
 8008854:	d1a7      	bne.n	80087a6 <mktime+0x21a>
 8008856:	4a11      	ldr	r2, [pc, #68]	; (800889c <mktime+0x310>)
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	4694      	mov	ip, r2
 800885c:	3191      	adds	r1, #145	; 0x91
 800885e:	4463      	add	r3, ip
 8008860:	0018      	movs	r0, r3
 8008862:	31ff      	adds	r1, #255	; 0xff
 8008864:	f7f7 fde6 	bl	8000434 <__aeabi_idivmod>
 8008868:	000b      	movs	r3, r1
 800886a:	4259      	negs	r1, r3
 800886c:	4159      	adcs	r1, r3
 800886e:	316d      	adds	r1, #109	; 0x6d
 8008870:	31ff      	adds	r1, #255	; 0xff
 8008872:	e796      	b.n	80087a2 <mktime+0x216>
 8008874:	2500      	movs	r5, #0
 8008876:	2e00      	cmp	r6, #0
 8008878:	dac2      	bge.n	8008800 <mktime+0x274>
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	6a1e      	ldr	r6, [r3, #32]
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	199e      	adds	r6, r3, r6
 8008882:	e724      	b.n	80086ce <mktime+0x142>
 8008884:	0800a528 	.word	0x0800a528
 8008888:	0000076c 	.word	0x0000076c
 800888c:	00004e20 	.word	0x00004e20
 8008890:	00002710 	.word	0x00002710
 8008894:	00015180 	.word	0x00015180
 8008898:	20000350 	.word	0x20000350
 800889c:	0000076b 	.word	0x0000076b

080088a0 <_free_r>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	0005      	movs	r5, r0
 80088a4:	2900      	cmp	r1, #0
 80088a6:	d010      	beq.n	80088ca <_free_r+0x2a>
 80088a8:	1f0c      	subs	r4, r1, #4
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	da00      	bge.n	80088b2 <_free_r+0x12>
 80088b0:	18e4      	adds	r4, r4, r3
 80088b2:	0028      	movs	r0, r5
 80088b4:	f000 fc26 	bl	8009104 <__malloc_lock>
 80088b8:	4a1d      	ldr	r2, [pc, #116]	; (8008930 <_free_r+0x90>)
 80088ba:	6813      	ldr	r3, [r2, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d105      	bne.n	80088cc <_free_r+0x2c>
 80088c0:	6063      	str	r3, [r4, #4]
 80088c2:	6014      	str	r4, [r2, #0]
 80088c4:	0028      	movs	r0, r5
 80088c6:	f000 fc1e 	bl	8009106 <__malloc_unlock>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d909      	bls.n	80088e4 <_free_r+0x44>
 80088d0:	6821      	ldr	r1, [r4, #0]
 80088d2:	1860      	adds	r0, r4, r1
 80088d4:	4283      	cmp	r3, r0
 80088d6:	d1f3      	bne.n	80088c0 <_free_r+0x20>
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	1841      	adds	r1, r0, r1
 80088de:	6021      	str	r1, [r4, #0]
 80088e0:	e7ee      	b.n	80088c0 <_free_r+0x20>
 80088e2:	0013      	movs	r3, r2
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	d001      	beq.n	80088ee <_free_r+0x4e>
 80088ea:	42a2      	cmp	r2, r4
 80088ec:	d9f9      	bls.n	80088e2 <_free_r+0x42>
 80088ee:	6819      	ldr	r1, [r3, #0]
 80088f0:	1858      	adds	r0, r3, r1
 80088f2:	42a0      	cmp	r0, r4
 80088f4:	d10b      	bne.n	800890e <_free_r+0x6e>
 80088f6:	6820      	ldr	r0, [r4, #0]
 80088f8:	1809      	adds	r1, r1, r0
 80088fa:	1858      	adds	r0, r3, r1
 80088fc:	6019      	str	r1, [r3, #0]
 80088fe:	4282      	cmp	r2, r0
 8008900:	d1e0      	bne.n	80088c4 <_free_r+0x24>
 8008902:	6810      	ldr	r0, [r2, #0]
 8008904:	6852      	ldr	r2, [r2, #4]
 8008906:	1841      	adds	r1, r0, r1
 8008908:	6019      	str	r1, [r3, #0]
 800890a:	605a      	str	r2, [r3, #4]
 800890c:	e7da      	b.n	80088c4 <_free_r+0x24>
 800890e:	42a0      	cmp	r0, r4
 8008910:	d902      	bls.n	8008918 <_free_r+0x78>
 8008912:	230c      	movs	r3, #12
 8008914:	602b      	str	r3, [r5, #0]
 8008916:	e7d5      	b.n	80088c4 <_free_r+0x24>
 8008918:	6821      	ldr	r1, [r4, #0]
 800891a:	1860      	adds	r0, r4, r1
 800891c:	4282      	cmp	r2, r0
 800891e:	d103      	bne.n	8008928 <_free_r+0x88>
 8008920:	6810      	ldr	r0, [r2, #0]
 8008922:	6852      	ldr	r2, [r2, #4]
 8008924:	1841      	adds	r1, r0, r1
 8008926:	6021      	str	r1, [r4, #0]
 8008928:	6062      	str	r2, [r4, #4]
 800892a:	605c      	str	r4, [r3, #4]
 800892c:	e7ca      	b.n	80088c4 <_free_r+0x24>
 800892e:	46c0      	nop			; (mov r8, r8)
 8008930:	2000032c 	.word	0x2000032c

08008934 <_malloc_r>:
 8008934:	2303      	movs	r3, #3
 8008936:	b570      	push	{r4, r5, r6, lr}
 8008938:	1ccd      	adds	r5, r1, #3
 800893a:	439d      	bics	r5, r3
 800893c:	3508      	adds	r5, #8
 800893e:	0006      	movs	r6, r0
 8008940:	2d0c      	cmp	r5, #12
 8008942:	d21e      	bcs.n	8008982 <_malloc_r+0x4e>
 8008944:	250c      	movs	r5, #12
 8008946:	42a9      	cmp	r1, r5
 8008948:	d81d      	bhi.n	8008986 <_malloc_r+0x52>
 800894a:	0030      	movs	r0, r6
 800894c:	f000 fbda 	bl	8009104 <__malloc_lock>
 8008950:	4a25      	ldr	r2, [pc, #148]	; (80089e8 <_malloc_r+0xb4>)
 8008952:	6814      	ldr	r4, [r2, #0]
 8008954:	0021      	movs	r1, r4
 8008956:	2900      	cmp	r1, #0
 8008958:	d119      	bne.n	800898e <_malloc_r+0x5a>
 800895a:	4c24      	ldr	r4, [pc, #144]	; (80089ec <_malloc_r+0xb8>)
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <_malloc_r+0x36>
 8008962:	0030      	movs	r0, r6
 8008964:	f000 f844 	bl	80089f0 <_sbrk_r>
 8008968:	6020      	str	r0, [r4, #0]
 800896a:	0029      	movs	r1, r5
 800896c:	0030      	movs	r0, r6
 800896e:	f000 f83f 	bl	80089f0 <_sbrk_r>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d12c      	bne.n	80089d0 <_malloc_r+0x9c>
 8008976:	230c      	movs	r3, #12
 8008978:	0030      	movs	r0, r6
 800897a:	6033      	str	r3, [r6, #0]
 800897c:	f000 fbc3 	bl	8009106 <__malloc_unlock>
 8008980:	e003      	b.n	800898a <_malloc_r+0x56>
 8008982:	2d00      	cmp	r5, #0
 8008984:	dadf      	bge.n	8008946 <_malloc_r+0x12>
 8008986:	230c      	movs	r3, #12
 8008988:	6033      	str	r3, [r6, #0]
 800898a:	2000      	movs	r0, #0
 800898c:	bd70      	pop	{r4, r5, r6, pc}
 800898e:	680b      	ldr	r3, [r1, #0]
 8008990:	1b5b      	subs	r3, r3, r5
 8008992:	d41a      	bmi.n	80089ca <_malloc_r+0x96>
 8008994:	2b0b      	cmp	r3, #11
 8008996:	d903      	bls.n	80089a0 <_malloc_r+0x6c>
 8008998:	600b      	str	r3, [r1, #0]
 800899a:	18cc      	adds	r4, r1, r3
 800899c:	6025      	str	r5, [r4, #0]
 800899e:	e003      	b.n	80089a8 <_malloc_r+0x74>
 80089a0:	428c      	cmp	r4, r1
 80089a2:	d10e      	bne.n	80089c2 <_malloc_r+0x8e>
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	0030      	movs	r0, r6
 80089aa:	f000 fbac 	bl	8009106 <__malloc_unlock>
 80089ae:	0020      	movs	r0, r4
 80089b0:	2207      	movs	r2, #7
 80089b2:	300b      	adds	r0, #11
 80089b4:	1d23      	adds	r3, r4, #4
 80089b6:	4390      	bics	r0, r2
 80089b8:	1ac3      	subs	r3, r0, r3
 80089ba:	d0e7      	beq.n	800898c <_malloc_r+0x58>
 80089bc:	425a      	negs	r2, r3
 80089be:	50e2      	str	r2, [r4, r3]
 80089c0:	e7e4      	b.n	800898c <_malloc_r+0x58>
 80089c2:	684b      	ldr	r3, [r1, #4]
 80089c4:	6063      	str	r3, [r4, #4]
 80089c6:	000c      	movs	r4, r1
 80089c8:	e7ee      	b.n	80089a8 <_malloc_r+0x74>
 80089ca:	000c      	movs	r4, r1
 80089cc:	6849      	ldr	r1, [r1, #4]
 80089ce:	e7c2      	b.n	8008956 <_malloc_r+0x22>
 80089d0:	2303      	movs	r3, #3
 80089d2:	1cc4      	adds	r4, r0, #3
 80089d4:	439c      	bics	r4, r3
 80089d6:	42a0      	cmp	r0, r4
 80089d8:	d0e0      	beq.n	800899c <_malloc_r+0x68>
 80089da:	1a21      	subs	r1, r4, r0
 80089dc:	0030      	movs	r0, r6
 80089de:	f000 f807 	bl	80089f0 <_sbrk_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d1da      	bne.n	800899c <_malloc_r+0x68>
 80089e6:	e7c6      	b.n	8008976 <_malloc_r+0x42>
 80089e8:	2000032c 	.word	0x2000032c
 80089ec:	20000330 	.word	0x20000330

080089f0 <_sbrk_r>:
 80089f0:	2300      	movs	r3, #0
 80089f2:	b570      	push	{r4, r5, r6, lr}
 80089f4:	4c06      	ldr	r4, [pc, #24]	; (8008a10 <_sbrk_r+0x20>)
 80089f6:	0005      	movs	r5, r0
 80089f8:	0008      	movs	r0, r1
 80089fa:	6023      	str	r3, [r4, #0]
 80089fc:	f7fe f9c6 	bl	8006d8c <_sbrk>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d103      	bne.n	8008a0c <_sbrk_r+0x1c>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d000      	beq.n	8008a0c <_sbrk_r+0x1c>
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	bd70      	pop	{r4, r5, r6, pc}
 8008a0e:	46c0      	nop			; (mov r8, r8)
 8008a10:	20000614 	.word	0x20000614

08008a14 <siprintf>:
 8008a14:	b40e      	push	{r1, r2, r3}
 8008a16:	b510      	push	{r4, lr}
 8008a18:	b09d      	sub	sp, #116	; 0x74
 8008a1a:	a902      	add	r1, sp, #8
 8008a1c:	9002      	str	r0, [sp, #8]
 8008a1e:	6108      	str	r0, [r1, #16]
 8008a20:	480b      	ldr	r0, [pc, #44]	; (8008a50 <siprintf+0x3c>)
 8008a22:	2482      	movs	r4, #130	; 0x82
 8008a24:	6088      	str	r0, [r1, #8]
 8008a26:	6148      	str	r0, [r1, #20]
 8008a28:	2001      	movs	r0, #1
 8008a2a:	4240      	negs	r0, r0
 8008a2c:	ab1f      	add	r3, sp, #124	; 0x7c
 8008a2e:	81c8      	strh	r0, [r1, #14]
 8008a30:	4808      	ldr	r0, [pc, #32]	; (8008a54 <siprintf+0x40>)
 8008a32:	cb04      	ldmia	r3!, {r2}
 8008a34:	00a4      	lsls	r4, r4, #2
 8008a36:	6800      	ldr	r0, [r0, #0]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	818c      	strh	r4, [r1, #12]
 8008a3c:	f000 fbc6 	bl	80091cc <_svfiprintf_r>
 8008a40:	2300      	movs	r3, #0
 8008a42:	9a02      	ldr	r2, [sp, #8]
 8008a44:	7013      	strb	r3, [r2, #0]
 8008a46:	b01d      	add	sp, #116	; 0x74
 8008a48:	bc10      	pop	{r4}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	b003      	add	sp, #12
 8008a4e:	4718      	bx	r3
 8008a50:	7fffffff 	.word	0x7fffffff
 8008a54:	20000070 	.word	0x20000070

08008a58 <__tzcalc_limits>:
 8008a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a5a:	b089      	sub	sp, #36	; 0x24
 8008a5c:	0004      	movs	r4, r0
 8008a5e:	f000 fa8f 	bl	8008f80 <__gettzinfo>
 8008a62:	4b4c      	ldr	r3, [pc, #304]	; (8008b94 <__tzcalc_limits+0x13c>)
 8008a64:	0007      	movs	r7, r0
 8008a66:	2000      	movs	r0, #0
 8008a68:	429c      	cmp	r4, r3
 8008a6a:	dd58      	ble.n	8008b1e <__tzcalc_limits+0xc6>
 8008a6c:	256e      	movs	r5, #110	; 0x6e
 8008a6e:	2164      	movs	r1, #100	; 0x64
 8008a70:	4b49      	ldr	r3, [pc, #292]	; (8008b98 <__tzcalc_limits+0x140>)
 8008a72:	35ff      	adds	r5, #255	; 0xff
 8008a74:	18e0      	adds	r0, r4, r3
 8008a76:	4345      	muls	r5, r0
 8008a78:	4b48      	ldr	r3, [pc, #288]	; (8008b9c <__tzcalc_limits+0x144>)
 8008a7a:	607c      	str	r4, [r7, #4]
 8008a7c:	18e0      	adds	r0, r4, r3
 8008a7e:	4b48      	ldr	r3, [pc, #288]	; (8008ba0 <__tzcalc_limits+0x148>)
 8008a80:	1080      	asrs	r0, r0, #2
 8008a82:	182d      	adds	r5, r5, r0
 8008a84:	4249      	negs	r1, r1
 8008a86:	18e0      	adds	r0, r4, r3
 8008a88:	f7f7 fbee 	bl	8000268 <__divsi3>
 8008a8c:	21c8      	movs	r1, #200	; 0xc8
 8008a8e:	4b45      	ldr	r3, [pc, #276]	; (8008ba4 <__tzcalc_limits+0x14c>)
 8008a90:	182d      	adds	r5, r5, r0
 8008a92:	0049      	lsls	r1, r1, #1
 8008a94:	18e0      	adds	r0, r4, r3
 8008a96:	f7f7 fbe7 	bl	8000268 <__divsi3>
 8008a9a:	2164      	movs	r1, #100	; 0x64
 8008a9c:	182b      	adds	r3, r5, r0
 8008a9e:	0020      	movs	r0, r4
 8008aa0:	9301      	str	r3, [sp, #4]
 8008aa2:	f7f7 fcc7 	bl	8000434 <__aeabi_idivmod>
 8008aa6:	9102      	str	r1, [sp, #8]
 8008aa8:	21c8      	movs	r1, #200	; 0xc8
 8008aaa:	0020      	movs	r0, r4
 8008aac:	0049      	lsls	r1, r1, #1
 8008aae:	f7f7 fcc1 	bl	8000434 <__aeabi_idivmod>
 8008ab2:	000a      	movs	r2, r1
 8008ab4:	4253      	negs	r3, r2
 8008ab6:	415a      	adcs	r2, r3
 8008ab8:	003b      	movs	r3, r7
 8008aba:	3340      	adds	r3, #64	; 0x40
 8008abc:	9307      	str	r3, [sp, #28]
 8008abe:	2303      	movs	r3, #3
 8008ac0:	003d      	movs	r5, r7
 8008ac2:	401c      	ands	r4, r3
 8008ac4:	9103      	str	r1, [sp, #12]
 8008ac6:	9205      	str	r2, [sp, #20]
 8008ac8:	3508      	adds	r5, #8
 8008aca:	9406      	str	r4, [sp, #24]
 8008acc:	782b      	ldrb	r3, [r5, #0]
 8008ace:	2b4a      	cmp	r3, #74	; 0x4a
 8008ad0:	d127      	bne.n	8008b22 <__tzcalc_limits+0xca>
 8008ad2:	9a01      	ldr	r2, [sp, #4]
 8008ad4:	68eb      	ldr	r3, [r5, #12]
 8008ad6:	18d1      	adds	r1, r2, r3
 8008ad8:	9a06      	ldr	r2, [sp, #24]
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	d102      	bne.n	8008ae4 <__tzcalc_limits+0x8c>
 8008ade:	9a02      	ldr	r2, [sp, #8]
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	d103      	bne.n	8008aec <__tzcalc_limits+0x94>
 8008ae4:	2400      	movs	r4, #0
 8008ae6:	9a03      	ldr	r2, [sp, #12]
 8008ae8:	42a2      	cmp	r2, r4
 8008aea:	d103      	bne.n	8008af4 <__tzcalc_limits+0x9c>
 8008aec:	2401      	movs	r4, #1
 8008aee:	2b3b      	cmp	r3, #59	; 0x3b
 8008af0:	dc00      	bgt.n	8008af4 <__tzcalc_limits+0x9c>
 8008af2:	2400      	movs	r4, #0
 8008af4:	1864      	adds	r4, r4, r1
 8008af6:	3c01      	subs	r4, #1
 8008af8:	492b      	ldr	r1, [pc, #172]	; (8008ba8 <__tzcalc_limits+0x150>)
 8008afa:	692b      	ldr	r3, [r5, #16]
 8008afc:	434c      	muls	r4, r1
 8008afe:	18e4      	adds	r4, r4, r3
 8008b00:	69ab      	ldr	r3, [r5, #24]
 8008b02:	18e4      	adds	r4, r4, r3
 8008b04:	9b07      	ldr	r3, [sp, #28]
 8008b06:	616c      	str	r4, [r5, #20]
 8008b08:	351c      	adds	r5, #28
 8008b0a:	42ab      	cmp	r3, r5
 8008b0c:	d1de      	bne.n	8008acc <__tzcalc_limits+0x74>
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b12:	2301      	movs	r3, #1
 8008b14:	428a      	cmp	r2, r1
 8008b16:	db00      	blt.n	8008b1a <__tzcalc_limits+0xc2>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	b009      	add	sp, #36	; 0x24
 8008b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b22:	2b44      	cmp	r3, #68	; 0x44
 8008b24:	d103      	bne.n	8008b2e <__tzcalc_limits+0xd6>
 8008b26:	9b01      	ldr	r3, [sp, #4]
 8008b28:	68ea      	ldr	r2, [r5, #12]
 8008b2a:	189c      	adds	r4, r3, r2
 8008b2c:	e7e4      	b.n	8008af8 <__tzcalc_limits+0xa0>
 8008b2e:	9a06      	ldr	r2, [sp, #24]
 8008b30:	9b05      	ldr	r3, [sp, #20]
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	d103      	bne.n	8008b3e <__tzcalc_limits+0xe6>
 8008b36:	9a02      	ldr	r2, [sp, #8]
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d000      	beq.n	8008b3e <__tzcalc_limits+0xe6>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	2230      	movs	r2, #48	; 0x30
 8008b40:	4353      	muls	r3, r2
 8008b42:	4a1a      	ldr	r2, [pc, #104]	; (8008bac <__tzcalc_limits+0x154>)
 8008b44:	686e      	ldr	r6, [r5, #4]
 8008b46:	189b      	adds	r3, r3, r2
 8008b48:	9304      	str	r3, [sp, #16]
 8008b4a:	001a      	movs	r2, r3
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	9c01      	ldr	r4, [sp, #4]
 8008b50:	42b3      	cmp	r3, r6
 8008b52:	db18      	blt.n	8008b86 <__tzcalc_limits+0x12e>
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	dc00      	bgt.n	8008b5a <__tzcalc_limits+0x102>
 8008b58:	2601      	movs	r6, #1
 8008b5a:	1d20      	adds	r0, r4, #4
 8008b5c:	2107      	movs	r1, #7
 8008b5e:	f7f7 fc69 	bl	8000434 <__aeabi_idivmod>
 8008b62:	68eb      	ldr	r3, [r5, #12]
 8008b64:	1a5b      	subs	r3, r3, r1
 8008b66:	d500      	bpl.n	8008b6a <__tzcalc_limits+0x112>
 8008b68:	3307      	adds	r3, #7
 8008b6a:	2107      	movs	r1, #7
 8008b6c:	68aa      	ldr	r2, [r5, #8]
 8008b6e:	3a01      	subs	r2, #1
 8008b70:	4351      	muls	r1, r2
 8008b72:	18c9      	adds	r1, r1, r3
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <__tzcalc_limits+0x158>)
 8008b76:	18f6      	adds	r6, r6, r3
 8008b78:	9b04      	ldr	r3, [sp, #16]
 8008b7a:	00b6      	lsls	r6, r6, #2
 8008b7c:	58f3      	ldr	r3, [r6, r3]
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	da05      	bge.n	8008b8e <__tzcalc_limits+0x136>
 8008b82:	1864      	adds	r4, r4, r1
 8008b84:	e7b8      	b.n	8008af8 <__tzcalc_limits+0xa0>
 8008b86:	ca02      	ldmia	r2!, {r1}
 8008b88:	3301      	adds	r3, #1
 8008b8a:	1864      	adds	r4, r4, r1
 8008b8c:	e7e0      	b.n	8008b50 <__tzcalc_limits+0xf8>
 8008b8e:	3907      	subs	r1, #7
 8008b90:	e7f5      	b.n	8008b7e <__tzcalc_limits+0x126>
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	000007b1 	.word	0x000007b1
 8008b98:	fffff84e 	.word	0xfffff84e
 8008b9c:	fffff84f 	.word	0xfffff84f
 8008ba0:	fffff893 	.word	0xfffff893
 8008ba4:	fffff9bf 	.word	0xfffff9bf
 8008ba8:	00015180 	.word	0x00015180
 8008bac:	0800a558 	.word	0x0800a558
 8008bb0:	3fffffff 	.word	0x3fffffff

08008bb4 <__tz_lock>:
 8008bb4:	4770      	bx	lr

08008bb6 <__tz_unlock>:
 8008bb6:	4770      	bx	lr

08008bb8 <_tzset_unlocked>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	4b02      	ldr	r3, [pc, #8]	; (8008bc4 <_tzset_unlocked+0xc>)
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	f000 f803 	bl	8008bc8 <_tzset_unlocked_r>
 8008bc2:	bd10      	pop	{r4, pc}
 8008bc4:	20000070 	.word	0x20000070

08008bc8 <_tzset_unlocked_r>:
 8008bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bca:	b08d      	sub	sp, #52	; 0x34
 8008bcc:	0007      	movs	r7, r0
 8008bce:	f000 f9d7 	bl	8008f80 <__gettzinfo>
 8008bd2:	49af      	ldr	r1, [pc, #700]	; (8008e90 <_tzset_unlocked_r+0x2c8>)
 8008bd4:	0006      	movs	r6, r0
 8008bd6:	0038      	movs	r0, r7
 8008bd8:	f000 f9cc 	bl	8008f74 <_getenv_r>
 8008bdc:	4dad      	ldr	r5, [pc, #692]	; (8008e94 <_tzset_unlocked_r+0x2cc>)
 8008bde:	1e04      	subs	r4, r0, #0
 8008be0:	d10d      	bne.n	8008bfe <_tzset_unlocked_r+0x36>
 8008be2:	4bad      	ldr	r3, [pc, #692]	; (8008e98 <_tzset_unlocked_r+0x2d0>)
 8008be4:	4aad      	ldr	r2, [pc, #692]	; (8008e9c <_tzset_unlocked_r+0x2d4>)
 8008be6:	6018      	str	r0, [r3, #0]
 8008be8:	4bad      	ldr	r3, [pc, #692]	; (8008ea0 <_tzset_unlocked_r+0x2d8>)
 8008bea:	6018      	str	r0, [r3, #0]
 8008bec:	4bad      	ldr	r3, [pc, #692]	; (8008ea4 <_tzset_unlocked_r+0x2dc>)
 8008bee:	6828      	ldr	r0, [r5, #0]
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	605a      	str	r2, [r3, #4]
 8008bf4:	f7ff fbe2 	bl	80083bc <free>
 8008bf8:	602c      	str	r4, [r5, #0]
 8008bfa:	b00d      	add	sp, #52	; 0x34
 8008bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bfe:	6829      	ldr	r1, [r5, #0]
 8008c00:	2900      	cmp	r1, #0
 8008c02:	d15a      	bne.n	8008cba <_tzset_unlocked_r+0xf2>
 8008c04:	6828      	ldr	r0, [r5, #0]
 8008c06:	f7ff fbd9 	bl	80083bc <free>
 8008c0a:	0020      	movs	r0, r4
 8008c0c:	f7f7 fa7c 	bl	8000108 <strlen>
 8008c10:	1c41      	adds	r1, r0, #1
 8008c12:	0038      	movs	r0, r7
 8008c14:	f7ff fe8e 	bl	8008934 <_malloc_r>
 8008c18:	6028      	str	r0, [r5, #0]
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d152      	bne.n	8008cc4 <_tzset_unlocked_r+0xfc>
 8008c1e:	7823      	ldrb	r3, [r4, #0]
 8008c20:	3b3a      	subs	r3, #58	; 0x3a
 8008c22:	4259      	negs	r1, r3
 8008c24:	4159      	adcs	r1, r3
 8008c26:	1864      	adds	r4, r4, r1
 8008c28:	ab0a      	add	r3, sp, #40	; 0x28
 8008c2a:	4a9f      	ldr	r2, [pc, #636]	; (8008ea8 <_tzset_unlocked_r+0x2e0>)
 8008c2c:	499f      	ldr	r1, [pc, #636]	; (8008eac <_tzset_unlocked_r+0x2e4>)
 8008c2e:	0020      	movs	r0, r4
 8008c30:	f000 fd58 	bl	80096e4 <siscanf>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	dde0      	ble.n	8008bfa <_tzset_unlocked_r+0x32>
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	18e4      	adds	r4, r4, r3
 8008c3c:	7823      	ldrb	r3, [r4, #0]
 8008c3e:	2b2d      	cmp	r3, #45	; 0x2d
 8008c40:	d144      	bne.n	8008ccc <_tzset_unlocked_r+0x104>
 8008c42:	3b2e      	subs	r3, #46	; 0x2e
 8008c44:	3401      	adds	r4, #1
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	2716      	movs	r7, #22
 8008c4a:	ab02      	add	r3, sp, #8
 8008c4c:	18ff      	adds	r7, r7, r3
 8008c4e:	2300      	movs	r3, #0
 8008c50:	803b      	strh	r3, [r7, #0]
 8008c52:	2300      	movs	r3, #0
 8008c54:	ad08      	add	r5, sp, #32
 8008c56:	802b      	strh	r3, [r5, #0]
 8008c58:	ab0a      	add	r3, sp, #40	; 0x28
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	9502      	str	r5, [sp, #8]
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	9700      	str	r7, [sp, #0]
 8008c62:	aa07      	add	r2, sp, #28
 8008c64:	4992      	ldr	r1, [pc, #584]	; (8008eb0 <_tzset_unlocked_r+0x2e8>)
 8008c66:	0020      	movs	r0, r4
 8008c68:	f000 fd3c 	bl	80096e4 <siscanf>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	ddc4      	ble.n	8008bfa <_tzset_unlocked_r+0x32>
 8008c70:	233c      	movs	r3, #60	; 0x3c
 8008c72:	883a      	ldrh	r2, [r7, #0]
 8008c74:	4f8f      	ldr	r7, [pc, #572]	; (8008eb4 <_tzset_unlocked_r+0x2ec>)
 8008c76:	4353      	muls	r3, r2
 8008c78:	882a      	ldrh	r2, [r5, #0]
 8008c7a:	4d8a      	ldr	r5, [pc, #552]	; (8008ea4 <_tzset_unlocked_r+0x2dc>)
 8008c7c:	189b      	adds	r3, r3, r2
 8008c7e:	aa02      	add	r2, sp, #8
 8008c80:	8a91      	ldrh	r1, [r2, #20]
 8008c82:	22e1      	movs	r2, #225	; 0xe1
 8008c84:	0112      	lsls	r2, r2, #4
 8008c86:	434a      	muls	r2, r1
 8008c88:	189b      	adds	r3, r3, r2
 8008c8a:	9a04      	ldr	r2, [sp, #16]
 8008c8c:	4987      	ldr	r1, [pc, #540]	; (8008eac <_tzset_unlocked_r+0x2e4>)
 8008c8e:	435a      	muls	r2, r3
 8008c90:	4b85      	ldr	r3, [pc, #532]	; (8008ea8 <_tzset_unlocked_r+0x2e0>)
 8008c92:	6232      	str	r2, [r6, #32]
 8008c94:	602b      	str	r3, [r5, #0]
 8008c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c98:	003a      	movs	r2, r7
 8008c9a:	18e4      	adds	r4, r4, r3
 8008c9c:	0020      	movs	r0, r4
 8008c9e:	ab0a      	add	r3, sp, #40	; 0x28
 8008ca0:	f000 fd20 	bl	80096e4 <siscanf>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	dc18      	bgt.n	8008cda <_tzset_unlocked_r+0x112>
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	6a32      	ldr	r2, [r6, #32]
 8008cac:	606b      	str	r3, [r5, #4]
 8008cae:	4b7a      	ldr	r3, [pc, #488]	; (8008e98 <_tzset_unlocked_r+0x2d0>)
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4b7a      	ldr	r3, [pc, #488]	; (8008ea0 <_tzset_unlocked_r+0x2d8>)
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	e79f      	b.n	8008bfa <_tzset_unlocked_r+0x32>
 8008cba:	f7f7 fa2c 	bl	8000116 <strcmp>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d09b      	beq.n	8008bfa <_tzset_unlocked_r+0x32>
 8008cc2:	e79f      	b.n	8008c04 <_tzset_unlocked_r+0x3c>
 8008cc4:	0021      	movs	r1, r4
 8008cc6:	f000 fd37 	bl	8009738 <strcpy>
 8008cca:	e7a8      	b.n	8008c1e <_tzset_unlocked_r+0x56>
 8008ccc:	2201      	movs	r2, #1
 8008cce:	3b2b      	subs	r3, #43	; 0x2b
 8008cd0:	9204      	str	r2, [sp, #16]
 8008cd2:	4259      	negs	r1, r3
 8008cd4:	4159      	adcs	r1, r3
 8008cd6:	1864      	adds	r4, r4, r1
 8008cd8:	e7b6      	b.n	8008c48 <_tzset_unlocked_r+0x80>
 8008cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cdc:	606f      	str	r7, [r5, #4]
 8008cde:	18e4      	adds	r4, r4, r3
 8008ce0:	7823      	ldrb	r3, [r4, #0]
 8008ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8008ce4:	d000      	beq.n	8008ce8 <_tzset_unlocked_r+0x120>
 8008ce6:	e08f      	b.n	8008e08 <_tzset_unlocked_r+0x240>
 8008ce8:	3b2e      	subs	r3, #46	; 0x2e
 8008cea:	3401      	adds	r4, #1
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	2716      	movs	r7, #22
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	aa02      	add	r2, sp, #8
 8008cf4:	18bf      	adds	r7, r7, r2
 8008cf6:	ad07      	add	r5, sp, #28
 8008cf8:	8313      	strh	r3, [r2, #24]
 8008cfa:	802b      	strh	r3, [r5, #0]
 8008cfc:	803b      	strh	r3, [r7, #0]
 8008cfe:	aa08      	add	r2, sp, #32
 8008d00:	930a      	str	r3, [sp, #40]	; 0x28
 8008d02:	ab0a      	add	r3, sp, #40	; 0x28
 8008d04:	9202      	str	r2, [sp, #8]
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	9301      	str	r3, [sp, #4]
 8008d0a:	9700      	str	r7, [sp, #0]
 8008d0c:	002a      	movs	r2, r5
 8008d0e:	4968      	ldr	r1, [pc, #416]	; (8008eb0 <_tzset_unlocked_r+0x2e8>)
 8008d10:	0020      	movs	r0, r4
 8008d12:	f000 fce7 	bl	80096e4 <siscanf>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	dd00      	ble.n	8008d1c <_tzset_unlocked_r+0x154>
 8008d1a:	e07c      	b.n	8008e16 <_tzset_unlocked_r+0x24e>
 8008d1c:	6a33      	ldr	r3, [r6, #32]
 8008d1e:	4a66      	ldr	r2, [pc, #408]	; (8008eb8 <_tzset_unlocked_r+0x2f0>)
 8008d20:	189b      	adds	r3, r3, r2
 8008d22:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d26:	0037      	movs	r7, r6
 8008d28:	18e4      	adds	r4, r4, r3
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	9304      	str	r3, [sp, #16]
 8008d30:	7823      	ldrb	r3, [r4, #0]
 8008d32:	3b2c      	subs	r3, #44	; 0x2c
 8008d34:	4259      	negs	r1, r3
 8008d36:	4159      	adcs	r1, r3
 8008d38:	1864      	adds	r4, r4, r1
 8008d3a:	7825      	ldrb	r5, [r4, #0]
 8008d3c:	2d4d      	cmp	r5, #77	; 0x4d
 8008d3e:	d000      	beq.n	8008d42 <_tzset_unlocked_r+0x17a>
 8008d40:	e078      	b.n	8008e34 <_tzset_unlocked_r+0x26c>
 8008d42:	221e      	movs	r2, #30
 8008d44:	a902      	add	r1, sp, #8
 8008d46:	1852      	adds	r2, r2, r1
 8008d48:	9202      	str	r2, [sp, #8]
 8008d4a:	aa09      	add	r2, sp, #36	; 0x24
 8008d4c:	9200      	str	r2, [sp, #0]
 8008d4e:	221a      	movs	r2, #26
 8008d50:	ab0a      	add	r3, sp, #40	; 0x28
 8008d52:	1852      	adds	r2, r2, r1
 8008d54:	9303      	str	r3, [sp, #12]
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	4958      	ldr	r1, [pc, #352]	; (8008ebc <_tzset_unlocked_r+0x2f4>)
 8008d5a:	0020      	movs	r0, r4
 8008d5c:	f000 fcc2 	bl	80096e4 <siscanf>
 8008d60:	2803      	cmp	r0, #3
 8008d62:	d000      	beq.n	8008d66 <_tzset_unlocked_r+0x19e>
 8008d64:	e749      	b.n	8008bfa <_tzset_unlocked_r+0x32>
 8008d66:	ab02      	add	r3, sp, #8
 8008d68:	8b59      	ldrh	r1, [r3, #26]
 8008d6a:	1e4b      	subs	r3, r1, #1
 8008d6c:	2b0b      	cmp	r3, #11
 8008d6e:	d900      	bls.n	8008d72 <_tzset_unlocked_r+0x1aa>
 8008d70:	e743      	b.n	8008bfa <_tzset_unlocked_r+0x32>
 8008d72:	ab02      	add	r3, sp, #8
 8008d74:	8b9a      	ldrh	r2, [r3, #28]
 8008d76:	1e53      	subs	r3, r2, #1
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	d900      	bls.n	8008d7e <_tzset_unlocked_r+0x1b6>
 8008d7c:	e73d      	b.n	8008bfa <_tzset_unlocked_r+0x32>
 8008d7e:	ab02      	add	r3, sp, #8
 8008d80:	8bdb      	ldrh	r3, [r3, #30]
 8008d82:	2b06      	cmp	r3, #6
 8008d84:	d900      	bls.n	8008d88 <_tzset_unlocked_r+0x1c0>
 8008d86:	e738      	b.n	8008bfa <_tzset_unlocked_r+0x32>
 8008d88:	703d      	strb	r5, [r7, #0]
 8008d8a:	6079      	str	r1, [r7, #4]
 8008d8c:	60ba      	str	r2, [r7, #8]
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d92:	18e5      	adds	r5, r4, r3
 8008d94:	2302      	movs	r3, #2
 8008d96:	aa07      	add	r2, sp, #28
 8008d98:	8013      	strh	r3, [r2, #0]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	a902      	add	r1, sp, #8
 8008d9e:	ac08      	add	r4, sp, #32
 8008da0:	82cb      	strh	r3, [r1, #22]
 8008da2:	8023      	strh	r3, [r4, #0]
 8008da4:	930a      	str	r3, [sp, #40]	; 0x28
 8008da6:	782b      	ldrb	r3, [r5, #0]
 8008da8:	2b2f      	cmp	r3, #47	; 0x2f
 8008daa:	d10b      	bne.n	8008dc4 <_tzset_unlocked_r+0x1fc>
 8008dac:	2116      	movs	r1, #22
 8008dae:	a802      	add	r0, sp, #8
 8008db0:	1809      	adds	r1, r1, r0
 8008db2:	ab0a      	add	r3, sp, #40	; 0x28
 8008db4:	9100      	str	r1, [sp, #0]
 8008db6:	9303      	str	r3, [sp, #12]
 8008db8:	9402      	str	r4, [sp, #8]
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	4940      	ldr	r1, [pc, #256]	; (8008ec0 <_tzset_unlocked_r+0x2f8>)
 8008dbe:	0028      	movs	r0, r5
 8008dc0:	f000 fc90 	bl	80096e4 <siscanf>
 8008dc4:	ab02      	add	r3, sp, #8
 8008dc6:	8ada      	ldrh	r2, [r3, #22]
 8008dc8:	233c      	movs	r3, #60	; 0x3c
 8008dca:	4353      	muls	r3, r2
 8008dcc:	8822      	ldrh	r2, [r4, #0]
 8008dce:	189b      	adds	r3, r3, r2
 8008dd0:	aa07      	add	r2, sp, #28
 8008dd2:	8811      	ldrh	r1, [r2, #0]
 8008dd4:	22e1      	movs	r2, #225	; 0xe1
 8008dd6:	0112      	lsls	r2, r2, #4
 8008dd8:	434a      	muls	r2, r1
 8008dda:	189b      	adds	r3, r3, r2
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de0:	371c      	adds	r7, #28
 8008de2:	18ec      	adds	r4, r5, r3
 8008de4:	9b04      	ldr	r3, [sp, #16]
 8008de6:	3301      	adds	r3, #1
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d1a0      	bne.n	8008d30 <_tzset_unlocked_r+0x168>
 8008dee:	6870      	ldr	r0, [r6, #4]
 8008df0:	f7ff fe32 	bl	8008a58 <__tzcalc_limits>
 8008df4:	6a32      	ldr	r2, [r6, #32]
 8008df6:	4b28      	ldr	r3, [pc, #160]	; (8008e98 <_tzset_unlocked_r+0x2d0>)
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8008dfc:	1a9b      	subs	r3, r3, r2
 8008dfe:	1e5a      	subs	r2, r3, #1
 8008e00:	4193      	sbcs	r3, r2
 8008e02:	4a27      	ldr	r2, [pc, #156]	; (8008ea0 <_tzset_unlocked_r+0x2d8>)
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	e6f8      	b.n	8008bfa <_tzset_unlocked_r+0x32>
 8008e08:	2201      	movs	r2, #1
 8008e0a:	3b2b      	subs	r3, #43	; 0x2b
 8008e0c:	9204      	str	r2, [sp, #16]
 8008e0e:	4259      	negs	r1, r3
 8008e10:	4159      	adcs	r1, r3
 8008e12:	1864      	adds	r4, r4, r1
 8008e14:	e76b      	b.n	8008cee <_tzset_unlocked_r+0x126>
 8008e16:	233c      	movs	r3, #60	; 0x3c
 8008e18:	883a      	ldrh	r2, [r7, #0]
 8008e1a:	8829      	ldrh	r1, [r5, #0]
 8008e1c:	4353      	muls	r3, r2
 8008e1e:	aa02      	add	r2, sp, #8
 8008e20:	8b12      	ldrh	r2, [r2, #24]
 8008e22:	189b      	adds	r3, r3, r2
 8008e24:	22e1      	movs	r2, #225	; 0xe1
 8008e26:	0112      	lsls	r2, r2, #4
 8008e28:	434a      	muls	r2, r1
 8008e2a:	189b      	adds	r3, r3, r2
 8008e2c:	9a04      	ldr	r2, [sp, #16]
 8008e2e:	435a      	muls	r2, r3
 8008e30:	0013      	movs	r3, r2
 8008e32:	e776      	b.n	8008d22 <_tzset_unlocked_r+0x15a>
 8008e34:	2344      	movs	r3, #68	; 0x44
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	2d4a      	cmp	r5, #74	; 0x4a
 8008e3a:	d101      	bne.n	8008e40 <_tzset_unlocked_r+0x278>
 8008e3c:	3401      	adds	r4, #1
 8008e3e:	9505      	str	r5, [sp, #20]
 8008e40:	220a      	movs	r2, #10
 8008e42:	a90b      	add	r1, sp, #44	; 0x2c
 8008e44:	0020      	movs	r0, r4
 8008e46:	f000 fd27 	bl	8009898 <strtoul>
 8008e4a:	231e      	movs	r3, #30
 8008e4c:	aa02      	add	r2, sp, #8
 8008e4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008e50:	189b      	adds	r3, r3, r2
 8008e52:	8018      	strh	r0, [r3, #0]
 8008e54:	42ac      	cmp	r4, r5
 8008e56:	d115      	bne.n	8008e84 <_tzset_unlocked_r+0x2bc>
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d108      	bne.n	8008e70 <_tzset_unlocked_r+0x2a8>
 8008e5e:	334d      	adds	r3, #77	; 0x4d
 8008e60:	7233      	strb	r3, [r6, #8]
 8008e62:	2303      	movs	r3, #3
 8008e64:	60f3      	str	r3, [r6, #12]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	6133      	str	r3, [r6, #16]
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	6173      	str	r3, [r6, #20]
 8008e6e:	e791      	b.n	8008d94 <_tzset_unlocked_r+0x1cc>
 8008e70:	224d      	movs	r2, #77	; 0x4d
 8008e72:	1d73      	adds	r3, r6, #5
 8008e74:	77da      	strb	r2, [r3, #31]
 8008e76:	230b      	movs	r3, #11
 8008e78:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e7a:	3b0a      	subs	r3, #10
 8008e7c:	62f3      	str	r3, [r6, #44]	; 0x2c
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6333      	str	r3, [r6, #48]	; 0x30
 8008e82:	e787      	b.n	8008d94 <_tzset_unlocked_r+0x1cc>
 8008e84:	466b      	mov	r3, sp
 8008e86:	7d1b      	ldrb	r3, [r3, #20]
 8008e88:	b280      	uxth	r0, r0
 8008e8a:	703b      	strb	r3, [r7, #0]
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	e781      	b.n	8008d94 <_tzset_unlocked_r+0x1cc>
 8008e90:	0800a5b8 	.word	0x0800a5b8
 8008e94:	2000034c 	.word	0x2000034c
 8008e98:	20000354 	.word	0x20000354
 8008e9c:	0800a5bb 	.word	0x0800a5bb
 8008ea0:	20000350 	.word	0x20000350
 8008ea4:	200000d4 	.word	0x200000d4
 8008ea8:	2000033f 	.word	0x2000033f
 8008eac:	0800a5bf 	.word	0x0800a5bf
 8008eb0:	0800a5e2 	.word	0x0800a5e2
 8008eb4:	20000334 	.word	0x20000334
 8008eb8:	fffff1f0 	.word	0xfffff1f0
 8008ebc:	0800a5ce 	.word	0x0800a5ce
 8008ec0:	0800a5e1 	.word	0x0800a5e1

08008ec4 <div>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	000f      	movs	r7, r1
 8008ec8:	0006      	movs	r6, r0
 8008eca:	0011      	movs	r1, r2
 8008ecc:	0038      	movs	r0, r7
 8008ece:	0015      	movs	r5, r2
 8008ed0:	f7f7 f9ca 	bl	8000268 <__divsi3>
 8008ed4:	0029      	movs	r1, r5
 8008ed6:	0004      	movs	r4, r0
 8008ed8:	0038      	movs	r0, r7
 8008eda:	f7f7 faab 	bl	8000434 <__aeabi_idivmod>
 8008ede:	2f00      	cmp	r7, #0
 8008ee0:	db07      	blt.n	8008ef2 <div+0x2e>
 8008ee2:	2900      	cmp	r1, #0
 8008ee4:	da01      	bge.n	8008eea <div+0x26>
 8008ee6:	3401      	adds	r4, #1
 8008ee8:	1b49      	subs	r1, r1, r5
 8008eea:	0030      	movs	r0, r6
 8008eec:	6034      	str	r4, [r6, #0]
 8008eee:	6071      	str	r1, [r6, #4]
 8008ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	ddf9      	ble.n	8008eea <div+0x26>
 8008ef6:	3c01      	subs	r4, #1
 8008ef8:	1949      	adds	r1, r1, r5
 8008efa:	e7f6      	b.n	8008eea <div+0x26>

08008efc <_findenv_r>:
 8008efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008efe:	000e      	movs	r6, r1
 8008f00:	b085      	sub	sp, #20
 8008f02:	0007      	movs	r7, r0
 8008f04:	9203      	str	r2, [sp, #12]
 8008f06:	f000 fcdb 	bl	80098c0 <__env_lock>
 8008f0a:	4c19      	ldr	r4, [pc, #100]	; (8008f70 <_findenv_r+0x74>)
 8008f0c:	0033      	movs	r3, r6
 8008f0e:	6825      	ldr	r5, [r4, #0]
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	d106      	bne.n	8008f22 <_findenv_r+0x26>
 8008f14:	0038      	movs	r0, r7
 8008f16:	f000 fcd4 	bl	80098c2 <__env_unlock>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	b005      	add	sp, #20
 8008f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f20:	3301      	adds	r3, #1
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	d01f      	beq.n	8008f68 <_findenv_r+0x6c>
 8008f28:	2a3d      	cmp	r2, #61	; 0x3d
 8008f2a:	d1f9      	bne.n	8008f20 <_findenv_r+0x24>
 8008f2c:	e7f2      	b.n	8008f14 <_findenv_r+0x18>
 8008f2e:	3504      	adds	r5, #4
 8008f30:	6828      	ldr	r0, [r5, #0]
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d0ee      	beq.n	8008f14 <_findenv_r+0x18>
 8008f36:	9a01      	ldr	r2, [sp, #4]
 8008f38:	0031      	movs	r1, r6
 8008f3a:	f000 fc05 	bl	8009748 <strncmp>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d1f5      	bne.n	8008f2e <_findenv_r+0x32>
 8008f42:	9a01      	ldr	r2, [sp, #4]
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	4694      	mov	ip, r2
 8008f48:	4463      	add	r3, ip
 8008f4a:	9302      	str	r3, [sp, #8]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b3d      	cmp	r3, #61	; 0x3d
 8008f50:	d1ed      	bne.n	8008f2e <_findenv_r+0x32>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	0038      	movs	r0, r7
 8008f56:	1aed      	subs	r5, r5, r3
 8008f58:	9b03      	ldr	r3, [sp, #12]
 8008f5a:	10ad      	asrs	r5, r5, #2
 8008f5c:	601d      	str	r5, [r3, #0]
 8008f5e:	f000 fcb0 	bl	80098c2 <__env_unlock>
 8008f62:	9802      	ldr	r0, [sp, #8]
 8008f64:	3001      	adds	r0, #1
 8008f66:	e7d9      	b.n	8008f1c <_findenv_r+0x20>
 8008f68:	1b9b      	subs	r3, r3, r6
 8008f6a:	9301      	str	r3, [sp, #4]
 8008f6c:	e7e0      	b.n	8008f30 <_findenv_r+0x34>
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	20000058 	.word	0x20000058

08008f74 <_getenv_r>:
 8008f74:	b507      	push	{r0, r1, r2, lr}
 8008f76:	aa01      	add	r2, sp, #4
 8008f78:	f7ff ffc0 	bl	8008efc <_findenv_r>
 8008f7c:	bd0e      	pop	{r1, r2, r3, pc}
	...

08008f80 <__gettzinfo>:
 8008f80:	4800      	ldr	r0, [pc, #0]	; (8008f84 <__gettzinfo+0x4>)
 8008f82:	4770      	bx	lr
 8008f84:	200000dc 	.word	0x200000dc

08008f88 <gmtime_r>:
 8008f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8a:	6805      	ldr	r5, [r0, #0]
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	000c      	movs	r4, r1
 8008f90:	0028      	movs	r0, r5
 8008f92:	4952      	ldr	r1, [pc, #328]	; (80090dc <gmtime_r+0x154>)
 8008f94:	f7f7 f968 	bl	8000268 <__divsi3>
 8008f98:	4950      	ldr	r1, [pc, #320]	; (80090dc <gmtime_r+0x154>)
 8008f9a:	0006      	movs	r6, r0
 8008f9c:	0028      	movs	r0, r5
 8008f9e:	f7f7 fa49 	bl	8000434 <__aeabi_idivmod>
 8008fa2:	1e0f      	subs	r7, r1, #0
 8008fa4:	da00      	bge.n	8008fa8 <gmtime_r+0x20>
 8008fa6:	e080      	b.n	80090aa <gmtime_r+0x122>
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	; (80090e0 <gmtime_r+0x158>)
 8008faa:	21e1      	movs	r1, #225	; 0xe1
 8008fac:	0038      	movs	r0, r7
 8008fae:	0109      	lsls	r1, r1, #4
 8008fb0:	18f5      	adds	r5, r6, r3
 8008fb2:	f7f7 f959 	bl	8000268 <__divsi3>
 8008fb6:	21e1      	movs	r1, #225	; 0xe1
 8008fb8:	60a0      	str	r0, [r4, #8]
 8008fba:	0109      	lsls	r1, r1, #4
 8008fbc:	0038      	movs	r0, r7
 8008fbe:	f7f7 fa39 	bl	8000434 <__aeabi_idivmod>
 8008fc2:	000e      	movs	r6, r1
 8008fc4:	213c      	movs	r1, #60	; 0x3c
 8008fc6:	0030      	movs	r0, r6
 8008fc8:	f7f7 f94e 	bl	8000268 <__divsi3>
 8008fcc:	213c      	movs	r1, #60	; 0x3c
 8008fce:	6060      	str	r0, [r4, #4]
 8008fd0:	0030      	movs	r0, r6
 8008fd2:	f7f7 fa2f 	bl	8000434 <__aeabi_idivmod>
 8008fd6:	1ce8      	adds	r0, r5, #3
 8008fd8:	6021      	str	r1, [r4, #0]
 8008fda:	2107      	movs	r1, #7
 8008fdc:	f7f7 fa2a 	bl	8000434 <__aeabi_idivmod>
 8008fe0:	0028      	movs	r0, r5
 8008fe2:	61a1      	str	r1, [r4, #24]
 8008fe4:	493f      	ldr	r1, [pc, #252]	; (80090e4 <gmtime_r+0x15c>)
 8008fe6:	f7f7 f93f 	bl	8000268 <__divsi3>
 8008fea:	4e3f      	ldr	r6, [pc, #252]	; (80090e8 <gmtime_r+0x160>)
 8008fec:	493f      	ldr	r1, [pc, #252]	; (80090ec <gmtime_r+0x164>)
 8008fee:	4346      	muls	r6, r0
 8008ff0:	1976      	adds	r6, r6, r5
 8008ff2:	0007      	movs	r7, r0
 8008ff4:	0030      	movs	r0, r6
 8008ff6:	f7f7 f8ad 	bl	8000154 <__udivsi3>
 8008ffa:	493d      	ldr	r1, [pc, #244]	; (80090f0 <gmtime_r+0x168>)
 8008ffc:	1985      	adds	r5, r0, r6
 8008ffe:	0030      	movs	r0, r6
 8009000:	f7f7 f8a8 	bl	8000154 <__udivsi3>
 8009004:	493b      	ldr	r1, [pc, #236]	; (80090f4 <gmtime_r+0x16c>)
 8009006:	1a2d      	subs	r5, r5, r0
 8009008:	0030      	movs	r0, r6
 800900a:	f7f7 f8a3 	bl	8000154 <__udivsi3>
 800900e:	216e      	movs	r1, #110	; 0x6e
 8009010:	1a2d      	subs	r5, r5, r0
 8009012:	31ff      	adds	r1, #255	; 0xff
 8009014:	0028      	movs	r0, r5
 8009016:	f7f7 f89d 	bl	8000154 <__udivsi3>
 800901a:	4937      	ldr	r1, [pc, #220]	; (80090f8 <gmtime_r+0x170>)
 800901c:	9001      	str	r0, [sp, #4]
 800901e:	0028      	movs	r0, r5
 8009020:	f7f7 f898 	bl	8000154 <__udivsi3>
 8009024:	4932      	ldr	r1, [pc, #200]	; (80090f0 <gmtime_r+0x168>)
 8009026:	1986      	adds	r6, r0, r6
 8009028:	0028      	movs	r0, r5
 800902a:	f7f7 f893 	bl	8000154 <__udivsi3>
 800902e:	216e      	movs	r1, #110	; 0x6e
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	31ff      	adds	r1, #255	; 0xff
 8009034:	4359      	muls	r1, r3
 8009036:	1a36      	subs	r6, r6, r0
 8009038:	1a73      	subs	r3, r6, r1
 800903a:	0018      	movs	r0, r3
 800903c:	2605      	movs	r6, #5
 800903e:	4370      	muls	r0, r6
 8009040:	2199      	movs	r1, #153	; 0x99
 8009042:	3002      	adds	r0, #2
 8009044:	9302      	str	r3, [sp, #8]
 8009046:	f7f7 f885 	bl	8000154 <__udivsi3>
 800904a:	0005      	movs	r5, r0
 800904c:	2099      	movs	r0, #153	; 0x99
 800904e:	4368      	muls	r0, r5
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	3002      	adds	r0, #2
 8009054:	3301      	adds	r3, #1
 8009056:	0031      	movs	r1, r6
 8009058:	9303      	str	r3, [sp, #12]
 800905a:	f7f7 f87b 	bl	8000154 <__udivsi3>
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	1a1b      	subs	r3, r3, r0
 8009062:	9303      	str	r3, [sp, #12]
 8009064:	2302      	movs	r3, #2
 8009066:	2d09      	cmp	r5, #9
 8009068:	d900      	bls.n	800906c <gmtime_r+0xe4>
 800906a:	3b0c      	subs	r3, #12
 800906c:	195d      	adds	r5, r3, r5
 800906e:	23c8      	movs	r3, #200	; 0xc8
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	435f      	muls	r7, r3
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	2601      	movs	r6, #1
 8009078:	18ff      	adds	r7, r7, r3
 800907a:	2300      	movs	r3, #0
 800907c:	42ae      	cmp	r6, r5
 800907e:	415b      	adcs	r3, r3
 8009080:	18ff      	adds	r7, r7, r3
 8009082:	2332      	movs	r3, #50	; 0x32
 8009084:	9a02      	ldr	r2, [sp, #8]
 8009086:	33ff      	adds	r3, #255	; 0xff
 8009088:	429a      	cmp	r2, r3
 800908a:	d912      	bls.n	80090b2 <gmtime_r+0x12a>
 800908c:	0016      	movs	r6, r2
 800908e:	3e33      	subs	r6, #51	; 0x33
 8009090:	3eff      	subs	r6, #255	; 0xff
 8009092:	4b1a      	ldr	r3, [pc, #104]	; (80090fc <gmtime_r+0x174>)
 8009094:	0020      	movs	r0, r4
 8009096:	18ff      	adds	r7, r7, r3
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	61e6      	str	r6, [r4, #28]
 800909c:	60e3      	str	r3, [r4, #12]
 800909e:	2300      	movs	r3, #0
 80090a0:	6167      	str	r7, [r4, #20]
 80090a2:	6125      	str	r5, [r4, #16]
 80090a4:	6223      	str	r3, [r4, #32]
 80090a6:	b005      	add	sp, #20
 80090a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090aa:	4b0c      	ldr	r3, [pc, #48]	; (80090dc <gmtime_r+0x154>)
 80090ac:	18cf      	adds	r7, r1, r3
 80090ae:	4b14      	ldr	r3, [pc, #80]	; (8009100 <gmtime_r+0x178>)
 80090b0:	e77b      	b.n	8008faa <gmtime_r+0x22>
 80090b2:	9b01      	ldr	r3, [sp, #4]
 80090b4:	079b      	lsls	r3, r3, #30
 80090b6:	d105      	bne.n	80090c4 <gmtime_r+0x13c>
 80090b8:	2164      	movs	r1, #100	; 0x64
 80090ba:	9801      	ldr	r0, [sp, #4]
 80090bc:	f7f7 f8d0 	bl	8000260 <__aeabi_uidivmod>
 80090c0:	2900      	cmp	r1, #0
 80090c2:	d106      	bne.n	80090d2 <gmtime_r+0x14a>
 80090c4:	21c8      	movs	r1, #200	; 0xc8
 80090c6:	9801      	ldr	r0, [sp, #4]
 80090c8:	0049      	lsls	r1, r1, #1
 80090ca:	f7f7 f8c9 	bl	8000260 <__aeabi_uidivmod>
 80090ce:	424e      	negs	r6, r1
 80090d0:	414e      	adcs	r6, r1
 80090d2:	9802      	ldr	r0, [sp, #8]
 80090d4:	303b      	adds	r0, #59	; 0x3b
 80090d6:	1986      	adds	r6, r0, r6
 80090d8:	e7db      	b.n	8009092 <gmtime_r+0x10a>
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	00015180 	.word	0x00015180
 80090e0:	000afa6c 	.word	0x000afa6c
 80090e4:	00023ab1 	.word	0x00023ab1
 80090e8:	fffdc54f 	.word	0xfffdc54f
 80090ec:	00008eac 	.word	0x00008eac
 80090f0:	000005b4 	.word	0x000005b4
 80090f4:	00023ab0 	.word	0x00023ab0
 80090f8:	00008e94 	.word	0x00008e94
 80090fc:	fffff894 	.word	0xfffff894
 8009100:	000afa6b 	.word	0x000afa6b

08009104 <__malloc_lock>:
 8009104:	4770      	bx	lr

08009106 <__malloc_unlock>:
 8009106:	4770      	bx	lr

08009108 <__ssputs_r>:
 8009108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800910a:	688e      	ldr	r6, [r1, #8]
 800910c:	b085      	sub	sp, #20
 800910e:	0007      	movs	r7, r0
 8009110:	000c      	movs	r4, r1
 8009112:	9203      	str	r2, [sp, #12]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	429e      	cmp	r6, r3
 8009118:	d839      	bhi.n	800918e <__ssputs_r+0x86>
 800911a:	2390      	movs	r3, #144	; 0x90
 800911c:	898a      	ldrh	r2, [r1, #12]
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	421a      	tst	r2, r3
 8009122:	d034      	beq.n	800918e <__ssputs_r+0x86>
 8009124:	2503      	movs	r5, #3
 8009126:	6909      	ldr	r1, [r1, #16]
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	1a5b      	subs	r3, r3, r1
 800912c:	9302      	str	r3, [sp, #8]
 800912e:	6963      	ldr	r3, [r4, #20]
 8009130:	9802      	ldr	r0, [sp, #8]
 8009132:	435d      	muls	r5, r3
 8009134:	0feb      	lsrs	r3, r5, #31
 8009136:	195d      	adds	r5, r3, r5
 8009138:	9b01      	ldr	r3, [sp, #4]
 800913a:	106d      	asrs	r5, r5, #1
 800913c:	3301      	adds	r3, #1
 800913e:	181b      	adds	r3, r3, r0
 8009140:	42ab      	cmp	r3, r5
 8009142:	d900      	bls.n	8009146 <__ssputs_r+0x3e>
 8009144:	001d      	movs	r5, r3
 8009146:	0553      	lsls	r3, r2, #21
 8009148:	d532      	bpl.n	80091b0 <__ssputs_r+0xa8>
 800914a:	0029      	movs	r1, r5
 800914c:	0038      	movs	r0, r7
 800914e:	f7ff fbf1 	bl	8008934 <_malloc_r>
 8009152:	1e06      	subs	r6, r0, #0
 8009154:	d109      	bne.n	800916a <__ssputs_r+0x62>
 8009156:	230c      	movs	r3, #12
 8009158:	603b      	str	r3, [r7, #0]
 800915a:	2340      	movs	r3, #64	; 0x40
 800915c:	2001      	movs	r0, #1
 800915e:	89a2      	ldrh	r2, [r4, #12]
 8009160:	4240      	negs	r0, r0
 8009162:	4313      	orrs	r3, r2
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	b005      	add	sp, #20
 8009168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800916a:	9a02      	ldr	r2, [sp, #8]
 800916c:	6921      	ldr	r1, [r4, #16]
 800916e:	f7ff f92f 	bl	80083d0 <memcpy>
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <__ssputs_r+0xc0>)
 8009176:	401a      	ands	r2, r3
 8009178:	2380      	movs	r3, #128	; 0x80
 800917a:	4313      	orrs	r3, r2
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	9b02      	ldr	r3, [sp, #8]
 8009180:	6126      	str	r6, [r4, #16]
 8009182:	18f6      	adds	r6, r6, r3
 8009184:	6026      	str	r6, [r4, #0]
 8009186:	6165      	str	r5, [r4, #20]
 8009188:	9e01      	ldr	r6, [sp, #4]
 800918a:	1aed      	subs	r5, r5, r3
 800918c:	60a5      	str	r5, [r4, #8]
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	42b3      	cmp	r3, r6
 8009192:	d200      	bcs.n	8009196 <__ssputs_r+0x8e>
 8009194:	001e      	movs	r6, r3
 8009196:	0032      	movs	r2, r6
 8009198:	9903      	ldr	r1, [sp, #12]
 800919a:	6820      	ldr	r0, [r4, #0]
 800919c:	f000 fbc1 	bl	8009922 <memmove>
 80091a0:	68a3      	ldr	r3, [r4, #8]
 80091a2:	2000      	movs	r0, #0
 80091a4:	1b9b      	subs	r3, r3, r6
 80091a6:	60a3      	str	r3, [r4, #8]
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	199e      	adds	r6, r3, r6
 80091ac:	6026      	str	r6, [r4, #0]
 80091ae:	e7da      	b.n	8009166 <__ssputs_r+0x5e>
 80091b0:	002a      	movs	r2, r5
 80091b2:	0038      	movs	r0, r7
 80091b4:	f000 fbc7 	bl	8009946 <_realloc_r>
 80091b8:	1e06      	subs	r6, r0, #0
 80091ba:	d1e0      	bne.n	800917e <__ssputs_r+0x76>
 80091bc:	6921      	ldr	r1, [r4, #16]
 80091be:	0038      	movs	r0, r7
 80091c0:	f7ff fb6e 	bl	80088a0 <_free_r>
 80091c4:	e7c7      	b.n	8009156 <__ssputs_r+0x4e>
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	fffffb7f 	.word	0xfffffb7f

080091cc <_svfiprintf_r>:
 80091cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ce:	b09f      	sub	sp, #124	; 0x7c
 80091d0:	9002      	str	r0, [sp, #8]
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	898b      	ldrh	r3, [r1, #12]
 80091d6:	000f      	movs	r7, r1
 80091d8:	0016      	movs	r6, r2
 80091da:	061b      	lsls	r3, r3, #24
 80091dc:	d511      	bpl.n	8009202 <_svfiprintf_r+0x36>
 80091de:	690b      	ldr	r3, [r1, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10e      	bne.n	8009202 <_svfiprintf_r+0x36>
 80091e4:	2140      	movs	r1, #64	; 0x40
 80091e6:	f7ff fba5 	bl	8008934 <_malloc_r>
 80091ea:	6038      	str	r0, [r7, #0]
 80091ec:	6138      	str	r0, [r7, #16]
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d105      	bne.n	80091fe <_svfiprintf_r+0x32>
 80091f2:	230c      	movs	r3, #12
 80091f4:	9a02      	ldr	r2, [sp, #8]
 80091f6:	3801      	subs	r0, #1
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	b01f      	add	sp, #124	; 0x7c
 80091fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091fe:	2340      	movs	r3, #64	; 0x40
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	2300      	movs	r3, #0
 8009204:	ad06      	add	r5, sp, #24
 8009206:	616b      	str	r3, [r5, #20]
 8009208:	3320      	adds	r3, #32
 800920a:	766b      	strb	r3, [r5, #25]
 800920c:	3310      	adds	r3, #16
 800920e:	76ab      	strb	r3, [r5, #26]
 8009210:	0034      	movs	r4, r6
 8009212:	7823      	ldrb	r3, [r4, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d147      	bne.n	80092a8 <_svfiprintf_r+0xdc>
 8009218:	1ba3      	subs	r3, r4, r6
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	d00d      	beq.n	800923a <_svfiprintf_r+0x6e>
 800921e:	1ba3      	subs	r3, r4, r6
 8009220:	0032      	movs	r2, r6
 8009222:	0039      	movs	r1, r7
 8009224:	9802      	ldr	r0, [sp, #8]
 8009226:	f7ff ff6f 	bl	8009108 <__ssputs_r>
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	d100      	bne.n	8009230 <_svfiprintf_r+0x64>
 800922e:	e0b5      	b.n	800939c <_svfiprintf_r+0x1d0>
 8009230:	696a      	ldr	r2, [r5, #20]
 8009232:	9b04      	ldr	r3, [sp, #16]
 8009234:	4694      	mov	ip, r2
 8009236:	4463      	add	r3, ip
 8009238:	616b      	str	r3, [r5, #20]
 800923a:	7823      	ldrb	r3, [r4, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d100      	bne.n	8009242 <_svfiprintf_r+0x76>
 8009240:	e0ac      	b.n	800939c <_svfiprintf_r+0x1d0>
 8009242:	2201      	movs	r2, #1
 8009244:	2300      	movs	r3, #0
 8009246:	4252      	negs	r2, r2
 8009248:	606a      	str	r2, [r5, #4]
 800924a:	a902      	add	r1, sp, #8
 800924c:	3254      	adds	r2, #84	; 0x54
 800924e:	1852      	adds	r2, r2, r1
 8009250:	3401      	adds	r4, #1
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	60eb      	str	r3, [r5, #12]
 8009256:	60ab      	str	r3, [r5, #8]
 8009258:	7013      	strb	r3, [r2, #0]
 800925a:	65ab      	str	r3, [r5, #88]	; 0x58
 800925c:	4e58      	ldr	r6, [pc, #352]	; (80093c0 <_svfiprintf_r+0x1f4>)
 800925e:	2205      	movs	r2, #5
 8009260:	7821      	ldrb	r1, [r4, #0]
 8009262:	0030      	movs	r0, r6
 8009264:	f000 fb52 	bl	800990c <memchr>
 8009268:	1c62      	adds	r2, r4, #1
 800926a:	2800      	cmp	r0, #0
 800926c:	d120      	bne.n	80092b0 <_svfiprintf_r+0xe4>
 800926e:	6829      	ldr	r1, [r5, #0]
 8009270:	06cb      	lsls	r3, r1, #27
 8009272:	d504      	bpl.n	800927e <_svfiprintf_r+0xb2>
 8009274:	2353      	movs	r3, #83	; 0x53
 8009276:	ae02      	add	r6, sp, #8
 8009278:	3020      	adds	r0, #32
 800927a:	199b      	adds	r3, r3, r6
 800927c:	7018      	strb	r0, [r3, #0]
 800927e:	070b      	lsls	r3, r1, #28
 8009280:	d504      	bpl.n	800928c <_svfiprintf_r+0xc0>
 8009282:	2353      	movs	r3, #83	; 0x53
 8009284:	202b      	movs	r0, #43	; 0x2b
 8009286:	ae02      	add	r6, sp, #8
 8009288:	199b      	adds	r3, r3, r6
 800928a:	7018      	strb	r0, [r3, #0]
 800928c:	7823      	ldrb	r3, [r4, #0]
 800928e:	2b2a      	cmp	r3, #42	; 0x2a
 8009290:	d016      	beq.n	80092c0 <_svfiprintf_r+0xf4>
 8009292:	2000      	movs	r0, #0
 8009294:	210a      	movs	r1, #10
 8009296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009298:	7822      	ldrb	r2, [r4, #0]
 800929a:	3a30      	subs	r2, #48	; 0x30
 800929c:	2a09      	cmp	r2, #9
 800929e:	d955      	bls.n	800934c <_svfiprintf_r+0x180>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d015      	beq.n	80092d0 <_svfiprintf_r+0x104>
 80092a4:	9309      	str	r3, [sp, #36]	; 0x24
 80092a6:	e013      	b.n	80092d0 <_svfiprintf_r+0x104>
 80092a8:	2b25      	cmp	r3, #37	; 0x25
 80092aa:	d0b5      	beq.n	8009218 <_svfiprintf_r+0x4c>
 80092ac:	3401      	adds	r4, #1
 80092ae:	e7b0      	b.n	8009212 <_svfiprintf_r+0x46>
 80092b0:	2301      	movs	r3, #1
 80092b2:	1b80      	subs	r0, r0, r6
 80092b4:	4083      	lsls	r3, r0
 80092b6:	6829      	ldr	r1, [r5, #0]
 80092b8:	0014      	movs	r4, r2
 80092ba:	430b      	orrs	r3, r1
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	e7cd      	b.n	800925c <_svfiprintf_r+0x90>
 80092c0:	9b05      	ldr	r3, [sp, #20]
 80092c2:	1d18      	adds	r0, r3, #4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	9005      	str	r0, [sp, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	db39      	blt.n	8009340 <_svfiprintf_r+0x174>
 80092cc:	9309      	str	r3, [sp, #36]	; 0x24
 80092ce:	0014      	movs	r4, r2
 80092d0:	7823      	ldrb	r3, [r4, #0]
 80092d2:	2b2e      	cmp	r3, #46	; 0x2e
 80092d4:	d10b      	bne.n	80092ee <_svfiprintf_r+0x122>
 80092d6:	7863      	ldrb	r3, [r4, #1]
 80092d8:	1c62      	adds	r2, r4, #1
 80092da:	2b2a      	cmp	r3, #42	; 0x2a
 80092dc:	d13e      	bne.n	800935c <_svfiprintf_r+0x190>
 80092de:	9b05      	ldr	r3, [sp, #20]
 80092e0:	3402      	adds	r4, #2
 80092e2:	1d1a      	adds	r2, r3, #4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	9205      	str	r2, [sp, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	db34      	blt.n	8009356 <_svfiprintf_r+0x18a>
 80092ec:	9307      	str	r3, [sp, #28]
 80092ee:	4e35      	ldr	r6, [pc, #212]	; (80093c4 <_svfiprintf_r+0x1f8>)
 80092f0:	7821      	ldrb	r1, [r4, #0]
 80092f2:	2203      	movs	r2, #3
 80092f4:	0030      	movs	r0, r6
 80092f6:	f000 fb09 	bl	800990c <memchr>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d006      	beq.n	800930c <_svfiprintf_r+0x140>
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	1b80      	subs	r0, r0, r6
 8009302:	4083      	lsls	r3, r0
 8009304:	682a      	ldr	r2, [r5, #0]
 8009306:	3401      	adds	r4, #1
 8009308:	4313      	orrs	r3, r2
 800930a:	602b      	str	r3, [r5, #0]
 800930c:	7821      	ldrb	r1, [r4, #0]
 800930e:	2206      	movs	r2, #6
 8009310:	482d      	ldr	r0, [pc, #180]	; (80093c8 <_svfiprintf_r+0x1fc>)
 8009312:	1c66      	adds	r6, r4, #1
 8009314:	7629      	strb	r1, [r5, #24]
 8009316:	f000 faf9 	bl	800990c <memchr>
 800931a:	2800      	cmp	r0, #0
 800931c:	d046      	beq.n	80093ac <_svfiprintf_r+0x1e0>
 800931e:	4b2b      	ldr	r3, [pc, #172]	; (80093cc <_svfiprintf_r+0x200>)
 8009320:	2b00      	cmp	r3, #0
 8009322:	d12f      	bne.n	8009384 <_svfiprintf_r+0x1b8>
 8009324:	6829      	ldr	r1, [r5, #0]
 8009326:	9b05      	ldr	r3, [sp, #20]
 8009328:	2207      	movs	r2, #7
 800932a:	05c9      	lsls	r1, r1, #23
 800932c:	d528      	bpl.n	8009380 <_svfiprintf_r+0x1b4>
 800932e:	189b      	adds	r3, r3, r2
 8009330:	4393      	bics	r3, r2
 8009332:	3308      	adds	r3, #8
 8009334:	9305      	str	r3, [sp, #20]
 8009336:	696b      	ldr	r3, [r5, #20]
 8009338:	9a03      	ldr	r2, [sp, #12]
 800933a:	189b      	adds	r3, r3, r2
 800933c:	616b      	str	r3, [r5, #20]
 800933e:	e767      	b.n	8009210 <_svfiprintf_r+0x44>
 8009340:	425b      	negs	r3, r3
 8009342:	60eb      	str	r3, [r5, #12]
 8009344:	2302      	movs	r3, #2
 8009346:	430b      	orrs	r3, r1
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	e7c0      	b.n	80092ce <_svfiprintf_r+0x102>
 800934c:	434b      	muls	r3, r1
 800934e:	3401      	adds	r4, #1
 8009350:	189b      	adds	r3, r3, r2
 8009352:	2001      	movs	r0, #1
 8009354:	e7a0      	b.n	8009298 <_svfiprintf_r+0xcc>
 8009356:	2301      	movs	r3, #1
 8009358:	425b      	negs	r3, r3
 800935a:	e7c7      	b.n	80092ec <_svfiprintf_r+0x120>
 800935c:	2300      	movs	r3, #0
 800935e:	0014      	movs	r4, r2
 8009360:	200a      	movs	r0, #10
 8009362:	001a      	movs	r2, r3
 8009364:	606b      	str	r3, [r5, #4]
 8009366:	7821      	ldrb	r1, [r4, #0]
 8009368:	3930      	subs	r1, #48	; 0x30
 800936a:	2909      	cmp	r1, #9
 800936c:	d903      	bls.n	8009376 <_svfiprintf_r+0x1aa>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0bd      	beq.n	80092ee <_svfiprintf_r+0x122>
 8009372:	9207      	str	r2, [sp, #28]
 8009374:	e7bb      	b.n	80092ee <_svfiprintf_r+0x122>
 8009376:	4342      	muls	r2, r0
 8009378:	3401      	adds	r4, #1
 800937a:	1852      	adds	r2, r2, r1
 800937c:	2301      	movs	r3, #1
 800937e:	e7f2      	b.n	8009366 <_svfiprintf_r+0x19a>
 8009380:	3307      	adds	r3, #7
 8009382:	e7d5      	b.n	8009330 <_svfiprintf_r+0x164>
 8009384:	ab05      	add	r3, sp, #20
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	003a      	movs	r2, r7
 800938a:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <_svfiprintf_r+0x204>)
 800938c:	0029      	movs	r1, r5
 800938e:	9802      	ldr	r0, [sp, #8]
 8009390:	e000      	b.n	8009394 <_svfiprintf_r+0x1c8>
 8009392:	bf00      	nop
 8009394:	9003      	str	r0, [sp, #12]
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	d1cc      	bne.n	8009336 <_svfiprintf_r+0x16a>
 800939c:	89bb      	ldrh	r3, [r7, #12]
 800939e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80093a0:	065b      	lsls	r3, r3, #25
 80093a2:	d400      	bmi.n	80093a6 <_svfiprintf_r+0x1da>
 80093a4:	e729      	b.n	80091fa <_svfiprintf_r+0x2e>
 80093a6:	2001      	movs	r0, #1
 80093a8:	4240      	negs	r0, r0
 80093aa:	e726      	b.n	80091fa <_svfiprintf_r+0x2e>
 80093ac:	ab05      	add	r3, sp, #20
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	003a      	movs	r2, r7
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <_svfiprintf_r+0x204>)
 80093b4:	0029      	movs	r1, r5
 80093b6:	9802      	ldr	r0, [sp, #8]
 80093b8:	f000 f87a 	bl	80094b0 <_printf_i>
 80093bc:	e7ea      	b.n	8009394 <_svfiprintf_r+0x1c8>
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	0800a5f4 	.word	0x0800a5f4
 80093c4:	0800a5fa 	.word	0x0800a5fa
 80093c8:	0800a5fe 	.word	0x0800a5fe
 80093cc:	00000000 	.word	0x00000000
 80093d0:	08009109 	.word	0x08009109

080093d4 <_printf_common>:
 80093d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093d6:	0015      	movs	r5, r2
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	688a      	ldr	r2, [r1, #8]
 80093dc:	690b      	ldr	r3, [r1, #16]
 80093de:	9000      	str	r0, [sp, #0]
 80093e0:	000c      	movs	r4, r1
 80093e2:	4293      	cmp	r3, r2
 80093e4:	da00      	bge.n	80093e8 <_printf_common+0x14>
 80093e6:	0013      	movs	r3, r2
 80093e8:	0022      	movs	r2, r4
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	3243      	adds	r2, #67	; 0x43
 80093ee:	7812      	ldrb	r2, [r2, #0]
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	d001      	beq.n	80093f8 <_printf_common+0x24>
 80093f4:	3301      	adds	r3, #1
 80093f6:	602b      	str	r3, [r5, #0]
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	069b      	lsls	r3, r3, #26
 80093fc:	d502      	bpl.n	8009404 <_printf_common+0x30>
 80093fe:	682b      	ldr	r3, [r5, #0]
 8009400:	3302      	adds	r3, #2
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	2706      	movs	r7, #6
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	401f      	ands	r7, r3
 800940a:	d027      	beq.n	800945c <_printf_common+0x88>
 800940c:	0023      	movs	r3, r4
 800940e:	3343      	adds	r3, #67	; 0x43
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	1e5a      	subs	r2, r3, #1
 8009414:	4193      	sbcs	r3, r2
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	0692      	lsls	r2, r2, #26
 800941a:	d430      	bmi.n	800947e <_printf_common+0xaa>
 800941c:	0022      	movs	r2, r4
 800941e:	9901      	ldr	r1, [sp, #4]
 8009420:	3243      	adds	r2, #67	; 0x43
 8009422:	9800      	ldr	r0, [sp, #0]
 8009424:	9e08      	ldr	r6, [sp, #32]
 8009426:	47b0      	blx	r6
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d025      	beq.n	8009478 <_printf_common+0xa4>
 800942c:	2306      	movs	r3, #6
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	682a      	ldr	r2, [r5, #0]
 8009432:	68e1      	ldr	r1, [r4, #12]
 8009434:	4003      	ands	r3, r0
 8009436:	2500      	movs	r5, #0
 8009438:	2b04      	cmp	r3, #4
 800943a:	d103      	bne.n	8009444 <_printf_common+0x70>
 800943c:	1a8d      	subs	r5, r1, r2
 800943e:	43eb      	mvns	r3, r5
 8009440:	17db      	asrs	r3, r3, #31
 8009442:	401d      	ands	r5, r3
 8009444:	68a3      	ldr	r3, [r4, #8]
 8009446:	6922      	ldr	r2, [r4, #16]
 8009448:	4293      	cmp	r3, r2
 800944a:	dd01      	ble.n	8009450 <_printf_common+0x7c>
 800944c:	1a9b      	subs	r3, r3, r2
 800944e:	18ed      	adds	r5, r5, r3
 8009450:	2700      	movs	r7, #0
 8009452:	42bd      	cmp	r5, r7
 8009454:	d120      	bne.n	8009498 <_printf_common+0xc4>
 8009456:	2000      	movs	r0, #0
 8009458:	e010      	b.n	800947c <_printf_common+0xa8>
 800945a:	3701      	adds	r7, #1
 800945c:	68e3      	ldr	r3, [r4, #12]
 800945e:	682a      	ldr	r2, [r5, #0]
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	429f      	cmp	r7, r3
 8009464:	dad2      	bge.n	800940c <_printf_common+0x38>
 8009466:	0022      	movs	r2, r4
 8009468:	2301      	movs	r3, #1
 800946a:	3219      	adds	r2, #25
 800946c:	9901      	ldr	r1, [sp, #4]
 800946e:	9800      	ldr	r0, [sp, #0]
 8009470:	9e08      	ldr	r6, [sp, #32]
 8009472:	47b0      	blx	r6
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d1f0      	bne.n	800945a <_printf_common+0x86>
 8009478:	2001      	movs	r0, #1
 800947a:	4240      	negs	r0, r0
 800947c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800947e:	2030      	movs	r0, #48	; 0x30
 8009480:	18e1      	adds	r1, r4, r3
 8009482:	3143      	adds	r1, #67	; 0x43
 8009484:	7008      	strb	r0, [r1, #0]
 8009486:	0021      	movs	r1, r4
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	3145      	adds	r1, #69	; 0x45
 800948c:	7809      	ldrb	r1, [r1, #0]
 800948e:	18a2      	adds	r2, r4, r2
 8009490:	3243      	adds	r2, #67	; 0x43
 8009492:	3302      	adds	r3, #2
 8009494:	7011      	strb	r1, [r2, #0]
 8009496:	e7c1      	b.n	800941c <_printf_common+0x48>
 8009498:	0022      	movs	r2, r4
 800949a:	2301      	movs	r3, #1
 800949c:	321a      	adds	r2, #26
 800949e:	9901      	ldr	r1, [sp, #4]
 80094a0:	9800      	ldr	r0, [sp, #0]
 80094a2:	9e08      	ldr	r6, [sp, #32]
 80094a4:	47b0      	blx	r6
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d0e6      	beq.n	8009478 <_printf_common+0xa4>
 80094aa:	3701      	adds	r7, #1
 80094ac:	e7d1      	b.n	8009452 <_printf_common+0x7e>
	...

080094b0 <_printf_i>:
 80094b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094b2:	b08b      	sub	sp, #44	; 0x2c
 80094b4:	9206      	str	r2, [sp, #24]
 80094b6:	000a      	movs	r2, r1
 80094b8:	3243      	adds	r2, #67	; 0x43
 80094ba:	9307      	str	r3, [sp, #28]
 80094bc:	9005      	str	r0, [sp, #20]
 80094be:	9204      	str	r2, [sp, #16]
 80094c0:	7e0a      	ldrb	r2, [r1, #24]
 80094c2:	000c      	movs	r4, r1
 80094c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094c6:	2a6e      	cmp	r2, #110	; 0x6e
 80094c8:	d100      	bne.n	80094cc <_printf_i+0x1c>
 80094ca:	e08f      	b.n	80095ec <_printf_i+0x13c>
 80094cc:	d817      	bhi.n	80094fe <_printf_i+0x4e>
 80094ce:	2a63      	cmp	r2, #99	; 0x63
 80094d0:	d02c      	beq.n	800952c <_printf_i+0x7c>
 80094d2:	d808      	bhi.n	80094e6 <_printf_i+0x36>
 80094d4:	2a00      	cmp	r2, #0
 80094d6:	d100      	bne.n	80094da <_printf_i+0x2a>
 80094d8:	e099      	b.n	800960e <_printf_i+0x15e>
 80094da:	2a58      	cmp	r2, #88	; 0x58
 80094dc:	d054      	beq.n	8009588 <_printf_i+0xd8>
 80094de:	0026      	movs	r6, r4
 80094e0:	3642      	adds	r6, #66	; 0x42
 80094e2:	7032      	strb	r2, [r6, #0]
 80094e4:	e029      	b.n	800953a <_printf_i+0x8a>
 80094e6:	2a64      	cmp	r2, #100	; 0x64
 80094e8:	d001      	beq.n	80094ee <_printf_i+0x3e>
 80094ea:	2a69      	cmp	r2, #105	; 0x69
 80094ec:	d1f7      	bne.n	80094de <_printf_i+0x2e>
 80094ee:	6821      	ldr	r1, [r4, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	0608      	lsls	r0, r1, #24
 80094f4:	d523      	bpl.n	800953e <_printf_i+0x8e>
 80094f6:	1d11      	adds	r1, r2, #4
 80094f8:	6019      	str	r1, [r3, #0]
 80094fa:	6815      	ldr	r5, [r2, #0]
 80094fc:	e025      	b.n	800954a <_printf_i+0x9a>
 80094fe:	2a73      	cmp	r2, #115	; 0x73
 8009500:	d100      	bne.n	8009504 <_printf_i+0x54>
 8009502:	e088      	b.n	8009616 <_printf_i+0x166>
 8009504:	d808      	bhi.n	8009518 <_printf_i+0x68>
 8009506:	2a6f      	cmp	r2, #111	; 0x6f
 8009508:	d029      	beq.n	800955e <_printf_i+0xae>
 800950a:	2a70      	cmp	r2, #112	; 0x70
 800950c:	d1e7      	bne.n	80094de <_printf_i+0x2e>
 800950e:	2220      	movs	r2, #32
 8009510:	6809      	ldr	r1, [r1, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	6022      	str	r2, [r4, #0]
 8009516:	e003      	b.n	8009520 <_printf_i+0x70>
 8009518:	2a75      	cmp	r2, #117	; 0x75
 800951a:	d020      	beq.n	800955e <_printf_i+0xae>
 800951c:	2a78      	cmp	r2, #120	; 0x78
 800951e:	d1de      	bne.n	80094de <_printf_i+0x2e>
 8009520:	0022      	movs	r2, r4
 8009522:	2178      	movs	r1, #120	; 0x78
 8009524:	3245      	adds	r2, #69	; 0x45
 8009526:	7011      	strb	r1, [r2, #0]
 8009528:	4a6c      	ldr	r2, [pc, #432]	; (80096dc <_printf_i+0x22c>)
 800952a:	e030      	b.n	800958e <_printf_i+0xde>
 800952c:	000e      	movs	r6, r1
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	3642      	adds	r6, #66	; 0x42
 8009532:	1d11      	adds	r1, r2, #4
 8009534:	6019      	str	r1, [r3, #0]
 8009536:	6813      	ldr	r3, [r2, #0]
 8009538:	7033      	strb	r3, [r6, #0]
 800953a:	2301      	movs	r3, #1
 800953c:	e079      	b.n	8009632 <_printf_i+0x182>
 800953e:	0649      	lsls	r1, r1, #25
 8009540:	d5d9      	bpl.n	80094f6 <_printf_i+0x46>
 8009542:	1d11      	adds	r1, r2, #4
 8009544:	6019      	str	r1, [r3, #0]
 8009546:	2300      	movs	r3, #0
 8009548:	5ed5      	ldrsh	r5, [r2, r3]
 800954a:	2d00      	cmp	r5, #0
 800954c:	da03      	bge.n	8009556 <_printf_i+0xa6>
 800954e:	232d      	movs	r3, #45	; 0x2d
 8009550:	9a04      	ldr	r2, [sp, #16]
 8009552:	426d      	negs	r5, r5
 8009554:	7013      	strb	r3, [r2, #0]
 8009556:	4b62      	ldr	r3, [pc, #392]	; (80096e0 <_printf_i+0x230>)
 8009558:	270a      	movs	r7, #10
 800955a:	9303      	str	r3, [sp, #12]
 800955c:	e02f      	b.n	80095be <_printf_i+0x10e>
 800955e:	6820      	ldr	r0, [r4, #0]
 8009560:	6819      	ldr	r1, [r3, #0]
 8009562:	0605      	lsls	r5, r0, #24
 8009564:	d503      	bpl.n	800956e <_printf_i+0xbe>
 8009566:	1d08      	adds	r0, r1, #4
 8009568:	6018      	str	r0, [r3, #0]
 800956a:	680d      	ldr	r5, [r1, #0]
 800956c:	e005      	b.n	800957a <_printf_i+0xca>
 800956e:	0640      	lsls	r0, r0, #25
 8009570:	d5f9      	bpl.n	8009566 <_printf_i+0xb6>
 8009572:	680d      	ldr	r5, [r1, #0]
 8009574:	1d08      	adds	r0, r1, #4
 8009576:	6018      	str	r0, [r3, #0]
 8009578:	b2ad      	uxth	r5, r5
 800957a:	4b59      	ldr	r3, [pc, #356]	; (80096e0 <_printf_i+0x230>)
 800957c:	2708      	movs	r7, #8
 800957e:	9303      	str	r3, [sp, #12]
 8009580:	2a6f      	cmp	r2, #111	; 0x6f
 8009582:	d018      	beq.n	80095b6 <_printf_i+0x106>
 8009584:	270a      	movs	r7, #10
 8009586:	e016      	b.n	80095b6 <_printf_i+0x106>
 8009588:	3145      	adds	r1, #69	; 0x45
 800958a:	700a      	strb	r2, [r1, #0]
 800958c:	4a54      	ldr	r2, [pc, #336]	; (80096e0 <_printf_i+0x230>)
 800958e:	9203      	str	r2, [sp, #12]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	6821      	ldr	r1, [r4, #0]
 8009594:	1d10      	adds	r0, r2, #4
 8009596:	6018      	str	r0, [r3, #0]
 8009598:	6815      	ldr	r5, [r2, #0]
 800959a:	0608      	lsls	r0, r1, #24
 800959c:	d522      	bpl.n	80095e4 <_printf_i+0x134>
 800959e:	07cb      	lsls	r3, r1, #31
 80095a0:	d502      	bpl.n	80095a8 <_printf_i+0xf8>
 80095a2:	2320      	movs	r3, #32
 80095a4:	4319      	orrs	r1, r3
 80095a6:	6021      	str	r1, [r4, #0]
 80095a8:	2710      	movs	r7, #16
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	d103      	bne.n	80095b6 <_printf_i+0x106>
 80095ae:	2320      	movs	r3, #32
 80095b0:	6822      	ldr	r2, [r4, #0]
 80095b2:	439a      	bics	r2, r3
 80095b4:	6022      	str	r2, [r4, #0]
 80095b6:	0023      	movs	r3, r4
 80095b8:	2200      	movs	r2, #0
 80095ba:	3343      	adds	r3, #67	; 0x43
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	6863      	ldr	r3, [r4, #4]
 80095c0:	60a3      	str	r3, [r4, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	db5c      	blt.n	8009680 <_printf_i+0x1d0>
 80095c6:	2204      	movs	r2, #4
 80095c8:	6821      	ldr	r1, [r4, #0]
 80095ca:	4391      	bics	r1, r2
 80095cc:	6021      	str	r1, [r4, #0]
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	d158      	bne.n	8009684 <_printf_i+0x1d4>
 80095d2:	9e04      	ldr	r6, [sp, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d064      	beq.n	80096a2 <_printf_i+0x1f2>
 80095d8:	0026      	movs	r6, r4
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	3642      	adds	r6, #66	; 0x42
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	7033      	strb	r3, [r6, #0]
 80095e2:	e05e      	b.n	80096a2 <_printf_i+0x1f2>
 80095e4:	0648      	lsls	r0, r1, #25
 80095e6:	d5da      	bpl.n	800959e <_printf_i+0xee>
 80095e8:	b2ad      	uxth	r5, r5
 80095ea:	e7d8      	b.n	800959e <_printf_i+0xee>
 80095ec:	6809      	ldr	r1, [r1, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	0608      	lsls	r0, r1, #24
 80095f2:	d505      	bpl.n	8009600 <_printf_i+0x150>
 80095f4:	1d11      	adds	r1, r2, #4
 80095f6:	6019      	str	r1, [r3, #0]
 80095f8:	6813      	ldr	r3, [r2, #0]
 80095fa:	6962      	ldr	r2, [r4, #20]
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e006      	b.n	800960e <_printf_i+0x15e>
 8009600:	0649      	lsls	r1, r1, #25
 8009602:	d5f7      	bpl.n	80095f4 <_printf_i+0x144>
 8009604:	1d11      	adds	r1, r2, #4
 8009606:	6019      	str	r1, [r3, #0]
 8009608:	6813      	ldr	r3, [r2, #0]
 800960a:	8aa2      	ldrh	r2, [r4, #20]
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	9e04      	ldr	r6, [sp, #16]
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	e054      	b.n	80096c0 <_printf_i+0x210>
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	1d11      	adds	r1, r2, #4
 800961a:	6019      	str	r1, [r3, #0]
 800961c:	6816      	ldr	r6, [r2, #0]
 800961e:	2100      	movs	r1, #0
 8009620:	6862      	ldr	r2, [r4, #4]
 8009622:	0030      	movs	r0, r6
 8009624:	f000 f972 	bl	800990c <memchr>
 8009628:	2800      	cmp	r0, #0
 800962a:	d001      	beq.n	8009630 <_printf_i+0x180>
 800962c:	1b80      	subs	r0, r0, r6
 800962e:	6060      	str	r0, [r4, #4]
 8009630:	6863      	ldr	r3, [r4, #4]
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	2300      	movs	r3, #0
 8009636:	9a04      	ldr	r2, [sp, #16]
 8009638:	7013      	strb	r3, [r2, #0]
 800963a:	e041      	b.n	80096c0 <_printf_i+0x210>
 800963c:	6923      	ldr	r3, [r4, #16]
 800963e:	0032      	movs	r2, r6
 8009640:	9906      	ldr	r1, [sp, #24]
 8009642:	9805      	ldr	r0, [sp, #20]
 8009644:	9d07      	ldr	r5, [sp, #28]
 8009646:	47a8      	blx	r5
 8009648:	1c43      	adds	r3, r0, #1
 800964a:	d043      	beq.n	80096d4 <_printf_i+0x224>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	2500      	movs	r5, #0
 8009650:	079b      	lsls	r3, r3, #30
 8009652:	d40f      	bmi.n	8009674 <_printf_i+0x1c4>
 8009654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009656:	68e0      	ldr	r0, [r4, #12]
 8009658:	4298      	cmp	r0, r3
 800965a:	da3d      	bge.n	80096d8 <_printf_i+0x228>
 800965c:	0018      	movs	r0, r3
 800965e:	e03b      	b.n	80096d8 <_printf_i+0x228>
 8009660:	0022      	movs	r2, r4
 8009662:	2301      	movs	r3, #1
 8009664:	3219      	adds	r2, #25
 8009666:	9906      	ldr	r1, [sp, #24]
 8009668:	9805      	ldr	r0, [sp, #20]
 800966a:	9e07      	ldr	r6, [sp, #28]
 800966c:	47b0      	blx	r6
 800966e:	1c43      	adds	r3, r0, #1
 8009670:	d030      	beq.n	80096d4 <_printf_i+0x224>
 8009672:	3501      	adds	r5, #1
 8009674:	68e3      	ldr	r3, [r4, #12]
 8009676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009678:	1a9b      	subs	r3, r3, r2
 800967a:	429d      	cmp	r5, r3
 800967c:	dbf0      	blt.n	8009660 <_printf_i+0x1b0>
 800967e:	e7e9      	b.n	8009654 <_printf_i+0x1a4>
 8009680:	2d00      	cmp	r5, #0
 8009682:	d0a9      	beq.n	80095d8 <_printf_i+0x128>
 8009684:	9e04      	ldr	r6, [sp, #16]
 8009686:	0028      	movs	r0, r5
 8009688:	0039      	movs	r1, r7
 800968a:	f7f6 fde9 	bl	8000260 <__aeabi_uidivmod>
 800968e:	9b03      	ldr	r3, [sp, #12]
 8009690:	3e01      	subs	r6, #1
 8009692:	5c5b      	ldrb	r3, [r3, r1]
 8009694:	0028      	movs	r0, r5
 8009696:	7033      	strb	r3, [r6, #0]
 8009698:	0039      	movs	r1, r7
 800969a:	f7f6 fd5b 	bl	8000154 <__udivsi3>
 800969e:	1e05      	subs	r5, r0, #0
 80096a0:	d1f1      	bne.n	8009686 <_printf_i+0x1d6>
 80096a2:	2f08      	cmp	r7, #8
 80096a4:	d109      	bne.n	80096ba <_printf_i+0x20a>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	07db      	lsls	r3, r3, #31
 80096aa:	d506      	bpl.n	80096ba <_printf_i+0x20a>
 80096ac:	6863      	ldr	r3, [r4, #4]
 80096ae:	6922      	ldr	r2, [r4, #16]
 80096b0:	4293      	cmp	r3, r2
 80096b2:	dc02      	bgt.n	80096ba <_printf_i+0x20a>
 80096b4:	2330      	movs	r3, #48	; 0x30
 80096b6:	3e01      	subs	r6, #1
 80096b8:	7033      	strb	r3, [r6, #0]
 80096ba:	9b04      	ldr	r3, [sp, #16]
 80096bc:	1b9b      	subs	r3, r3, r6
 80096be:	6123      	str	r3, [r4, #16]
 80096c0:	9b07      	ldr	r3, [sp, #28]
 80096c2:	aa09      	add	r2, sp, #36	; 0x24
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	0021      	movs	r1, r4
 80096c8:	9b06      	ldr	r3, [sp, #24]
 80096ca:	9805      	ldr	r0, [sp, #20]
 80096cc:	f7ff fe82 	bl	80093d4 <_printf_common>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d1b3      	bne.n	800963c <_printf_i+0x18c>
 80096d4:	2001      	movs	r0, #1
 80096d6:	4240      	negs	r0, r0
 80096d8:	b00b      	add	sp, #44	; 0x2c
 80096da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096dc:	0800a616 	.word	0x0800a616
 80096e0:	0800a605 	.word	0x0800a605

080096e4 <siscanf>:
 80096e4:	b40e      	push	{r1, r2, r3}
 80096e6:	2381      	movs	r3, #129	; 0x81
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	b09d      	sub	sp, #116	; 0x74
 80096ec:	ac02      	add	r4, sp, #8
 80096ee:	ad21      	add	r5, sp, #132	; 0x84
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	cd40      	ldmia	r5!, {r6}
 80096f4:	81a3      	strh	r3, [r4, #12]
 80096f6:	9002      	str	r0, [sp, #8]
 80096f8:	9006      	str	r0, [sp, #24]
 80096fa:	f7f6 fd05 	bl	8000108 <strlen>
 80096fe:	4b0b      	ldr	r3, [pc, #44]	; (800972c <siscanf+0x48>)
 8009700:	6060      	str	r0, [r4, #4]
 8009702:	6263      	str	r3, [r4, #36]	; 0x24
 8009704:	2300      	movs	r3, #0
 8009706:	6160      	str	r0, [r4, #20]
 8009708:	4809      	ldr	r0, [pc, #36]	; (8009730 <siscanf+0x4c>)
 800970a:	6363      	str	r3, [r4, #52]	; 0x34
 800970c:	64a3      	str	r3, [r4, #72]	; 0x48
 800970e:	3b01      	subs	r3, #1
 8009710:	81e3      	strh	r3, [r4, #14]
 8009712:	0032      	movs	r2, r6
 8009714:	002b      	movs	r3, r5
 8009716:	0021      	movs	r1, r4
 8009718:	6800      	ldr	r0, [r0, #0]
 800971a:	9501      	str	r5, [sp, #4]
 800971c:	f000 f994 	bl	8009a48 <__ssvfiscanf_r>
 8009720:	b01d      	add	sp, #116	; 0x74
 8009722:	bc70      	pop	{r4, r5, r6}
 8009724:	bc08      	pop	{r3}
 8009726:	b003      	add	sp, #12
 8009728:	4718      	bx	r3
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	08009735 	.word	0x08009735
 8009730:	20000070 	.word	0x20000070

08009734 <__seofread>:
 8009734:	2000      	movs	r0, #0
 8009736:	4770      	bx	lr

08009738 <strcpy>:
 8009738:	1c03      	adds	r3, r0, #0
 800973a:	780a      	ldrb	r2, [r1, #0]
 800973c:	3101      	adds	r1, #1
 800973e:	701a      	strb	r2, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	2a00      	cmp	r2, #0
 8009744:	d1f9      	bne.n	800973a <strcpy+0x2>
 8009746:	4770      	bx	lr

08009748 <strncmp>:
 8009748:	2300      	movs	r3, #0
 800974a:	b530      	push	{r4, r5, lr}
 800974c:	429a      	cmp	r2, r3
 800974e:	d00a      	beq.n	8009766 <strncmp+0x1e>
 8009750:	3a01      	subs	r2, #1
 8009752:	5cc4      	ldrb	r4, [r0, r3]
 8009754:	5ccd      	ldrb	r5, [r1, r3]
 8009756:	42ac      	cmp	r4, r5
 8009758:	d104      	bne.n	8009764 <strncmp+0x1c>
 800975a:	429a      	cmp	r2, r3
 800975c:	d002      	beq.n	8009764 <strncmp+0x1c>
 800975e:	3301      	adds	r3, #1
 8009760:	2c00      	cmp	r4, #0
 8009762:	d1f6      	bne.n	8009752 <strncmp+0xa>
 8009764:	1b63      	subs	r3, r4, r5
 8009766:	0018      	movs	r0, r3
 8009768:	bd30      	pop	{r4, r5, pc}

0800976a <_strtoul_l.isra.0>:
 800976a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976c:	001f      	movs	r7, r3
 800976e:	000e      	movs	r6, r1
 8009770:	b087      	sub	sp, #28
 8009772:	9005      	str	r0, [sp, #20]
 8009774:	9103      	str	r1, [sp, #12]
 8009776:	9201      	str	r2, [sp, #4]
 8009778:	980c      	ldr	r0, [sp, #48]	; 0x30
 800977a:	7834      	ldrb	r4, [r6, #0]
 800977c:	f000 f8a2 	bl	80098c4 <__locale_ctype_ptr_l>
 8009780:	2208      	movs	r2, #8
 8009782:	1900      	adds	r0, r0, r4
 8009784:	7843      	ldrb	r3, [r0, #1]
 8009786:	1c75      	adds	r5, r6, #1
 8009788:	4013      	ands	r3, r2
 800978a:	d10c      	bne.n	80097a6 <_strtoul_l.isra.0+0x3c>
 800978c:	2c2d      	cmp	r4, #45	; 0x2d
 800978e:	d10c      	bne.n	80097aa <_strtoul_l.isra.0+0x40>
 8009790:	3301      	adds	r3, #1
 8009792:	782c      	ldrb	r4, [r5, #0]
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	1cb5      	adds	r5, r6, #2
 8009798:	2f00      	cmp	r7, #0
 800979a:	d00c      	beq.n	80097b6 <_strtoul_l.isra.0+0x4c>
 800979c:	2f10      	cmp	r7, #16
 800979e:	d114      	bne.n	80097ca <_strtoul_l.isra.0+0x60>
 80097a0:	2c30      	cmp	r4, #48	; 0x30
 80097a2:	d00a      	beq.n	80097ba <_strtoul_l.isra.0+0x50>
 80097a4:	e011      	b.n	80097ca <_strtoul_l.isra.0+0x60>
 80097a6:	002e      	movs	r6, r5
 80097a8:	e7e6      	b.n	8009778 <_strtoul_l.isra.0+0xe>
 80097aa:	9302      	str	r3, [sp, #8]
 80097ac:	2c2b      	cmp	r4, #43	; 0x2b
 80097ae:	d1f3      	bne.n	8009798 <_strtoul_l.isra.0+0x2e>
 80097b0:	782c      	ldrb	r4, [r5, #0]
 80097b2:	1cb5      	adds	r5, r6, #2
 80097b4:	e7f0      	b.n	8009798 <_strtoul_l.isra.0+0x2e>
 80097b6:	2c30      	cmp	r4, #48	; 0x30
 80097b8:	d12f      	bne.n	800981a <_strtoul_l.isra.0+0xb0>
 80097ba:	2220      	movs	r2, #32
 80097bc:	782b      	ldrb	r3, [r5, #0]
 80097be:	4393      	bics	r3, r2
 80097c0:	2b58      	cmp	r3, #88	; 0x58
 80097c2:	d154      	bne.n	800986e <_strtoul_l.isra.0+0x104>
 80097c4:	2710      	movs	r7, #16
 80097c6:	786c      	ldrb	r4, [r5, #1]
 80097c8:	3502      	adds	r5, #2
 80097ca:	2001      	movs	r0, #1
 80097cc:	0039      	movs	r1, r7
 80097ce:	4240      	negs	r0, r0
 80097d0:	f7f6 fcc0 	bl	8000154 <__udivsi3>
 80097d4:	0006      	movs	r6, r0
 80097d6:	2001      	movs	r0, #1
 80097d8:	0039      	movs	r1, r7
 80097da:	4240      	negs	r0, r0
 80097dc:	f7f6 fd40 	bl	8000260 <__aeabi_uidivmod>
 80097e0:	2300      	movs	r3, #0
 80097e2:	9104      	str	r1, [sp, #16]
 80097e4:	2101      	movs	r1, #1
 80097e6:	2201      	movs	r2, #1
 80097e8:	0018      	movs	r0, r3
 80097ea:	468c      	mov	ip, r1
 80097ec:	4252      	negs	r2, r2
 80097ee:	0021      	movs	r1, r4
 80097f0:	3930      	subs	r1, #48	; 0x30
 80097f2:	2909      	cmp	r1, #9
 80097f4:	d813      	bhi.n	800981e <_strtoul_l.isra.0+0xb4>
 80097f6:	000c      	movs	r4, r1
 80097f8:	42a7      	cmp	r7, r4
 80097fa:	dd1e      	ble.n	800983a <_strtoul_l.isra.0+0xd0>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	db1a      	blt.n	8009836 <_strtoul_l.isra.0+0xcc>
 8009800:	0013      	movs	r3, r2
 8009802:	4286      	cmp	r6, r0
 8009804:	d306      	bcc.n	8009814 <_strtoul_l.isra.0+0xaa>
 8009806:	d102      	bne.n	800980e <_strtoul_l.isra.0+0xa4>
 8009808:	9904      	ldr	r1, [sp, #16]
 800980a:	42a1      	cmp	r1, r4
 800980c:	db02      	blt.n	8009814 <_strtoul_l.isra.0+0xaa>
 800980e:	4663      	mov	r3, ip
 8009810:	4378      	muls	r0, r7
 8009812:	1820      	adds	r0, r4, r0
 8009814:	782c      	ldrb	r4, [r5, #0]
 8009816:	3501      	adds	r5, #1
 8009818:	e7e9      	b.n	80097ee <_strtoul_l.isra.0+0x84>
 800981a:	270a      	movs	r7, #10
 800981c:	e7d5      	b.n	80097ca <_strtoul_l.isra.0+0x60>
 800981e:	0021      	movs	r1, r4
 8009820:	3941      	subs	r1, #65	; 0x41
 8009822:	2919      	cmp	r1, #25
 8009824:	d801      	bhi.n	800982a <_strtoul_l.isra.0+0xc0>
 8009826:	3c37      	subs	r4, #55	; 0x37
 8009828:	e7e6      	b.n	80097f8 <_strtoul_l.isra.0+0x8e>
 800982a:	0021      	movs	r1, r4
 800982c:	3961      	subs	r1, #97	; 0x61
 800982e:	2919      	cmp	r1, #25
 8009830:	d803      	bhi.n	800983a <_strtoul_l.isra.0+0xd0>
 8009832:	3c57      	subs	r4, #87	; 0x57
 8009834:	e7e0      	b.n	80097f8 <_strtoul_l.isra.0+0x8e>
 8009836:	0013      	movs	r3, r2
 8009838:	e7ec      	b.n	8009814 <_strtoul_l.isra.0+0xaa>
 800983a:	2b00      	cmp	r3, #0
 800983c:	da09      	bge.n	8009852 <_strtoul_l.isra.0+0xe8>
 800983e:	2322      	movs	r3, #34	; 0x22
 8009840:	2001      	movs	r0, #1
 8009842:	9a05      	ldr	r2, [sp, #20]
 8009844:	4240      	negs	r0, r0
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	9b01      	ldr	r3, [sp, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10b      	bne.n	8009866 <_strtoul_l.isra.0+0xfc>
 800984e:	b007      	add	sp, #28
 8009850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009852:	9a02      	ldr	r2, [sp, #8]
 8009854:	2a00      	cmp	r2, #0
 8009856:	d000      	beq.n	800985a <_strtoul_l.isra.0+0xf0>
 8009858:	4240      	negs	r0, r0
 800985a:	9a01      	ldr	r2, [sp, #4]
 800985c:	2a00      	cmp	r2, #0
 800985e:	d0f6      	beq.n	800984e <_strtoul_l.isra.0+0xe4>
 8009860:	9a03      	ldr	r2, [sp, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d000      	beq.n	8009868 <_strtoul_l.isra.0+0xfe>
 8009866:	1e6a      	subs	r2, r5, #1
 8009868:	9b01      	ldr	r3, [sp, #4]
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e7ef      	b.n	800984e <_strtoul_l.isra.0+0xe4>
 800986e:	2430      	movs	r4, #48	; 0x30
 8009870:	2f00      	cmp	r7, #0
 8009872:	d1aa      	bne.n	80097ca <_strtoul_l.isra.0+0x60>
 8009874:	3708      	adds	r7, #8
 8009876:	e7a8      	b.n	80097ca <_strtoul_l.isra.0+0x60>

08009878 <_strtoul_r>:
 8009878:	b513      	push	{r0, r1, r4, lr}
 800987a:	4c05      	ldr	r4, [pc, #20]	; (8009890 <_strtoul_r+0x18>)
 800987c:	6824      	ldr	r4, [r4, #0]
 800987e:	6a24      	ldr	r4, [r4, #32]
 8009880:	2c00      	cmp	r4, #0
 8009882:	d100      	bne.n	8009886 <_strtoul_r+0xe>
 8009884:	4c03      	ldr	r4, [pc, #12]	; (8009894 <_strtoul_r+0x1c>)
 8009886:	9400      	str	r4, [sp, #0]
 8009888:	f7ff ff6f 	bl	800976a <_strtoul_l.isra.0>
 800988c:	bd16      	pop	{r1, r2, r4, pc}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	20000070 	.word	0x20000070
 8009894:	2000011c 	.word	0x2000011c

08009898 <strtoul>:
 8009898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800989a:	0013      	movs	r3, r2
 800989c:	4a06      	ldr	r2, [pc, #24]	; (80098b8 <strtoul+0x20>)
 800989e:	0005      	movs	r5, r0
 80098a0:	6810      	ldr	r0, [r2, #0]
 80098a2:	6a04      	ldr	r4, [r0, #32]
 80098a4:	2c00      	cmp	r4, #0
 80098a6:	d100      	bne.n	80098aa <strtoul+0x12>
 80098a8:	4c04      	ldr	r4, [pc, #16]	; (80098bc <strtoul+0x24>)
 80098aa:	000a      	movs	r2, r1
 80098ac:	9400      	str	r4, [sp, #0]
 80098ae:	0029      	movs	r1, r5
 80098b0:	f7ff ff5b 	bl	800976a <_strtoul_l.isra.0>
 80098b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	20000070 	.word	0x20000070
 80098bc:	2000011c 	.word	0x2000011c

080098c0 <__env_lock>:
 80098c0:	4770      	bx	lr

080098c2 <__env_unlock>:
 80098c2:	4770      	bx	lr

080098c4 <__locale_ctype_ptr_l>:
 80098c4:	30ec      	adds	r0, #236	; 0xec
 80098c6:	6800      	ldr	r0, [r0, #0]
 80098c8:	4770      	bx	lr
	...

080098cc <__locale_ctype_ptr>:
 80098cc:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <__locale_ctype_ptr+0x14>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d100      	bne.n	80098d8 <__locale_ctype_ptr+0xc>
 80098d6:	4b03      	ldr	r3, [pc, #12]	; (80098e4 <__locale_ctype_ptr+0x18>)
 80098d8:	33ec      	adds	r3, #236	; 0xec
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	4770      	bx	lr
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	20000070 	.word	0x20000070
 80098e4:	2000011c 	.word	0x2000011c

080098e8 <__ascii_mbtowc>:
 80098e8:	b082      	sub	sp, #8
 80098ea:	2900      	cmp	r1, #0
 80098ec:	d100      	bne.n	80098f0 <__ascii_mbtowc+0x8>
 80098ee:	a901      	add	r1, sp, #4
 80098f0:	1e10      	subs	r0, r2, #0
 80098f2:	d006      	beq.n	8009902 <__ascii_mbtowc+0x1a>
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d006      	beq.n	8009906 <__ascii_mbtowc+0x1e>
 80098f8:	7813      	ldrb	r3, [r2, #0]
 80098fa:	600b      	str	r3, [r1, #0]
 80098fc:	7810      	ldrb	r0, [r2, #0]
 80098fe:	1e43      	subs	r3, r0, #1
 8009900:	4198      	sbcs	r0, r3
 8009902:	b002      	add	sp, #8
 8009904:	4770      	bx	lr
 8009906:	2002      	movs	r0, #2
 8009908:	4240      	negs	r0, r0
 800990a:	e7fa      	b.n	8009902 <__ascii_mbtowc+0x1a>

0800990c <memchr>:
 800990c:	b2c9      	uxtb	r1, r1
 800990e:	1882      	adds	r2, r0, r2
 8009910:	4290      	cmp	r0, r2
 8009912:	d101      	bne.n	8009918 <memchr+0xc>
 8009914:	2000      	movs	r0, #0
 8009916:	4770      	bx	lr
 8009918:	7803      	ldrb	r3, [r0, #0]
 800991a:	428b      	cmp	r3, r1
 800991c:	d0fb      	beq.n	8009916 <memchr+0xa>
 800991e:	3001      	adds	r0, #1
 8009920:	e7f6      	b.n	8009910 <memchr+0x4>

08009922 <memmove>:
 8009922:	b510      	push	{r4, lr}
 8009924:	4288      	cmp	r0, r1
 8009926:	d902      	bls.n	800992e <memmove+0xc>
 8009928:	188b      	adds	r3, r1, r2
 800992a:	4298      	cmp	r0, r3
 800992c:	d308      	bcc.n	8009940 <memmove+0x1e>
 800992e:	2300      	movs	r3, #0
 8009930:	429a      	cmp	r2, r3
 8009932:	d007      	beq.n	8009944 <memmove+0x22>
 8009934:	5ccc      	ldrb	r4, [r1, r3]
 8009936:	54c4      	strb	r4, [r0, r3]
 8009938:	3301      	adds	r3, #1
 800993a:	e7f9      	b.n	8009930 <memmove+0xe>
 800993c:	5c8b      	ldrb	r3, [r1, r2]
 800993e:	5483      	strb	r3, [r0, r2]
 8009940:	3a01      	subs	r2, #1
 8009942:	d2fb      	bcs.n	800993c <memmove+0x1a>
 8009944:	bd10      	pop	{r4, pc}

08009946 <_realloc_r>:
 8009946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009948:	0007      	movs	r7, r0
 800994a:	000d      	movs	r5, r1
 800994c:	0016      	movs	r6, r2
 800994e:	2900      	cmp	r1, #0
 8009950:	d105      	bne.n	800995e <_realloc_r+0x18>
 8009952:	0011      	movs	r1, r2
 8009954:	f7fe ffee 	bl	8008934 <_malloc_r>
 8009958:	0004      	movs	r4, r0
 800995a:	0020      	movs	r0, r4
 800995c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800995e:	2a00      	cmp	r2, #0
 8009960:	d103      	bne.n	800996a <_realloc_r+0x24>
 8009962:	f7fe ff9d 	bl	80088a0 <_free_r>
 8009966:	0034      	movs	r4, r6
 8009968:	e7f7      	b.n	800995a <_realloc_r+0x14>
 800996a:	f000 fc69 	bl	800a240 <_malloc_usable_size_r>
 800996e:	002c      	movs	r4, r5
 8009970:	4286      	cmp	r6, r0
 8009972:	d9f2      	bls.n	800995a <_realloc_r+0x14>
 8009974:	0031      	movs	r1, r6
 8009976:	0038      	movs	r0, r7
 8009978:	f7fe ffdc 	bl	8008934 <_malloc_r>
 800997c:	1e04      	subs	r4, r0, #0
 800997e:	d0ec      	beq.n	800995a <_realloc_r+0x14>
 8009980:	0029      	movs	r1, r5
 8009982:	0032      	movs	r2, r6
 8009984:	f7fe fd24 	bl	80083d0 <memcpy>
 8009988:	0029      	movs	r1, r5
 800998a:	0038      	movs	r0, r7
 800998c:	f7fe ff88 	bl	80088a0 <_free_r>
 8009990:	e7e3      	b.n	800995a <_realloc_r+0x14>

08009992 <_sungetc_r>:
 8009992:	b570      	push	{r4, r5, r6, lr}
 8009994:	0014      	movs	r4, r2
 8009996:	1c4b      	adds	r3, r1, #1
 8009998:	d103      	bne.n	80099a2 <_sungetc_r+0x10>
 800999a:	2501      	movs	r5, #1
 800999c:	426d      	negs	r5, r5
 800999e:	0028      	movs	r0, r5
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
 80099a2:	8993      	ldrh	r3, [r2, #12]
 80099a4:	2220      	movs	r2, #32
 80099a6:	4393      	bics	r3, r2
 80099a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	b2ce      	uxtb	r6, r1
 80099ae:	b2cd      	uxtb	r5, r1
 80099b0:	6863      	ldr	r3, [r4, #4]
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	d010      	beq.n	80099d8 <_sungetc_r+0x46>
 80099b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80099b8:	4293      	cmp	r3, r2
 80099ba:	da07      	bge.n	80099cc <_sungetc_r+0x3a>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	3b01      	subs	r3, #1
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	701e      	strb	r6, [r3, #0]
 80099c4:	6863      	ldr	r3, [r4, #4]
 80099c6:	3301      	adds	r3, #1
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	e7e8      	b.n	800999e <_sungetc_r+0xc>
 80099cc:	0021      	movs	r1, r4
 80099ce:	f000 fbed 	bl	800a1ac <__submore>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d0f2      	beq.n	80099bc <_sungetc_r+0x2a>
 80099d6:	e7e0      	b.n	800999a <_sungetc_r+0x8>
 80099d8:	6921      	ldr	r1, [r4, #16]
 80099da:	6822      	ldr	r2, [r4, #0]
 80099dc:	2900      	cmp	r1, #0
 80099de:	d007      	beq.n	80099f0 <_sungetc_r+0x5e>
 80099e0:	4291      	cmp	r1, r2
 80099e2:	d205      	bcs.n	80099f0 <_sungetc_r+0x5e>
 80099e4:	1e51      	subs	r1, r2, #1
 80099e6:	7808      	ldrb	r0, [r1, #0]
 80099e8:	4285      	cmp	r5, r0
 80099ea:	d101      	bne.n	80099f0 <_sungetc_r+0x5e>
 80099ec:	6021      	str	r1, [r4, #0]
 80099ee:	e7ea      	b.n	80099c6 <_sungetc_r+0x34>
 80099f0:	6423      	str	r3, [r4, #64]	; 0x40
 80099f2:	0023      	movs	r3, r4
 80099f4:	3344      	adds	r3, #68	; 0x44
 80099f6:	6363      	str	r3, [r4, #52]	; 0x34
 80099f8:	2303      	movs	r3, #3
 80099fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80099fc:	0023      	movs	r3, r4
 80099fe:	3346      	adds	r3, #70	; 0x46
 8009a00:	63e2      	str	r2, [r4, #60]	; 0x3c
 8009a02:	701e      	strb	r6, [r3, #0]
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	2301      	movs	r3, #1
 8009a08:	e7de      	b.n	80099c8 <_sungetc_r+0x36>

08009a0a <__ssrefill_r>:
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	000c      	movs	r4, r1
 8009a0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009a10:	2900      	cmp	r1, #0
 8009a12:	d00e      	beq.n	8009a32 <__ssrefill_r+0x28>
 8009a14:	0023      	movs	r3, r4
 8009a16:	3344      	adds	r3, #68	; 0x44
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	d001      	beq.n	8009a20 <__ssrefill_r+0x16>
 8009a1c:	f7fe ff40 	bl	80088a0 <_free_r>
 8009a20:	2000      	movs	r0, #0
 8009a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a24:	6360      	str	r0, [r4, #52]	; 0x34
 8009a26:	6063      	str	r3, [r4, #4]
 8009a28:	4283      	cmp	r3, r0
 8009a2a:	d002      	beq.n	8009a32 <__ssrefill_r+0x28>
 8009a2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	bd10      	pop	{r4, pc}
 8009a32:	6923      	ldr	r3, [r4, #16]
 8009a34:	2001      	movs	r0, #1
 8009a36:	6023      	str	r3, [r4, #0]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	89a2      	ldrh	r2, [r4, #12]
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	3320      	adds	r3, #32
 8009a40:	4313      	orrs	r3, r2
 8009a42:	81a3      	strh	r3, [r4, #12]
 8009a44:	4240      	negs	r0, r0
 8009a46:	e7f3      	b.n	8009a30 <__ssrefill_r+0x26>

08009a48 <__ssvfiscanf_r>:
 8009a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4a:	4cbd      	ldr	r4, [pc, #756]	; (8009d40 <__ssvfiscanf_r+0x2f8>)
 8009a4c:	2586      	movs	r5, #134	; 0x86
 8009a4e:	44a5      	add	sp, r4
 8009a50:	9303      	str	r3, [sp, #12]
 8009a52:	2300      	movs	r3, #0
 8009a54:	9348      	str	r3, [sp, #288]	; 0x120
 8009a56:	9349      	str	r3, [sp, #292]	; 0x124
 8009a58:	ab05      	add	r3, sp, #20
 8009a5a:	934a      	str	r3, [sp, #296]	; 0x128
 8009a5c:	23be      	movs	r3, #190	; 0xbe
 8009a5e:	006d      	lsls	r5, r5, #1
 8009a60:	9000      	str	r0, [sp, #0]
 8009a62:	000c      	movs	r4, r1
 8009a64:	a802      	add	r0, sp, #8
 8009a66:	49b7      	ldr	r1, [pc, #732]	; (8009d44 <__ssvfiscanf_r+0x2fc>)
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	1940      	adds	r0, r0, r5
 8009a6c:	27c0      	movs	r7, #192	; 0xc0
 8009a6e:	50c1      	str	r1, [r0, r3]
 8009a70:	ab02      	add	r3, sp, #8
 8009a72:	195b      	adds	r3, r3, r5
 8009a74:	0015      	movs	r5, r2
 8009a76:	49b4      	ldr	r1, [pc, #720]	; (8009d48 <__ssvfiscanf_r+0x300>)
 8009a78:	007f      	lsls	r7, r7, #1
 8009a7a:	51d9      	str	r1, [r3, r7]
 8009a7c:	782b      	ldrb	r3, [r5, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d100      	bne.n	8009a84 <__ssvfiscanf_r+0x3c>
 8009a82:	e15b      	b.n	8009d3c <__ssvfiscanf_r+0x2f4>
 8009a84:	f7ff ff22 	bl	80098cc <__locale_ctype_ptr>
 8009a88:	2208      	movs	r2, #8
 8009a8a:	782b      	ldrb	r3, [r5, #0]
 8009a8c:	18c0      	adds	r0, r0, r3
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	7843      	ldrb	r3, [r0, #1]
 8009a92:	4013      	ands	r3, r2
 8009a94:	d141      	bne.n	8009b1a <__ssvfiscanf_r+0xd2>
 8009a96:	9a01      	ldr	r2, [sp, #4]
 8009a98:	1c6e      	adds	r6, r5, #1
 8009a9a:	2a25      	cmp	r2, #37	; 0x25
 8009a9c:	d000      	beq.n	8009aa0 <__ssvfiscanf_r+0x58>
 8009a9e:	e0a8      	b.n	8009bf2 <__ssvfiscanf_r+0x1aa>
 8009aa0:	9347      	str	r3, [sp, #284]	; 0x11c
 8009aa2:	9345      	str	r3, [sp, #276]	; 0x114
 8009aa4:	786b      	ldrb	r3, [r5, #1]
 8009aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa8:	d102      	bne.n	8009ab0 <__ssvfiscanf_r+0x68>
 8009aaa:	3b1a      	subs	r3, #26
 8009aac:	9345      	str	r3, [sp, #276]	; 0x114
 8009aae:	1cae      	adds	r6, r5, #2
 8009ab0:	0035      	movs	r5, r6
 8009ab2:	220a      	movs	r2, #10
 8009ab4:	7829      	ldrb	r1, [r5, #0]
 8009ab6:	000b      	movs	r3, r1
 8009ab8:	3b30      	subs	r3, #48	; 0x30
 8009aba:	2b09      	cmp	r3, #9
 8009abc:	d948      	bls.n	8009b50 <__ssvfiscanf_r+0x108>
 8009abe:	4ea3      	ldr	r6, [pc, #652]	; (8009d4c <__ssvfiscanf_r+0x304>)
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	0030      	movs	r0, r6
 8009ac4:	f7ff ff22 	bl	800990c <memchr>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d007      	beq.n	8009adc <__ssvfiscanf_r+0x94>
 8009acc:	2301      	movs	r3, #1
 8009ace:	1b80      	subs	r0, r0, r6
 8009ad0:	4083      	lsls	r3, r0
 8009ad2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	9202      	str	r2, [sp, #8]
 8009ada:	9345      	str	r3, [sp, #276]	; 0x114
 8009adc:	782b      	ldrb	r3, [r5, #0]
 8009ade:	1c6e      	adds	r6, r5, #1
 8009ae0:	2b67      	cmp	r3, #103	; 0x67
 8009ae2:	d858      	bhi.n	8009b96 <__ssvfiscanf_r+0x14e>
 8009ae4:	2b65      	cmp	r3, #101	; 0x65
 8009ae6:	d300      	bcc.n	8009aea <__ssvfiscanf_r+0xa2>
 8009ae8:	e0dd      	b.n	8009ca6 <__ssvfiscanf_r+0x25e>
 8009aea:	2b47      	cmp	r3, #71	; 0x47
 8009aec:	d838      	bhi.n	8009b60 <__ssvfiscanf_r+0x118>
 8009aee:	2b45      	cmp	r3, #69	; 0x45
 8009af0:	d300      	bcc.n	8009af4 <__ssvfiscanf_r+0xac>
 8009af2:	e0d8      	b.n	8009ca6 <__ssvfiscanf_r+0x25e>
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d100      	bne.n	8009afa <__ssvfiscanf_r+0xb2>
 8009af8:	e11d      	b.n	8009d36 <__ssvfiscanf_r+0x2ee>
 8009afa:	2b25      	cmp	r3, #37	; 0x25
 8009afc:	d079      	beq.n	8009bf2 <__ssvfiscanf_r+0x1aa>
 8009afe:	2303      	movs	r3, #3
 8009b00:	934b      	str	r3, [sp, #300]	; 0x12c
 8009b02:	3307      	adds	r3, #7
 8009b04:	9346      	str	r3, [sp, #280]	; 0x118
 8009b06:	e053      	b.n	8009bb0 <__ssvfiscanf_r+0x168>
 8009b08:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	9201      	str	r2, [sp, #4]
 8009b0e:	3201      	adds	r2, #1
 8009b10:	9249      	str	r2, [sp, #292]	; 0x124
 8009b12:	6862      	ldr	r2, [r4, #4]
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	3a01      	subs	r2, #1
 8009b18:	6062      	str	r2, [r4, #4]
 8009b1a:	6863      	ldr	r3, [r4, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dd0b      	ble.n	8009b38 <__ssvfiscanf_r+0xf0>
 8009b20:	f7ff fed4 	bl	80098cc <__locale_ctype_ptr>
 8009b24:	2108      	movs	r1, #8
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	781a      	ldrb	r2, [r3, #0]
 8009b2a:	1880      	adds	r0, r0, r2
 8009b2c:	7842      	ldrb	r2, [r0, #1]
 8009b2e:	420a      	tst	r2, r1
 8009b30:	d1ea      	bne.n	8009b08 <__ssvfiscanf_r+0xc0>
 8009b32:	1c6e      	adds	r6, r5, #1
 8009b34:	0035      	movs	r5, r6
 8009b36:	e7a1      	b.n	8009a7c <__ssvfiscanf_r+0x34>
 8009b38:	2286      	movs	r2, #134	; 0x86
 8009b3a:	ab02      	add	r3, sp, #8
 8009b3c:	0052      	lsls	r2, r2, #1
 8009b3e:	189b      	adds	r3, r3, r2
 8009b40:	59db      	ldr	r3, [r3, r7]
 8009b42:	0021      	movs	r1, r4
 8009b44:	9800      	ldr	r0, [sp, #0]
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	4798      	blx	r3
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d0e8      	beq.n	8009b20 <__ssvfiscanf_r+0xd8>
 8009b4e:	e7f0      	b.n	8009b32 <__ssvfiscanf_r+0xea>
 8009b50:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009b52:	3501      	adds	r5, #1
 8009b54:	9302      	str	r3, [sp, #8]
 8009b56:	4353      	muls	r3, r2
 8009b58:	3b30      	subs	r3, #48	; 0x30
 8009b5a:	1859      	adds	r1, r3, r1
 8009b5c:	9147      	str	r1, [sp, #284]	; 0x11c
 8009b5e:	e7a9      	b.n	8009ab4 <__ssvfiscanf_r+0x6c>
 8009b60:	2b5b      	cmp	r3, #91	; 0x5b
 8009b62:	d100      	bne.n	8009b66 <__ssvfiscanf_r+0x11e>
 8009b64:	e077      	b.n	8009c56 <__ssvfiscanf_r+0x20e>
 8009b66:	d80f      	bhi.n	8009b88 <__ssvfiscanf_r+0x140>
 8009b68:	2b58      	cmp	r3, #88	; 0x58
 8009b6a:	d1c8      	bne.n	8009afe <__ssvfiscanf_r+0xb6>
 8009b6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009b6e:	9201      	str	r2, [sp, #4]
 8009b70:	2280      	movs	r2, #128	; 0x80
 8009b72:	9901      	ldr	r1, [sp, #4]
 8009b74:	0092      	lsls	r2, r2, #2
 8009b76:	430a      	orrs	r2, r1
 8009b78:	9245      	str	r2, [sp, #276]	; 0x114
 8009b7a:	2210      	movs	r2, #16
 8009b7c:	9246      	str	r2, [sp, #280]	; 0x118
 8009b7e:	2203      	movs	r2, #3
 8009b80:	2b6e      	cmp	r3, #110	; 0x6e
 8009b82:	dd14      	ble.n	8009bae <__ssvfiscanf_r+0x166>
 8009b84:	3201      	adds	r2, #1
 8009b86:	e012      	b.n	8009bae <__ssvfiscanf_r+0x166>
 8009b88:	2b63      	cmp	r3, #99	; 0x63
 8009b8a:	d100      	bne.n	8009b8e <__ssvfiscanf_r+0x146>
 8009b8c:	e071      	b.n	8009c72 <__ssvfiscanf_r+0x22a>
 8009b8e:	2b64      	cmp	r3, #100	; 0x64
 8009b90:	d1b5      	bne.n	8009afe <__ssvfiscanf_r+0xb6>
 8009b92:	220a      	movs	r2, #10
 8009b94:	e7f2      	b.n	8009b7c <__ssvfiscanf_r+0x134>
 8009b96:	2b70      	cmp	r3, #112	; 0x70
 8009b98:	d052      	beq.n	8009c40 <__ssvfiscanf_r+0x1f8>
 8009b9a:	d822      	bhi.n	8009be2 <__ssvfiscanf_r+0x19a>
 8009b9c:	2b6e      	cmp	r3, #110	; 0x6e
 8009b9e:	d100      	bne.n	8009ba2 <__ssvfiscanf_r+0x15a>
 8009ba0:	e06f      	b.n	8009c82 <__ssvfiscanf_r+0x23a>
 8009ba2:	d854      	bhi.n	8009c4e <__ssvfiscanf_r+0x206>
 8009ba4:	2b69      	cmp	r3, #105	; 0x69
 8009ba6:	d1aa      	bne.n	8009afe <__ssvfiscanf_r+0xb6>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2203      	movs	r2, #3
 8009bac:	9346      	str	r3, [sp, #280]	; 0x118
 8009bae:	924b      	str	r2, [sp, #300]	; 0x12c
 8009bb0:	6863      	ldr	r3, [r4, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dc00      	bgt.n	8009bb8 <__ssvfiscanf_r+0x170>
 8009bb6:	e078      	b.n	8009caa <__ssvfiscanf_r+0x262>
 8009bb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	065b      	lsls	r3, r3, #25
 8009bbe:	d400      	bmi.n	8009bc2 <__ssvfiscanf_r+0x17a>
 8009bc0:	e08b      	b.n	8009cda <__ssvfiscanf_r+0x292>
 8009bc2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	dd00      	ble.n	8009bca <__ssvfiscanf_r+0x182>
 8009bc8:	e09d      	b.n	8009d06 <__ssvfiscanf_r+0x2be>
 8009bca:	ab03      	add	r3, sp, #12
 8009bcc:	0022      	movs	r2, r4
 8009bce:	a945      	add	r1, sp, #276	; 0x114
 8009bd0:	9800      	ldr	r0, [sp, #0]
 8009bd2:	f000 f8bf 	bl	8009d54 <_scanf_chars>
 8009bd6:	2801      	cmp	r0, #1
 8009bd8:	d100      	bne.n	8009bdc <__ssvfiscanf_r+0x194>
 8009bda:	e0af      	b.n	8009d3c <__ssvfiscanf_r+0x2f4>
 8009bdc:	2802      	cmp	r0, #2
 8009bde:	d1a9      	bne.n	8009b34 <__ssvfiscanf_r+0xec>
 8009be0:	e025      	b.n	8009c2e <__ssvfiscanf_r+0x1e6>
 8009be2:	2b75      	cmp	r3, #117	; 0x75
 8009be4:	d0d5      	beq.n	8009b92 <__ssvfiscanf_r+0x14a>
 8009be6:	2b78      	cmp	r3, #120	; 0x78
 8009be8:	d0c0      	beq.n	8009b6c <__ssvfiscanf_r+0x124>
 8009bea:	2b73      	cmp	r3, #115	; 0x73
 8009bec:	d187      	bne.n	8009afe <__ssvfiscanf_r+0xb6>
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e03d      	b.n	8009c6e <__ssvfiscanf_r+0x226>
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dd0f      	ble.n	8009c18 <__ssvfiscanf_r+0x1d0>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	9901      	ldr	r1, [sp, #4]
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	4291      	cmp	r1, r2
 8009c00:	d000      	beq.n	8009c04 <__ssvfiscanf_r+0x1bc>
 8009c02:	e09b      	b.n	8009d3c <__ssvfiscanf_r+0x2f4>
 8009c04:	3301      	adds	r3, #1
 8009c06:	6862      	ldr	r2, [r4, #4]
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8009c0c:	3a01      	subs	r2, #1
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	3301      	adds	r3, #1
 8009c12:	6062      	str	r2, [r4, #4]
 8009c14:	9349      	str	r3, [sp, #292]	; 0x124
 8009c16:	e78d      	b.n	8009b34 <__ssvfiscanf_r+0xec>
 8009c18:	2286      	movs	r2, #134	; 0x86
 8009c1a:	ab02      	add	r3, sp, #8
 8009c1c:	0052      	lsls	r2, r2, #1
 8009c1e:	189b      	adds	r3, r3, r2
 8009c20:	59db      	ldr	r3, [r3, r7]
 8009c22:	0021      	movs	r1, r4
 8009c24:	9800      	ldr	r0, [sp, #0]
 8009c26:	9302      	str	r3, [sp, #8]
 8009c28:	4798      	blx	r3
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d0e4      	beq.n	8009bf8 <__ssvfiscanf_r+0x1b0>
 8009c2e:	9848      	ldr	r0, [sp, #288]	; 0x120
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d000      	beq.n	8009c36 <__ssvfiscanf_r+0x1ee>
 8009c34:	e07b      	b.n	8009d2e <__ssvfiscanf_r+0x2e6>
 8009c36:	3801      	subs	r0, #1
 8009c38:	23a7      	movs	r3, #167	; 0xa7
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	449d      	add	sp, r3
 8009c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c42:	9201      	str	r2, [sp, #4]
 8009c44:	2220      	movs	r2, #32
 8009c46:	9901      	ldr	r1, [sp, #4]
 8009c48:	430a      	orrs	r2, r1
 8009c4a:	9245      	str	r2, [sp, #276]	; 0x114
 8009c4c:	e78e      	b.n	8009b6c <__ssvfiscanf_r+0x124>
 8009c4e:	2308      	movs	r3, #8
 8009c50:	2204      	movs	r2, #4
 8009c52:	9346      	str	r3, [sp, #280]	; 0x118
 8009c54:	e7ab      	b.n	8009bae <__ssvfiscanf_r+0x166>
 8009c56:	0031      	movs	r1, r6
 8009c58:	a805      	add	r0, sp, #20
 8009c5a:	f000 f9df 	bl	800a01c <__sccl>
 8009c5e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009c60:	0006      	movs	r6, r0
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	9a01      	ldr	r2, [sp, #4]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	9345      	str	r3, [sp, #276]	; 0x114
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	934b      	str	r3, [sp, #300]	; 0x12c
 8009c70:	e79e      	b.n	8009bb0 <__ssvfiscanf_r+0x168>
 8009c72:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009c74:	9301      	str	r3, [sp, #4]
 8009c76:	2340      	movs	r3, #64	; 0x40
 8009c78:	9a01      	ldr	r2, [sp, #4]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	9345      	str	r3, [sp, #276]	; 0x114
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e7f5      	b.n	8009c6e <__ssvfiscanf_r+0x226>
 8009c82:	9945      	ldr	r1, [sp, #276]	; 0x114
 8009c84:	06cb      	lsls	r3, r1, #27
 8009c86:	d500      	bpl.n	8009c8a <__ssvfiscanf_r+0x242>
 8009c88:	e754      	b.n	8009b34 <__ssvfiscanf_r+0xec>
 8009c8a:	9b03      	ldr	r3, [sp, #12]
 8009c8c:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8009c8e:	07c8      	lsls	r0, r1, #31
 8009c90:	d504      	bpl.n	8009c9c <__ssvfiscanf_r+0x254>
 8009c92:	1d19      	adds	r1, r3, #4
 8009c94:	9103      	str	r1, [sp, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	e74b      	b.n	8009b34 <__ssvfiscanf_r+0xec>
 8009c9c:	1d19      	adds	r1, r3, #4
 8009c9e:	9103      	str	r1, [sp, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	e746      	b.n	8009b34 <__ssvfiscanf_r+0xec>
 8009ca6:	2305      	movs	r3, #5
 8009ca8:	e7e1      	b.n	8009c6e <__ssvfiscanf_r+0x226>
 8009caa:	2286      	movs	r2, #134	; 0x86
 8009cac:	ab02      	add	r3, sp, #8
 8009cae:	0052      	lsls	r2, r2, #1
 8009cb0:	189b      	adds	r3, r3, r2
 8009cb2:	59db      	ldr	r3, [r3, r7]
 8009cb4:	0021      	movs	r1, r4
 8009cb6:	9800      	ldr	r0, [sp, #0]
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	4798      	blx	r3
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d100      	bne.n	8009cc2 <__ssvfiscanf_r+0x27a>
 8009cc0:	e77a      	b.n	8009bb8 <__ssvfiscanf_r+0x170>
 8009cc2:	e7b4      	b.n	8009c2e <__ssvfiscanf_r+0x1e6>
 8009cc4:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8009cc6:	9201      	str	r2, [sp, #4]
 8009cc8:	3201      	adds	r2, #1
 8009cca:	9249      	str	r2, [sp, #292]	; 0x124
 8009ccc:	6862      	ldr	r2, [r4, #4]
 8009cce:	3a01      	subs	r2, #1
 8009cd0:	6062      	str	r2, [r4, #4]
 8009cd2:	2a00      	cmp	r2, #0
 8009cd4:	dd0b      	ble.n	8009cee <__ssvfiscanf_r+0x2a6>
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	f7ff fdf7 	bl	80098cc <__locale_ctype_ptr>
 8009cde:	2108      	movs	r1, #8
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	781a      	ldrb	r2, [r3, #0]
 8009ce4:	1880      	adds	r0, r0, r2
 8009ce6:	7842      	ldrb	r2, [r0, #1]
 8009ce8:	420a      	tst	r2, r1
 8009cea:	d1eb      	bne.n	8009cc4 <__ssvfiscanf_r+0x27c>
 8009cec:	e769      	b.n	8009bc2 <__ssvfiscanf_r+0x17a>
 8009cee:	2286      	movs	r2, #134	; 0x86
 8009cf0:	ab02      	add	r3, sp, #8
 8009cf2:	0052      	lsls	r2, r2, #1
 8009cf4:	189b      	adds	r3, r3, r2
 8009cf6:	59db      	ldr	r3, [r3, r7]
 8009cf8:	0021      	movs	r1, r4
 8009cfa:	9800      	ldr	r0, [sp, #0]
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	4798      	blx	r3
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d0ea      	beq.n	8009cda <__ssvfiscanf_r+0x292>
 8009d04:	e793      	b.n	8009c2e <__ssvfiscanf_r+0x1e6>
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	dc06      	bgt.n	8009d18 <__ssvfiscanf_r+0x2d0>
 8009d0a:	ab03      	add	r3, sp, #12
 8009d0c:	0022      	movs	r2, r4
 8009d0e:	a945      	add	r1, sp, #276	; 0x114
 8009d10:	9800      	ldr	r0, [sp, #0]
 8009d12:	f000 f883 	bl	8009e1c <_scanf_i>
 8009d16:	e75e      	b.n	8009bd6 <__ssvfiscanf_r+0x18e>
 8009d18:	4b0d      	ldr	r3, [pc, #52]	; (8009d50 <__ssvfiscanf_r+0x308>)
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d100      	bne.n	8009d20 <__ssvfiscanf_r+0x2d8>
 8009d1e:	e709      	b.n	8009b34 <__ssvfiscanf_r+0xec>
 8009d20:	ab03      	add	r3, sp, #12
 8009d22:	0022      	movs	r2, r4
 8009d24:	a945      	add	r1, sp, #276	; 0x114
 8009d26:	9800      	ldr	r0, [sp, #0]
 8009d28:	e000      	b.n	8009d2c <__ssvfiscanf_r+0x2e4>
 8009d2a:	bf00      	nop
 8009d2c:	e753      	b.n	8009bd6 <__ssvfiscanf_r+0x18e>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	065b      	lsls	r3, r3, #25
 8009d32:	d400      	bmi.n	8009d36 <__ssvfiscanf_r+0x2ee>
 8009d34:	e780      	b.n	8009c38 <__ssvfiscanf_r+0x1f0>
 8009d36:	2001      	movs	r0, #1
 8009d38:	4240      	negs	r0, r0
 8009d3a:	e77d      	b.n	8009c38 <__ssvfiscanf_r+0x1f0>
 8009d3c:	9848      	ldr	r0, [sp, #288]	; 0x120
 8009d3e:	e77b      	b.n	8009c38 <__ssvfiscanf_r+0x1f0>
 8009d40:	fffffd64 	.word	0xfffffd64
 8009d44:	08009993 	.word	0x08009993
 8009d48:	08009a0b 	.word	0x08009a0b
 8009d4c:	0800a5fa 	.word	0x0800a5fa
 8009d50:	00000000 	.word	0x00000000

08009d54 <_scanf_chars>:
 8009d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d56:	0015      	movs	r5, r2
 8009d58:	688a      	ldr	r2, [r1, #8]
 8009d5a:	9001      	str	r0, [sp, #4]
 8009d5c:	000c      	movs	r4, r1
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	d106      	bne.n	8009d70 <_scanf_chars+0x1c>
 8009d62:	698a      	ldr	r2, [r1, #24]
 8009d64:	1e51      	subs	r1, r2, #1
 8009d66:	418a      	sbcs	r2, r1
 8009d68:	2101      	movs	r1, #1
 8009d6a:	4252      	negs	r2, r2
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	60a2      	str	r2, [r4, #8]
 8009d70:	6822      	ldr	r2, [r4, #0]
 8009d72:	06d2      	lsls	r2, r2, #27
 8009d74:	d403      	bmi.n	8009d7e <_scanf_chars+0x2a>
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	1d11      	adds	r1, r2, #4
 8009d7a:	6019      	str	r1, [r3, #0]
 8009d7c:	6817      	ldr	r7, [r2, #0]
 8009d7e:	2600      	movs	r6, #0
 8009d80:	69a3      	ldr	r3, [r4, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d01c      	beq.n	8009dc0 <_scanf_chars+0x6c>
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d108      	bne.n	8009d9c <_scanf_chars+0x48>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	6962      	ldr	r2, [r4, #20]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	5cd3      	ldrb	r3, [r2, r3]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d114      	bne.n	8009dc0 <_scanf_chars+0x6c>
 8009d96:	2e00      	cmp	r6, #0
 8009d98:	d130      	bne.n	8009dfc <_scanf_chars+0xa8>
 8009d9a:	e006      	b.n	8009daa <_scanf_chars+0x56>
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d006      	beq.n	8009dae <_scanf_chars+0x5a>
 8009da0:	2e00      	cmp	r6, #0
 8009da2:	d12b      	bne.n	8009dfc <_scanf_chars+0xa8>
 8009da4:	69a3      	ldr	r3, [r4, #24]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d128      	bne.n	8009dfc <_scanf_chars+0xa8>
 8009daa:	2001      	movs	r0, #1
 8009dac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009dae:	f7ff fd8d 	bl	80098cc <__locale_ctype_ptr>
 8009db2:	2208      	movs	r2, #8
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	18c0      	adds	r0, r0, r3
 8009dba:	7843      	ldrb	r3, [r0, #1]
 8009dbc:	4213      	tst	r3, r2
 8009dbe:	d1ef      	bne.n	8009da0 <_scanf_chars+0x4c>
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	3601      	adds	r6, #1
 8009dc6:	4213      	tst	r3, r2
 8009dc8:	d103      	bne.n	8009dd2 <_scanf_chars+0x7e>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	703b      	strb	r3, [r7, #0]
 8009dd0:	3701      	adds	r7, #1
 8009dd2:	682a      	ldr	r2, [r5, #0]
 8009dd4:	686b      	ldr	r3, [r5, #4]
 8009dd6:	3201      	adds	r2, #1
 8009dd8:	602a      	str	r2, [r5, #0]
 8009dda:	68a2      	ldr	r2, [r4, #8]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	3a01      	subs	r2, #1
 8009de0:	606b      	str	r3, [r5, #4]
 8009de2:	60a2      	str	r2, [r4, #8]
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	d009      	beq.n	8009dfc <_scanf_chars+0xa8>
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	dcc9      	bgt.n	8009d80 <_scanf_chars+0x2c>
 8009dec:	23c0      	movs	r3, #192	; 0xc0
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	58e3      	ldr	r3, [r4, r3]
 8009df2:	0029      	movs	r1, r5
 8009df4:	9801      	ldr	r0, [sp, #4]
 8009df6:	4798      	blx	r3
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d0c1      	beq.n	8009d80 <_scanf_chars+0x2c>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	6822      	ldr	r2, [r4, #0]
 8009e00:	4013      	ands	r3, r2
 8009e02:	d106      	bne.n	8009e12 <_scanf_chars+0xbe>
 8009e04:	68e2      	ldr	r2, [r4, #12]
 8009e06:	3201      	adds	r2, #1
 8009e08:	60e2      	str	r2, [r4, #12]
 8009e0a:	69a2      	ldr	r2, [r4, #24]
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	d000      	beq.n	8009e12 <_scanf_chars+0xbe>
 8009e10:	703b      	strb	r3, [r7, #0]
 8009e12:	6923      	ldr	r3, [r4, #16]
 8009e14:	2000      	movs	r0, #0
 8009e16:	199e      	adds	r6, r3, r6
 8009e18:	6126      	str	r6, [r4, #16]
 8009e1a:	e7c7      	b.n	8009dac <_scanf_chars+0x58>

08009e1c <_scanf_i>:
 8009e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e1e:	000c      	movs	r4, r1
 8009e20:	b08d      	sub	sp, #52	; 0x34
 8009e22:	9302      	str	r3, [sp, #8]
 8009e24:	4b77      	ldr	r3, [pc, #476]	; (800a004 <_scanf_i+0x1e8>)
 8009e26:	9005      	str	r0, [sp, #20]
 8009e28:	0016      	movs	r6, r2
 8009e2a:	aa09      	add	r2, sp, #36	; 0x24
 8009e2c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8009e2e:	c223      	stmia	r2!, {r0, r1, r5}
 8009e30:	4b75      	ldr	r3, [pc, #468]	; (800a008 <_scanf_i+0x1ec>)
 8009e32:	9306      	str	r3, [sp, #24]
 8009e34:	69a3      	ldr	r3, [r4, #24]
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d001      	beq.n	8009e3e <_scanf_i+0x22>
 8009e3a:	4b74      	ldr	r3, [pc, #464]	; (800a00c <_scanf_i+0x1f0>)
 8009e3c:	9306      	str	r3, [sp, #24]
 8009e3e:	22ae      	movs	r2, #174	; 0xae
 8009e40:	2000      	movs	r0, #0
 8009e42:	68a3      	ldr	r3, [r4, #8]
 8009e44:	0052      	lsls	r2, r2, #1
 8009e46:	1e59      	subs	r1, r3, #1
 8009e48:	9004      	str	r0, [sp, #16]
 8009e4a:	4291      	cmp	r1, r2
 8009e4c:	d905      	bls.n	8009e5a <_scanf_i+0x3e>
 8009e4e:	3b5e      	subs	r3, #94	; 0x5e
 8009e50:	3bff      	subs	r3, #255	; 0xff
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	235e      	movs	r3, #94	; 0x5e
 8009e56:	33ff      	adds	r3, #255	; 0xff
 8009e58:	60a3      	str	r3, [r4, #8]
 8009e5a:	0023      	movs	r3, r4
 8009e5c:	331c      	adds	r3, #28
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	23d0      	movs	r3, #208	; 0xd0
 8009e62:	2700      	movs	r7, #0
 8009e64:	6822      	ldr	r2, [r4, #0]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	9b01      	ldr	r3, [sp, #4]
 8009e6e:	9303      	str	r3, [sp, #12]
 8009e70:	6833      	ldr	r3, [r6, #0]
 8009e72:	a809      	add	r0, sp, #36	; 0x24
 8009e74:	7819      	ldrb	r1, [r3, #0]
 8009e76:	00bb      	lsls	r3, r7, #2
 8009e78:	2202      	movs	r2, #2
 8009e7a:	5818      	ldr	r0, [r3, r0]
 8009e7c:	f7ff fd46 	bl	800990c <memchr>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d02b      	beq.n	8009edc <_scanf_i+0xc0>
 8009e84:	2f01      	cmp	r7, #1
 8009e86:	d15f      	bne.n	8009f48 <_scanf_i+0x12c>
 8009e88:	6863      	ldr	r3, [r4, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d106      	bne.n	8009e9c <_scanf_i+0x80>
 8009e8e:	3308      	adds	r3, #8
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	6063      	str	r3, [r4, #4]
 8009e94:	33f9      	adds	r3, #249	; 0xf9
 8009e96:	33ff      	adds	r3, #255	; 0xff
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	4b5c      	ldr	r3, [pc, #368]	; (800a010 <_scanf_i+0x1f4>)
 8009e9e:	6822      	ldr	r2, [r4, #0]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	6023      	str	r3, [r4, #0]
 8009ea4:	68a3      	ldr	r3, [r4, #8]
 8009ea6:	1e5a      	subs	r2, r3, #1
 8009ea8:	60a2      	str	r2, [r4, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d016      	beq.n	8009edc <_scanf_i+0xc0>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	1c5d      	adds	r5, r3, #1
 8009eb2:	6833      	ldr	r3, [r6, #0]
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	6032      	str	r2, [r6, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	9a03      	ldr	r2, [sp, #12]
 8009ebc:	9503      	str	r5, [sp, #12]
 8009ebe:	7013      	strb	r3, [r2, #0]
 8009ec0:	6873      	ldr	r3, [r6, #4]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	6073      	str	r3, [r6, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dc08      	bgt.n	8009edc <_scanf_i+0xc0>
 8009eca:	23c0      	movs	r3, #192	; 0xc0
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	58e3      	ldr	r3, [r4, r3]
 8009ed0:	0031      	movs	r1, r6
 8009ed2:	9805      	ldr	r0, [sp, #20]
 8009ed4:	9307      	str	r3, [sp, #28]
 8009ed6:	4798      	blx	r3
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d17d      	bne.n	8009fd8 <_scanf_i+0x1bc>
 8009edc:	3701      	adds	r7, #1
 8009ede:	2f03      	cmp	r7, #3
 8009ee0:	d1c6      	bne.n	8009e70 <_scanf_i+0x54>
 8009ee2:	6863      	ldr	r3, [r4, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <_scanf_i+0xd0>
 8009ee8:	330a      	adds	r3, #10
 8009eea:	6063      	str	r3, [r4, #4]
 8009eec:	2110      	movs	r1, #16
 8009eee:	2700      	movs	r7, #0
 8009ef0:	6863      	ldr	r3, [r4, #4]
 8009ef2:	6960      	ldr	r0, [r4, #20]
 8009ef4:	1ac9      	subs	r1, r1, r3
 8009ef6:	4b47      	ldr	r3, [pc, #284]	; (800a014 <_scanf_i+0x1f8>)
 8009ef8:	18c9      	adds	r1, r1, r3
 8009efa:	f000 f88f 	bl	800a01c <__sccl>
 8009efe:	9d03      	ldr	r5, [sp, #12]
 8009f00:	68a3      	ldr	r3, [r4, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d041      	beq.n	8009f8a <_scanf_i+0x16e>
 8009f06:	6832      	ldr	r2, [r6, #0]
 8009f08:	6960      	ldr	r0, [r4, #20]
 8009f0a:	7811      	ldrb	r1, [r2, #0]
 8009f0c:	5c40      	ldrb	r0, [r0, r1]
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d03b      	beq.n	8009f8a <_scanf_i+0x16e>
 8009f12:	2930      	cmp	r1, #48	; 0x30
 8009f14:	d128      	bne.n	8009f68 <_scanf_i+0x14c>
 8009f16:	2080      	movs	r0, #128	; 0x80
 8009f18:	6821      	ldr	r1, [r4, #0]
 8009f1a:	0100      	lsls	r0, r0, #4
 8009f1c:	4201      	tst	r1, r0
 8009f1e:	d023      	beq.n	8009f68 <_scanf_i+0x14c>
 8009f20:	9a04      	ldr	r2, [sp, #16]
 8009f22:	3701      	adds	r7, #1
 8009f24:	2a00      	cmp	r2, #0
 8009f26:	d003      	beq.n	8009f30 <_scanf_i+0x114>
 8009f28:	3a01      	subs	r2, #1
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	9204      	str	r2, [sp, #16]
 8009f2e:	60a3      	str	r3, [r4, #8]
 8009f30:	6873      	ldr	r3, [r6, #4]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	6073      	str	r3, [r6, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	dd1e      	ble.n	8009f78 <_scanf_i+0x15c>
 8009f3a:	6833      	ldr	r3, [r6, #0]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	6033      	str	r3, [r6, #0]
 8009f40:	68a3      	ldr	r3, [r4, #8]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	60a3      	str	r3, [r4, #8]
 8009f46:	e7db      	b.n	8009f00 <_scanf_i+0xe4>
 8009f48:	2f02      	cmp	r7, #2
 8009f4a:	d1ab      	bne.n	8009ea4 <_scanf_i+0x88>
 8009f4c:	21c0      	movs	r1, #192	; 0xc0
 8009f4e:	2380      	movs	r3, #128	; 0x80
 8009f50:	6822      	ldr	r2, [r4, #0]
 8009f52:	00c9      	lsls	r1, r1, #3
 8009f54:	4011      	ands	r1, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4299      	cmp	r1, r3
 8009f5a:	d1c2      	bne.n	8009ee2 <_scanf_i+0xc6>
 8009f5c:	3bf1      	subs	r3, #241	; 0xf1
 8009f5e:	3bff      	subs	r3, #255	; 0xff
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	33f0      	adds	r3, #240	; 0xf0
 8009f64:	4313      	orrs	r3, r2
 8009f66:	e79c      	b.n	8009ea2 <_scanf_i+0x86>
 8009f68:	6821      	ldr	r1, [r4, #0]
 8009f6a:	4b2b      	ldr	r3, [pc, #172]	; (800a018 <_scanf_i+0x1fc>)
 8009f6c:	400b      	ands	r3, r1
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	7813      	ldrb	r3, [r2, #0]
 8009f72:	702b      	strb	r3, [r5, #0]
 8009f74:	3501      	adds	r5, #1
 8009f76:	e7db      	b.n	8009f30 <_scanf_i+0x114>
 8009f78:	23c0      	movs	r3, #192	; 0xc0
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	58e3      	ldr	r3, [r4, r3]
 8009f7e:	0031      	movs	r1, r6
 8009f80:	9805      	ldr	r0, [sp, #20]
 8009f82:	9303      	str	r3, [sp, #12]
 8009f84:	4798      	blx	r3
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d0da      	beq.n	8009f40 <_scanf_i+0x124>
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	05db      	lsls	r3, r3, #23
 8009f8e:	d50e      	bpl.n	8009fae <_scanf_i+0x192>
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	429d      	cmp	r5, r3
 8009f94:	d907      	bls.n	8009fa6 <_scanf_i+0x18a>
 8009f96:	23be      	movs	r3, #190	; 0xbe
 8009f98:	3d01      	subs	r5, #1
 8009f9a:	005b      	lsls	r3, r3, #1
 8009f9c:	7829      	ldrb	r1, [r5, #0]
 8009f9e:	58e3      	ldr	r3, [r4, r3]
 8009fa0:	0032      	movs	r2, r6
 8009fa2:	9805      	ldr	r0, [sp, #20]
 8009fa4:	4798      	blx	r3
 8009fa6:	9b01      	ldr	r3, [sp, #4]
 8009fa8:	2001      	movs	r0, #1
 8009faa:	429d      	cmp	r5, r3
 8009fac:	d027      	beq.n	8009ffe <_scanf_i+0x1e2>
 8009fae:	2210      	movs	r2, #16
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	401a      	ands	r2, r3
 8009fb4:	d11c      	bne.n	8009ff0 <_scanf_i+0x1d4>
 8009fb6:	702a      	strb	r2, [r5, #0]
 8009fb8:	6863      	ldr	r3, [r4, #4]
 8009fba:	9901      	ldr	r1, [sp, #4]
 8009fbc:	9805      	ldr	r0, [sp, #20]
 8009fbe:	9e06      	ldr	r6, [sp, #24]
 8009fc0:	47b0      	blx	r6
 8009fc2:	9b02      	ldr	r3, [sp, #8]
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	0691      	lsls	r1, r2, #26
 8009fca:	d507      	bpl.n	8009fdc <_scanf_i+0x1c0>
 8009fcc:	9902      	ldr	r1, [sp, #8]
 8009fce:	1d1a      	adds	r2, r3, #4
 8009fd0:	600a      	str	r2, [r1, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6018      	str	r0, [r3, #0]
 8009fd6:	e008      	b.n	8009fea <_scanf_i+0x1ce>
 8009fd8:	2700      	movs	r7, #0
 8009fda:	e7d6      	b.n	8009f8a <_scanf_i+0x16e>
 8009fdc:	07d1      	lsls	r1, r2, #31
 8009fde:	d5f5      	bpl.n	8009fcc <_scanf_i+0x1b0>
 8009fe0:	9902      	ldr	r1, [sp, #8]
 8009fe2:	1d1a      	adds	r2, r3, #4
 8009fe4:	600a      	str	r2, [r1, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	8018      	strh	r0, [r3, #0]
 8009fea:	68e3      	ldr	r3, [r4, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	60e3      	str	r3, [r4, #12]
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	9b01      	ldr	r3, [sp, #4]
 8009ff4:	1aed      	subs	r5, r5, r3
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	19ef      	adds	r7, r5, r7
 8009ffa:	19df      	adds	r7, r3, r7
 8009ffc:	6127      	str	r7, [r4, #16]
 8009ffe:	b00d      	add	sp, #52	; 0x34
 800a000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a002:	46c0      	nop			; (mov r8, r8)
 800a004:	0800a2f4 	.word	0x0800a2f4
 800a008:	0800a18d 	.word	0x0800a18d
 800a00c:	08009879 	.word	0x08009879
 800a010:	fffffaff 	.word	0xfffffaff
 800a014:	0800a62f 	.word	0x0800a62f
 800a018:	fffff6ff 	.word	0xfffff6ff

0800a01c <__sccl>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	780b      	ldrb	r3, [r1, #0]
 800a020:	2b5e      	cmp	r3, #94	; 0x5e
 800a022:	d00d      	beq.n	800a040 <__sccl+0x24>
 800a024:	1c4a      	adds	r2, r1, #1
 800a026:	2100      	movs	r1, #0
 800a028:	0004      	movs	r4, r0
 800a02a:	1c45      	adds	r5, r0, #1
 800a02c:	35ff      	adds	r5, #255	; 0xff
 800a02e:	7021      	strb	r1, [r4, #0]
 800a030:	3401      	adds	r4, #1
 800a032:	42a5      	cmp	r5, r4
 800a034:	d1fb      	bne.n	800a02e <__sccl+0x12>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <__sccl+0x2c>
 800a03a:	3a01      	subs	r2, #1
 800a03c:	0010      	movs	r0, r2
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	1c8a      	adds	r2, r1, #2
 800a042:	784b      	ldrb	r3, [r1, #1]
 800a044:	2101      	movs	r1, #1
 800a046:	e7ef      	b.n	800a028 <__sccl+0xc>
 800a048:	2401      	movs	r4, #1
 800a04a:	404c      	eors	r4, r1
 800a04c:	0011      	movs	r1, r2
 800a04e:	54c4      	strb	r4, [r0, r3]
 800a050:	780d      	ldrb	r5, [r1, #0]
 800a052:	1c4a      	adds	r2, r1, #1
 800a054:	2d2d      	cmp	r5, #45	; 0x2d
 800a056:	d007      	beq.n	800a068 <__sccl+0x4c>
 800a058:	2d5d      	cmp	r5, #93	; 0x5d
 800a05a:	d0ef      	beq.n	800a03c <__sccl+0x20>
 800a05c:	2d00      	cmp	r5, #0
 800a05e:	d101      	bne.n	800a064 <__sccl+0x48>
 800a060:	000a      	movs	r2, r1
 800a062:	e7eb      	b.n	800a03c <__sccl+0x20>
 800a064:	002b      	movs	r3, r5
 800a066:	e7f1      	b.n	800a04c <__sccl+0x30>
 800a068:	784e      	ldrb	r6, [r1, #1]
 800a06a:	2e5d      	cmp	r6, #93	; 0x5d
 800a06c:	d0fa      	beq.n	800a064 <__sccl+0x48>
 800a06e:	42b3      	cmp	r3, r6
 800a070:	dcf8      	bgt.n	800a064 <__sccl+0x48>
 800a072:	3102      	adds	r1, #2
 800a074:	3301      	adds	r3, #1
 800a076:	54c4      	strb	r4, [r0, r3]
 800a078:	429e      	cmp	r6, r3
 800a07a:	dcfb      	bgt.n	800a074 <__sccl+0x58>
 800a07c:	e7e8      	b.n	800a050 <__sccl+0x34>
	...

0800a080 <_strtol_l.isra.0>:
 800a080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a082:	001f      	movs	r7, r3
 800a084:	000e      	movs	r6, r1
 800a086:	b087      	sub	sp, #28
 800a088:	9005      	str	r0, [sp, #20]
 800a08a:	9103      	str	r1, [sp, #12]
 800a08c:	9202      	str	r2, [sp, #8]
 800a08e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a090:	7834      	ldrb	r4, [r6, #0]
 800a092:	f7ff fc17 	bl	80098c4 <__locale_ctype_ptr_l>
 800a096:	2208      	movs	r2, #8
 800a098:	1900      	adds	r0, r0, r4
 800a09a:	7843      	ldrb	r3, [r0, #1]
 800a09c:	1c75      	adds	r5, r6, #1
 800a09e:	4013      	ands	r3, r2
 800a0a0:	d10c      	bne.n	800a0bc <_strtol_l.isra.0+0x3c>
 800a0a2:	2c2d      	cmp	r4, #45	; 0x2d
 800a0a4:	d10c      	bne.n	800a0c0 <_strtol_l.isra.0+0x40>
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	782c      	ldrb	r4, [r5, #0]
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	1cb5      	adds	r5, r6, #2
 800a0ae:	2f00      	cmp	r7, #0
 800a0b0:	d00c      	beq.n	800a0cc <_strtol_l.isra.0+0x4c>
 800a0b2:	2f10      	cmp	r7, #16
 800a0b4:	d114      	bne.n	800a0e0 <_strtol_l.isra.0+0x60>
 800a0b6:	2c30      	cmp	r4, #48	; 0x30
 800a0b8:	d00a      	beq.n	800a0d0 <_strtol_l.isra.0+0x50>
 800a0ba:	e011      	b.n	800a0e0 <_strtol_l.isra.0+0x60>
 800a0bc:	002e      	movs	r6, r5
 800a0be:	e7e6      	b.n	800a08e <_strtol_l.isra.0+0xe>
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	2c2b      	cmp	r4, #43	; 0x2b
 800a0c4:	d1f3      	bne.n	800a0ae <_strtol_l.isra.0+0x2e>
 800a0c6:	782c      	ldrb	r4, [r5, #0]
 800a0c8:	1cb5      	adds	r5, r6, #2
 800a0ca:	e7f0      	b.n	800a0ae <_strtol_l.isra.0+0x2e>
 800a0cc:	2c30      	cmp	r4, #48	; 0x30
 800a0ce:	d12f      	bne.n	800a130 <_strtol_l.isra.0+0xb0>
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	782b      	ldrb	r3, [r5, #0]
 800a0d4:	4393      	bics	r3, r2
 800a0d6:	2b58      	cmp	r3, #88	; 0x58
 800a0d8:	d151      	bne.n	800a17e <_strtol_l.isra.0+0xfe>
 800a0da:	2710      	movs	r7, #16
 800a0dc:	786c      	ldrb	r4, [r5, #1]
 800a0de:	3502      	adds	r5, #2
 800a0e0:	9b01      	ldr	r3, [sp, #4]
 800a0e2:	4a29      	ldr	r2, [pc, #164]	; (800a188 <_strtol_l.isra.0+0x108>)
 800a0e4:	0039      	movs	r1, r7
 800a0e6:	189e      	adds	r6, r3, r2
 800a0e8:	0030      	movs	r0, r6
 800a0ea:	f7f6 f8b9 	bl	8000260 <__aeabi_uidivmod>
 800a0ee:	0030      	movs	r0, r6
 800a0f0:	9104      	str	r1, [sp, #16]
 800a0f2:	0039      	movs	r1, r7
 800a0f4:	f7f6 f82e 	bl	8000154 <__udivsi3>
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4249      	negs	r1, r1
 800a0fe:	0002      	movs	r2, r0
 800a100:	468c      	mov	ip, r1
 800a102:	0018      	movs	r0, r3
 800a104:	0021      	movs	r1, r4
 800a106:	3930      	subs	r1, #48	; 0x30
 800a108:	2909      	cmp	r1, #9
 800a10a:	d813      	bhi.n	800a134 <_strtol_l.isra.0+0xb4>
 800a10c:	000c      	movs	r4, r1
 800a10e:	42a7      	cmp	r7, r4
 800a110:	dd1c      	ble.n	800a14c <_strtol_l.isra.0+0xcc>
 800a112:	1c59      	adds	r1, r3, #1
 800a114:	d009      	beq.n	800a12a <_strtol_l.isra.0+0xaa>
 800a116:	4663      	mov	r3, ip
 800a118:	4282      	cmp	r2, r0
 800a11a:	d306      	bcc.n	800a12a <_strtol_l.isra.0+0xaa>
 800a11c:	d102      	bne.n	800a124 <_strtol_l.isra.0+0xa4>
 800a11e:	9904      	ldr	r1, [sp, #16]
 800a120:	42a1      	cmp	r1, r4
 800a122:	db02      	blt.n	800a12a <_strtol_l.isra.0+0xaa>
 800a124:	2301      	movs	r3, #1
 800a126:	4378      	muls	r0, r7
 800a128:	1820      	adds	r0, r4, r0
 800a12a:	782c      	ldrb	r4, [r5, #0]
 800a12c:	3501      	adds	r5, #1
 800a12e:	e7e9      	b.n	800a104 <_strtol_l.isra.0+0x84>
 800a130:	270a      	movs	r7, #10
 800a132:	e7d5      	b.n	800a0e0 <_strtol_l.isra.0+0x60>
 800a134:	0021      	movs	r1, r4
 800a136:	3941      	subs	r1, #65	; 0x41
 800a138:	2919      	cmp	r1, #25
 800a13a:	d801      	bhi.n	800a140 <_strtol_l.isra.0+0xc0>
 800a13c:	3c37      	subs	r4, #55	; 0x37
 800a13e:	e7e6      	b.n	800a10e <_strtol_l.isra.0+0x8e>
 800a140:	0021      	movs	r1, r4
 800a142:	3961      	subs	r1, #97	; 0x61
 800a144:	2919      	cmp	r1, #25
 800a146:	d801      	bhi.n	800a14c <_strtol_l.isra.0+0xcc>
 800a148:	3c57      	subs	r4, #87	; 0x57
 800a14a:	e7e0      	b.n	800a10e <_strtol_l.isra.0+0x8e>
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	d108      	bne.n	800a162 <_strtol_l.isra.0+0xe2>
 800a150:	9a05      	ldr	r2, [sp, #20]
 800a152:	3323      	adds	r3, #35	; 0x23
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	9b02      	ldr	r3, [sp, #8]
 800a158:	0030      	movs	r0, r6
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10b      	bne.n	800a176 <_strtol_l.isra.0+0xf6>
 800a15e:	b007      	add	sp, #28
 800a160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a162:	9a01      	ldr	r2, [sp, #4]
 800a164:	2a00      	cmp	r2, #0
 800a166:	d000      	beq.n	800a16a <_strtol_l.isra.0+0xea>
 800a168:	4240      	negs	r0, r0
 800a16a:	9a02      	ldr	r2, [sp, #8]
 800a16c:	2a00      	cmp	r2, #0
 800a16e:	d0f6      	beq.n	800a15e <_strtol_l.isra.0+0xde>
 800a170:	9a03      	ldr	r2, [sp, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d000      	beq.n	800a178 <_strtol_l.isra.0+0xf8>
 800a176:	1e6a      	subs	r2, r5, #1
 800a178:	9b02      	ldr	r3, [sp, #8]
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	e7ef      	b.n	800a15e <_strtol_l.isra.0+0xde>
 800a17e:	2430      	movs	r4, #48	; 0x30
 800a180:	2f00      	cmp	r7, #0
 800a182:	d1ad      	bne.n	800a0e0 <_strtol_l.isra.0+0x60>
 800a184:	3708      	adds	r7, #8
 800a186:	e7ab      	b.n	800a0e0 <_strtol_l.isra.0+0x60>
 800a188:	7fffffff 	.word	0x7fffffff

0800a18c <_strtol_r>:
 800a18c:	b513      	push	{r0, r1, r4, lr}
 800a18e:	4c05      	ldr	r4, [pc, #20]	; (800a1a4 <_strtol_r+0x18>)
 800a190:	6824      	ldr	r4, [r4, #0]
 800a192:	6a24      	ldr	r4, [r4, #32]
 800a194:	2c00      	cmp	r4, #0
 800a196:	d100      	bne.n	800a19a <_strtol_r+0xe>
 800a198:	4c03      	ldr	r4, [pc, #12]	; (800a1a8 <_strtol_r+0x1c>)
 800a19a:	9400      	str	r4, [sp, #0]
 800a19c:	f7ff ff70 	bl	800a080 <_strtol_l.isra.0>
 800a1a0:	bd16      	pop	{r1, r2, r4, pc}
 800a1a2:	46c0      	nop			; (mov r8, r8)
 800a1a4:	20000070 	.word	0x20000070
 800a1a8:	2000011c 	.word	0x2000011c

0800a1ac <__submore>:
 800a1ac:	000b      	movs	r3, r1
 800a1ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1b0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800a1b2:	3344      	adds	r3, #68	; 0x44
 800a1b4:	000c      	movs	r4, r1
 800a1b6:	429d      	cmp	r5, r3
 800a1b8:	d11c      	bne.n	800a1f4 <__submore+0x48>
 800a1ba:	2680      	movs	r6, #128	; 0x80
 800a1bc:	00f6      	lsls	r6, r6, #3
 800a1be:	0031      	movs	r1, r6
 800a1c0:	f7fe fbb8 	bl	8008934 <_malloc_r>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d102      	bne.n	800a1ce <__submore+0x22>
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	4240      	negs	r0, r0
 800a1cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a1ce:	0023      	movs	r3, r4
 800a1d0:	6360      	str	r0, [r4, #52]	; 0x34
 800a1d2:	63a6      	str	r6, [r4, #56]	; 0x38
 800a1d4:	3346      	adds	r3, #70	; 0x46
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	4b10      	ldr	r3, [pc, #64]	; (800a21c <__submore+0x70>)
 800a1da:	54c2      	strb	r2, [r0, r3]
 800a1dc:	0023      	movs	r3, r4
 800a1de:	3345      	adds	r3, #69	; 0x45
 800a1e0:	781a      	ldrb	r2, [r3, #0]
 800a1e2:	4b0f      	ldr	r3, [pc, #60]	; (800a220 <__submore+0x74>)
 800a1e4:	54c2      	strb	r2, [r0, r3]
 800a1e6:	782a      	ldrb	r2, [r5, #0]
 800a1e8:	4b0e      	ldr	r3, [pc, #56]	; (800a224 <__submore+0x78>)
 800a1ea:	54c2      	strb	r2, [r0, r3]
 800a1ec:	18c0      	adds	r0, r0, r3
 800a1ee:	6020      	str	r0, [r4, #0]
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	e7eb      	b.n	800a1cc <__submore+0x20>
 800a1f4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800a1f6:	0029      	movs	r1, r5
 800a1f8:	0073      	lsls	r3, r6, #1
 800a1fa:	001a      	movs	r2, r3
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	f7ff fba2 	bl	8009946 <_realloc_r>
 800a202:	1e05      	subs	r5, r0, #0
 800a204:	d0e0      	beq.n	800a1c8 <__submore+0x1c>
 800a206:	1987      	adds	r7, r0, r6
 800a208:	0001      	movs	r1, r0
 800a20a:	0032      	movs	r2, r6
 800a20c:	0038      	movs	r0, r7
 800a20e:	f7fe f8df 	bl	80083d0 <memcpy>
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	6027      	str	r7, [r4, #0]
 800a216:	6365      	str	r5, [r4, #52]	; 0x34
 800a218:	63a3      	str	r3, [r4, #56]	; 0x38
 800a21a:	e7e9      	b.n	800a1f0 <__submore+0x44>
 800a21c:	000003ff 	.word	0x000003ff
 800a220:	000003fe 	.word	0x000003fe
 800a224:	000003fd 	.word	0x000003fd

0800a228 <__ascii_wctomb>:
 800a228:	1e0b      	subs	r3, r1, #0
 800a22a:	d004      	beq.n	800a236 <__ascii_wctomb+0xe>
 800a22c:	2aff      	cmp	r2, #255	; 0xff
 800a22e:	d904      	bls.n	800a23a <__ascii_wctomb+0x12>
 800a230:	238a      	movs	r3, #138	; 0x8a
 800a232:	6003      	str	r3, [r0, #0]
 800a234:	3b8b      	subs	r3, #139	; 0x8b
 800a236:	0018      	movs	r0, r3
 800a238:	4770      	bx	lr
 800a23a:	700a      	strb	r2, [r1, #0]
 800a23c:	2301      	movs	r3, #1
 800a23e:	e7fa      	b.n	800a236 <__ascii_wctomb+0xe>

0800a240 <_malloc_usable_size_r>:
 800a240:	1f0b      	subs	r3, r1, #4
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	1f18      	subs	r0, r3, #4
 800a246:	2b00      	cmp	r3, #0
 800a248:	da01      	bge.n	800a24e <_malloc_usable_size_r+0xe>
 800a24a:	580b      	ldr	r3, [r1, r0]
 800a24c:	18c0      	adds	r0, r0, r3
 800a24e:	4770      	bx	lr

0800a250 <round>:
 800a250:	b570      	push	{r4, r5, r6, lr}
 800a252:	004a      	lsls	r2, r1, #1
 800a254:	4d1d      	ldr	r5, [pc, #116]	; (800a2cc <round+0x7c>)
 800a256:	0d52      	lsrs	r2, r2, #21
 800a258:	1955      	adds	r5, r2, r5
 800a25a:	000e      	movs	r6, r1
 800a25c:	2d13      	cmp	r5, #19
 800a25e:	dc18      	bgt.n	800a292 <round+0x42>
 800a260:	2d00      	cmp	r5, #0
 800a262:	da09      	bge.n	800a278 <round+0x28>
 800a264:	0fcb      	lsrs	r3, r1, #31
 800a266:	07db      	lsls	r3, r3, #31
 800a268:	2200      	movs	r2, #0
 800a26a:	1c69      	adds	r1, r5, #1
 800a26c:	d101      	bne.n	800a272 <round+0x22>
 800a26e:	4918      	ldr	r1, [pc, #96]	; (800a2d0 <round+0x80>)
 800a270:	430b      	orrs	r3, r1
 800a272:	0019      	movs	r1, r3
 800a274:	0010      	movs	r0, r2
 800a276:	e016      	b.n	800a2a6 <round+0x56>
 800a278:	4a16      	ldr	r2, [pc, #88]	; (800a2d4 <round+0x84>)
 800a27a:	412a      	asrs	r2, r5
 800a27c:	420a      	tst	r2, r1
 800a27e:	d101      	bne.n	800a284 <round+0x34>
 800a280:	2800      	cmp	r0, #0
 800a282:	d010      	beq.n	800a2a6 <round+0x56>
 800a284:	2380      	movs	r3, #128	; 0x80
 800a286:	031b      	lsls	r3, r3, #12
 800a288:	412b      	asrs	r3, r5
 800a28a:	199b      	adds	r3, r3, r6
 800a28c:	4393      	bics	r3, r2
 800a28e:	2200      	movs	r2, #0
 800a290:	e7ef      	b.n	800a272 <round+0x22>
 800a292:	2d33      	cmp	r5, #51	; 0x33
 800a294:	dd08      	ble.n	800a2a8 <round+0x58>
 800a296:	2380      	movs	r3, #128	; 0x80
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	429d      	cmp	r5, r3
 800a29c:	d103      	bne.n	800a2a6 <round+0x56>
 800a29e:	0002      	movs	r2, r0
 800a2a0:	000b      	movs	r3, r1
 800a2a2:	f7f6 ffb7 	bl	8001214 <__aeabi_dadd>
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	4e0b      	ldr	r6, [pc, #44]	; (800a2d8 <round+0x88>)
 800a2aa:	1992      	adds	r2, r2, r6
 800a2ac:	2601      	movs	r6, #1
 800a2ae:	4276      	negs	r6, r6
 800a2b0:	40d6      	lsrs	r6, r2
 800a2b2:	4206      	tst	r6, r0
 800a2b4:	d0f7      	beq.n	800a2a6 <round+0x56>
 800a2b6:	2233      	movs	r2, #51	; 0x33
 800a2b8:	1b55      	subs	r5, r2, r5
 800a2ba:	3a32      	subs	r2, #50	; 0x32
 800a2bc:	40aa      	lsls	r2, r5
 800a2be:	1812      	adds	r2, r2, r0
 800a2c0:	4282      	cmp	r2, r0
 800a2c2:	41a4      	sbcs	r4, r4
 800a2c4:	4264      	negs	r4, r4
 800a2c6:	190b      	adds	r3, r1, r4
 800a2c8:	43b2      	bics	r2, r6
 800a2ca:	e7d2      	b.n	800a272 <round+0x22>
 800a2cc:	fffffc01 	.word	0xfffffc01
 800a2d0:	3ff00000 	.word	0x3ff00000
 800a2d4:	000fffff 	.word	0x000fffff
 800a2d8:	fffffbed 	.word	0xfffffbed

0800a2dc <_init>:
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2de:	46c0      	nop			; (mov r8, r8)
 800a2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e2:	bc08      	pop	{r3}
 800a2e4:	469e      	mov	lr, r3
 800a2e6:	4770      	bx	lr

0800a2e8 <_fini>:
 800a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ea:	46c0      	nop			; (mov r8, r8)
 800a2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ee:	bc08      	pop	{r3}
 800a2f0:	469e      	mov	lr, r3
 800a2f2:	4770      	bx	lr
